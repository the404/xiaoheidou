<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Apworks</name>
    </assembly>
    <members>
        <member name="T:Apworks.AggregateRoot">
            <summary>
            Represents the base class for aggregate roots.
            </summary>
        </member>
        <member name="T:Apworks.IAggregateRoot">
            <summary>
            Represents that the implemented classes are aggregate roots.
            </summary>
        </member>
        <member name="T:Apworks.IEntity">
            <summary>
            Represents that the implemented classes are domain entities.
            </summary>
        </member>
        <member name="P:Apworks.IEntity.ID">
            <summary>
            Gets or sets the identifier of the entity.
            </summary>
        </member>
        <member name="M:Apworks.AggregateRoot.#ctor">
            <summary>
            Initializes a new instance of <c>AggregateRoot</c> class.
            </summary>
        </member>
        <member name="M:Apworks.AggregateRoot.GetHashCode">
            <summary>
            Returns the hash code for current aggregate root.
            </summary>
            <returns>The calculated hash code for the current aggregate root.</returns>
        </member>
        <member name="M:Apworks.AggregateRoot.Equals(System.Object)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value indicating whether this instance is equal to a specified
            object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>True if obj is an instance of the <see cref="T:Apworks.ISourcedAggregateRoot"/> type and equals the value of this
            instance; otherwise, false.</returns>
        </member>
        <member name="P:Apworks.AggregateRoot.ID">
            <summary>
            Gets or sets the identifier of the aggregate root.
            </summary>
        </member>
        <member name="T:Apworks.Config.ApworksConfigSection">
            <summary>
            Represents the configuration section for Apworks framework.
            </summary>
        </member>
        <member name="F:Apworks.Config.ApworksConfigSection.XmlnsPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.ApworksConfigSection.Xmlns"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.ApworksConfigSection.ApplicationPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.ApworksConfigSection.Application"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.ApworksConfigSection.ObjectContainerPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.ApworksConfigSection.ObjectContainer"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.ApworksConfigSection.SerializersPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.ApworksConfigSection.Serializers"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.ApworksConfigSection.GeneratorsPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.ApworksConfigSection.Generators"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.ApworksConfigSection.HandlersPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.ApworksConfigSection.Handlers"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.ApworksConfigSection.ExceptionsPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.ApworksConfigSection.Exceptions"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.ApworksConfigSection.InterceptionPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.ApworksConfigSection.Interception"/> property.
            </summary>
        </member>
        <member name="M:Apworks.Config.ApworksConfigSection.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="M:Apworks.Config.ApworksConfigSection.GetSerializedXmlString">
            <summary>
            Returns the serialized XML string for the current Apworks configuration section.
            </summary>
            <returns>The serialized XML string.</returns>
        </member>
        <member name="M:Apworks.Config.ApworksConfigSection.GetInterceptorTypes(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Returns a list of <see cref="T:System.String"/> values which represents the types
            of interceptors references by the given method.
            </summary>
            <param name="contractType">The type for the method.</param>
            <param name="method">The method.</param>
            <returns>A list of <see cref="T:System.String"/> values which contains the interceptor types.</returns>
        </member>
        <member name="P:Apworks.Config.ApworksConfigSection.Xmlns">
            <summary>
            Gets the XML namespace of this Configuration Section.
            </summary>
            <remarks>
            This property makes sure that if the configuration file contains the XML namespace,
            the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
            </remarks>
        </member>
        <member name="P:Apworks.Config.ApworksConfigSection.Application">
            <summary>
            Gets or sets the configuration for the Apworks application.
            </summary>
        </member>
        <member name="P:Apworks.Config.ApworksConfigSection.ObjectContainer">
            <summary>
            Gets or sets the configuration for the object container.
            </summary>
        </member>
        <member name="P:Apworks.Config.ApworksConfigSection.Serializers">
            <summary>
            Gets or sets the configuration for serializers.
            </summary>
        </member>
        <member name="P:Apworks.Config.ApworksConfigSection.Generators">
            <summary>
            Gets or sets the configuration for identity and sequential generators.
            </summary>
        </member>
        <member name="P:Apworks.Config.ApworksConfigSection.Handlers">
            <summary>
            Gets or sets the configuration for command or event handlers.
            </summary>
        </member>
        <member name="P:Apworks.Config.ApworksConfigSection.Exceptions">
            <summary>
            Gets or sets the configuration for exception handling logic within Apworks framework.
            </summary>
        </member>
        <member name="P:Apworks.Config.ApworksConfigSection.Interception">
            <summary>
            Gets or sets the configuration for the interceptions.
            </summary>
        </member>
        <member name="T:Apworks.Config.ApplicationElement">
            <summary>
            The application element
            </summary>
        </member>
        <member name="F:Apworks.Config.ApplicationElement.ProviderPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.ApplicationElement.Provider"/> property.
            </summary>
        </member>
        <member name="M:Apworks.Config.ApplicationElement.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.ApplicationElement.Provider">
            <summary>
            Gets or sets the provider type of the application.
            </summary>
        </member>
        <member name="T:Apworks.Config.ObjectContainerElement">
            <summary>
            The object container element.
            </summary>
        </member>
        <member name="F:Apworks.Config.ObjectContainerElement.ProviderPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.ObjectContainerElement.Provider"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.ObjectContainerElement.InitFromConfigFilePropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.ObjectContainerElement.InitFromConfigFile"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.ObjectContainerElement.SectionNamePropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.ObjectContainerElement.SectionName"/> property.
            </summary>
        </member>
        <member name="M:Apworks.Config.ObjectContainerElement.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.ObjectContainerElement.Provider">
            <summary>
            Gets or sets the provider type of the object container.
            </summary>
        </member>
        <member name="P:Apworks.Config.ObjectContainerElement.InitFromConfigFile">
            <summary>
            Gets or sets the boolean value which indicates whether the object container configuration should be initialized from the app/web.config file.
            </summary>
        </member>
        <member name="P:Apworks.Config.ObjectContainerElement.SectionName">
            <summary>
            Gets or sets the name of the configuration section which would be used by the object container if it is designed to be initialized from the app/web.config file.
            </summary>
        </member>
        <member name="T:Apworks.Config.EventSerializerElement">
            <summary>
            Represents the configuration for the event serializer.
            </summary>
        </member>
        <member name="F:Apworks.Config.EventSerializerElement.ProviderPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.EventSerializerElement.Provider"/> property.
            </summary>
        </member>
        <member name="M:Apworks.Config.EventSerializerElement.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.EventSerializerElement.Provider">
            <summary>
            Gets or sets the provider type of the event serializer.
            </summary>
        </member>
        <member name="T:Apworks.Config.SnapshotSerializerElement">
            <summary>
            Represents the configuration for the snapshot serializer.
            </summary>
        </member>
        <member name="F:Apworks.Config.SnapshotSerializerElement.ProviderPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.SnapshotSerializerElement.Provider"/> property.
            </summary>
        </member>
        <member name="M:Apworks.Config.SnapshotSerializerElement.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.SnapshotSerializerElement.Provider">
            <summary>
            Gets or sets the provider type of the snapshot serializer.
            </summary>
        </member>
        <member name="T:Apworks.Config.SerializerElement">
            <summary>
            Represents the configuration for either event or snapshot serializers.
            </summary>
        </member>
        <member name="F:Apworks.Config.SerializerElement.EventSerializerPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.SerializerElement.EventSerializer"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.SerializerElement.SnapshotSerializerPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.SerializerElement.SnapshotSerializer"/> property.
            </summary>
        </member>
        <member name="M:Apworks.Config.SerializerElement.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.SerializerElement.EventSerializer">
            <summary>
            Gets or sets the configuration for the event serializer.
            </summary>
        </member>
        <member name="P:Apworks.Config.SerializerElement.SnapshotSerializer">
            <summary>
            Gets or sets the configuration for the snapshot serializer.
            </summary>
        </member>
        <member name="T:Apworks.Config.SequenceGeneratorElement">
            <summary>
            Represents the configuration for the sequential generator.
            </summary>
        </member>
        <member name="F:Apworks.Config.SequenceGeneratorElement.ProviderPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.SequenceGeneratorElement.Provider"/> property.
            </summary>
        </member>
        <member name="M:Apworks.Config.SequenceGeneratorElement.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.SequenceGeneratorElement.Provider">
            <summary>
            Gets or sets the type of sequence generator.
            </summary>
        </member>
        <member name="T:Apworks.Config.IdentityGeneratorElement">
            <summary>
            Represents the configuration for the identity generator.
            </summary>
        </member>
        <member name="F:Apworks.Config.IdentityGeneratorElement.ProviderPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.IdentityGeneratorElement.Provider"/> property.
            </summary>
        </member>
        <member name="M:Apworks.Config.IdentityGeneratorElement.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.IdentityGeneratorElement.Provider">
            <summary>
            Gets or sets the type of identity generator.
            </summary>
        </member>
        <member name="T:Apworks.Config.GeneratorElement">
            <summary>
            The Generator element which contains the configuration for either sequential or identity generators.
            </summary>
        </member>
        <member name="F:Apworks.Config.GeneratorElement.SequenceGeneratorPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.GeneratorElement.SequenceGenerator"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.GeneratorElement.IdentityGeneratorPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.GeneratorElement.IdentityGenerator"/> property.
            </summary>
        </member>
        <member name="M:Apworks.Config.GeneratorElement.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.GeneratorElement.SequenceGenerator">
            <summary>
            Gets or sets the configuration for the sequence generator.
            </summary>
        </member>
        <member name="P:Apworks.Config.GeneratorElement.IdentityGenerator">
            <summary>
            Gets or sets the configuration for the identity generator.
            </summary>
        </member>
        <member name="T:Apworks.Config.HandlerElement">
            <summary>
            Represents the configuration for message handlers.
            </summary>
        </member>
        <member name="F:Apworks.Config.HandlerElement.KindPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.HandlerElement.Kind"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.HandlerElement.NamePropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.HandlerElement.Name"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.HandlerElement.SourceTypePropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.HandlerElement.SourceType"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.HandlerElement.SourcePropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.HandlerElement.Source"/> property.
            </summary>
        </member>
        <member name="M:Apworks.Config.HandlerElement.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.HandlerElement.Kind">
            <summary>
            Gets or sets the kind of the handler, can be either Command or Event.
            </summary>
        </member>
        <member name="P:Apworks.Config.HandlerElement.Name">
            <summary>
            Gets or sets the name of the handler.
            </summary>
        </member>
        <member name="P:Apworks.Config.HandlerElement.SourceType">
            <summary>
            Gets or sets the source type, can be either Assembly or Type.
            </summary>
        </member>
        <member name="P:Apworks.Config.HandlerElement.Source">
            <summary>
            Gets or sets the name of the source, which could be either the assembly name, when SourceType is Assembly, or the type name, when SourceType is Type.
            </summary>
        </member>
        <member name="T:Apworks.Config.HandlerElementCollection">
            <summary>
            Represents the configuration collection which contains a set of configuration for message handlers.
            </summary>
        </member>
        <member name="F:Apworks.Config.HandlerElementCollection.HandlerElementPropertyName">
            <summary>
            The XML name of the individual <see cref="T:Apworks.Config.HandlerElement"/> instances in this collection.
            </summary>
        </member>
        <member name="M:Apworks.Config.HandlerElementCollection.IsElementName(System.String)">
            <summary>
            Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement"/> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="elementName">The name of the element to verify.</param>
            <returns>
            <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.HandlerElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for the specified configuration element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.HandlerElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Apworks.Config.HandlerElement"/>.
            </summary>
            <returns>
            A new <see cref="T:Apworks.Config.HandlerElement"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.HandlerElementCollection.Add(Apworks.Config.HandlerElement)">
            <summary>
            Adds the specified <see cref="T:Apworks.Config.HandlerElement"/> to the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="handler">The <see cref="T:Apworks.Config.HandlerElement"/> to add.</param>
        </member>
        <member name="M:Apworks.Config.HandlerElementCollection.Remove(Apworks.Config.HandlerElement)">
            <summary>
            Removes the specified <see cref="T:Apworks.Config.HandlerElement"/> from the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="handler">The <see cref="T:Apworks.Config.HandlerElement"/> to remove.</param>
        </member>
        <member name="M:Apworks.Config.HandlerElementCollection.GetItemAt(System.Int32)">
            <summary>
            Gets the <see cref="T:Apworks.Config.HandlerElement"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Apworks.Config.HandlerElement"/> to retrieve.</param>
        </member>
        <member name="M:Apworks.Config.HandlerElementCollection.GetItemByKey(System.String)">
            <summary>
            Gets the <see cref="T:Apworks.Config.HandlerElement"/> with the specified key.
            </summary>
            <param name="name">The key of the <see cref="T:Apworks.Config.HandlerElement"/> to retrieve.</param>
        </member>
        <member name="M:Apworks.Config.HandlerElementCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.HandlerElementCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        </member>
        <member name="P:Apworks.Config.HandlerElementCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements
            </summary>
        </member>
        <member name="P:Apworks.Config.HandlerElementCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Apworks.Config.HandlerElement"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Apworks.Config.HandlerElement"/> to retrieve.</param>
        </member>
        <member name="P:Apworks.Config.HandlerElementCollection.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Apworks.Config.HandlerElement"/> with the specified key.
            </summary>
            <param name="name">The key of the <see cref="T:Apworks.Config.HandlerElement"/> to retrieve.</param>
        </member>
        <member name="T:Apworks.Config.ExceptionHandlerElement">
            <summary>
            Represents the configuration for exception handlers.
            </summary>
        </member>
        <member name="F:Apworks.Config.ExceptionHandlerElement.TypePropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.ExceptionHandlerElement.Type"/> property.
            </summary>
        </member>
        <member name="M:Apworks.Config.ExceptionHandlerElement.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.ExceptionHandlerElement.Type">
            <summary>
            Gets or sets the type of the exception handler.
            </summary>
        </member>
        <member name="T:Apworks.Config.ExceptionHandlerElementCollection">
            <summary>
            Represents the configuration collection which contains a set of configuration for the exception handlers.
            </summary>
        </member>
        <member name="F:Apworks.Config.ExceptionHandlerElementCollection.ExceptionHandlerElementPropertyName">
            <summary>
            The XML name of the individual <see cref="T:Apworks.Config.ExceptionHandlerElement"/> instances in this collection.
            </summary>
        </member>
        <member name="M:Apworks.Config.ExceptionHandlerElementCollection.IsElementName(System.String)">
            <summary>
            Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement"/> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="elementName">The name of the element to verify.</param>
            <returns>
            <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.ExceptionHandlerElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for the specified configuration element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.ExceptionHandlerElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Apworks.Config.ExceptionHandlerElement"/>.
            </summary>
            <returns>
            A new <see cref="T:Apworks.Config.ExceptionHandlerElement"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.ExceptionHandlerElementCollection.Add(Apworks.Config.ExceptionHandlerElement)">
            <summary>
            Adds the specified <see cref="T:Apworks.Config.ExceptionHandlerElement"/> to the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="handler">The <see cref="T:Apworks.Config.ExceptionHandlerElement"/> to add.</param>
        </member>
        <member name="M:Apworks.Config.ExceptionHandlerElementCollection.Remove(Apworks.Config.ExceptionHandlerElement)">
            <summary>
            Removes the specified <see cref="T:Apworks.Config.ExceptionHandlerElement"/> from the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="handler">The <see cref="T:Apworks.Config.ExceptionHandlerElement"/> to remove.</param>
        </member>
        <member name="M:Apworks.Config.ExceptionHandlerElementCollection.GetItemAt(System.Int32)">
            <summary>
            Gets the <see cref="T:Apworks.Config.ExceptionHandlerElement"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Apworks.Config.ExceptionHandlerElement"/> to retrieve.</param>
        </member>
        <member name="M:Apworks.Config.ExceptionHandlerElementCollection.GetItemByKey(System.String)">
            <summary>
            Gets the <see cref="T:Apworks.Config.ExceptionHandlerElement"/> with the specified key.
            </summary>
            <param name="type">The key of the <see cref="T:Apworks.Config.ExceptionHandlerElement"/> to retrieve.</param>
        </member>
        <member name="M:Apworks.Config.ExceptionHandlerElementCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.ExceptionHandlerElementCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        </member>
        <member name="P:Apworks.Config.ExceptionHandlerElementCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements
            </summary>
        </member>
        <member name="P:Apworks.Config.ExceptionHandlerElementCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Apworks.Config.ExceptionHandlerElement"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Apworks.Config.ExceptionHandlerElement"/> to retrieve.</param>
        </member>
        <member name="P:Apworks.Config.ExceptionHandlerElementCollection.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Apworks.Config.ExceptionHandlerElement"/> with the specified key.
            </summary>
            <param name="type">The key of the <see cref="T:Apworks.Config.ExceptionHandlerElement"/> to retrieve.</param>
        </member>
        <member name="T:Apworks.Config.ExceptionElement">
            <summary>
            Represents the configuration for exception handling.
            </summary>
        </member>
        <member name="F:Apworks.Config.ExceptionElement.TypePropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.ExceptionElement.Type"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.ExceptionElement.BehaviorPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.ExceptionElement.Behavior"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.ExceptionElement.HandlersPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.ExceptionElement.Handlers"/> property.
            </summary>
        </member>
        <member name="M:Apworks.Config.ExceptionElement.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.ExceptionElement.Type">
            <summary>
            Gets or sets the type of the exception.
            </summary>
        </member>
        <member name="P:Apworks.Config.ExceptionElement.Behavior">
            <summary>
            Gets or sets the behavior of the exception handling.
            </summary>
        </member>
        <member name="P:Apworks.Config.ExceptionElement.Handlers">
            <summary>
            Gets or sets the Handlers.
            </summary>
        </member>
        <member name="T:Apworks.Config.ExceptionElementCollection">
            <summary>
            Represents the configuration collection which contains a set of configuration for exception handling.
            </summary>
        </member>
        <member name="F:Apworks.Config.ExceptionElementCollection.ExceptionElementPropertyName">
            <summary>
            The XML name of the individual <see cref="T:Apworks.Config.ExceptionElement"/> instances in this collection.
            </summary>
        </member>
        <member name="M:Apworks.Config.ExceptionElementCollection.IsElementName(System.String)">
            <summary>
            Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement"/> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="elementName">The name of the element to verify.</param>
            <returns>
            <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.ExceptionElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for the specified configuration element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.ExceptionElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Apworks.Config.ExceptionElement"/>.
            </summary>
            <returns>
            A new <see cref="T:Apworks.Config.ExceptionElement"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.ExceptionElementCollection.Add(Apworks.Config.ExceptionElement)">
            <summary>
            Adds the specified <see cref="T:Apworks.Config.ExceptionElement"/> to the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="exception">The <see cref="T:Apworks.Config.ExceptionElement"/> to add.</param>
        </member>
        <member name="M:Apworks.Config.ExceptionElementCollection.Remove(Apworks.Config.ExceptionElement)">
            <summary>
            Removes the specified <see cref="T:Apworks.Config.ExceptionElement"/> from the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="exception">The <see cref="T:Apworks.Config.ExceptionElement"/> to remove.</param>
        </member>
        <member name="M:Apworks.Config.ExceptionElementCollection.GetItemAt(System.Int32)">
            <summary>
            Gets the <see cref="T:Apworks.Config.ExceptionElement"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Apworks.Config.ExceptionElement"/> to retrieve.</param>
        </member>
        <member name="M:Apworks.Config.ExceptionElementCollection.GetItemByKey(System.String)">
            <summary>
            Gets the <see cref="T:Apworks.Config.ExceptionElement"/> with the specified key.
            </summary>
            <param name="type">The key of the <see cref="T:Apworks.Config.ExceptionElement"/> to retrieve.</param>
        </member>
        <member name="M:Apworks.Config.ExceptionElementCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.ExceptionElementCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        </member>
        <member name="P:Apworks.Config.ExceptionElementCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements
            </summary>
        </member>
        <member name="P:Apworks.Config.ExceptionElementCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Apworks.Config.ExceptionElement"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Apworks.Config.ExceptionElement"/> to retrieve.</param>
        </member>
        <member name="P:Apworks.Config.ExceptionElementCollection.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Apworks.Config.ExceptionElement"/> with the specified key.
            </summary>
            <param name="type">The key of the <see cref="T:Apworks.Config.ExceptionElement"/> to retrieve.</param>
        </member>
        <member name="T:Apworks.Config.InterceptorRefElement">
            <summary>
            Represents the configuration for interceptor ref.
            </summary>
        </member>
        <member name="F:Apworks.Config.InterceptorRefElement.NamePropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.InterceptorRefElement.Name"/> property.
            </summary>
        </member>
        <member name="M:Apworks.Config.InterceptorRefElement.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.InterceptorRefElement.Name">
            <summary>
            Gets or sets the Name.
            </summary>
        </member>
        <member name="T:Apworks.Config.InterceptorElement">
            <summary>
            The InterceptorElement Configuration Element.
            </summary>
        </member>
        <member name="F:Apworks.Config.InterceptorElement.NamePropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.InterceptorElement.Name"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.InterceptorElement.TypePropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.InterceptorElement.Type"/> property.
            </summary>
        </member>
        <member name="M:Apworks.Config.InterceptorElement.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.InterceptorElement.Name">
            <summary>
            Gets or sets the Name.
            </summary>
        </member>
        <member name="P:Apworks.Config.InterceptorElement.Type">
            <summary>
            Gets or sets the Type.
            </summary>
        </member>
        <member name="T:Apworks.Config.InterceptorElementCollection">
            <summary>
            A collection of InterceptorElement instances.
            </summary>
        </member>
        <member name="F:Apworks.Config.InterceptorElementCollection.InterceptorElementPropertyName">
            <summary>
            The XML name of the individual <see cref="T:Apworks.Config.InterceptorElement"/> instances in this collection.
            </summary>
        </member>
        <member name="M:Apworks.Config.InterceptorElementCollection.IsElementName(System.String)">
            <summary>
            Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement"/> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="elementName">The name of the element to verify.</param>
            <returns>
            <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.InterceptorElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for the specified configuration element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.InterceptorElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Apworks.Config.InterceptorElement"/>.
            </summary>
            <returns>
            A new <see cref="T:Apworks.Config.InterceptorElement"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.InterceptorElementCollection.Add(Apworks.Config.InterceptorElement)">
            <summary>
            Adds the specified <see cref="T:Apworks.Config.InterceptorElement"/> to the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="interceptor">The <see cref="T:Apworks.Config.InterceptorElement"/> to add.</param>
        </member>
        <member name="M:Apworks.Config.InterceptorElementCollection.Remove(Apworks.Config.InterceptorElement)">
            <summary>
            Removes the specified <see cref="T:Apworks.Config.InterceptorElement"/> from the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="interceptor">The <see cref="T:Apworks.Config.InterceptorElement"/> to remove.</param>
        </member>
        <member name="M:Apworks.Config.InterceptorElementCollection.GetItemAt(System.Int32)">
            <summary>
            Gets the <see cref="T:Apworks.Config.InterceptorElement"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Apworks.Config.InterceptorElement"/> to retrieve.</param>
        </member>
        <member name="M:Apworks.Config.InterceptorElementCollection.GetItemByKey(System.String)">
            <summary>
            Gets the <see cref="T:Apworks.Config.InterceptorElement"/> with the specified key.
            </summary>
            <param name="name">The key of the <see cref="T:Apworks.Config.InterceptorElement"/> to retrieve.</param>
        </member>
        <member name="M:Apworks.Config.InterceptorElementCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.InterceptorElementCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        </member>
        <member name="P:Apworks.Config.InterceptorElementCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements
            </summary>
        </member>
        <member name="P:Apworks.Config.InterceptorElementCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Apworks.Config.InterceptorElement"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Apworks.Config.InterceptorElement"/> to retrieve.</param>
        </member>
        <member name="P:Apworks.Config.InterceptorElementCollection.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Apworks.Config.InterceptorElement"/> with the specified key.
            </summary>
            <param name="name">The key of the <see cref="T:Apworks.Config.InterceptorElement"/> to retrieve.</param>
        </member>
        <member name="T:Apworks.Config.InterceptionElement">
            <summary>
            Represents the configuration for the interception.
            </summary>
        </member>
        <member name="F:Apworks.Config.InterceptionElement.InterceptorsPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.InterceptionElement.Interceptors"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.InterceptionElement.ContractsPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.InterceptionElement.Contracts"/> property.
            </summary>
        </member>
        <member name="M:Apworks.Config.InterceptionElement.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.InterceptionElement.Interceptors">
            <summary>
            Gets or sets the Interceptors.
            </summary>
        </member>
        <member name="P:Apworks.Config.InterceptionElement.Contracts">
            <summary>
            Gets or sets the Contracts.
            </summary>
        </member>
        <member name="T:Apworks.Config.InterceptorRefElementCollection">
            <summary>
            Represents the configuration for interceptor refs.
            </summary>
        </member>
        <member name="F:Apworks.Config.InterceptorRefElementCollection.InterceptorRefElementPropertyName">
            <summary>
            The XML name of the individual <see cref="T:Apworks.Config.InterceptorRefElement"/> instances in this collection.
            </summary>
        </member>
        <member name="M:Apworks.Config.InterceptorRefElementCollection.IsElementName(System.String)">
            <summary>
            Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement"/> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="elementName">The name of the element to verify.</param>
            <returns>
            <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.InterceptorRefElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for the specified configuration element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.InterceptorRefElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Apworks.Config.InterceptorRefElement"/>.
            </summary>
            <returns>
            A new <see cref="T:Apworks.Config.InterceptorRefElement"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.InterceptorRefElementCollection.Add(Apworks.Config.InterceptorRefElement)">
            <summary>
            Adds the specified <see cref="T:Apworks.Config.InterceptorRefElement"/> to the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="interceptorRef">The <see cref="T:Apworks.Config.InterceptorRefElement"/> to add.</param>
        </member>
        <member name="M:Apworks.Config.InterceptorRefElementCollection.Remove(Apworks.Config.InterceptorRefElement)">
            <summary>
            Removes the specified <see cref="T:Apworks.Config.InterceptorRefElement"/> from the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="interceptorRef">The <see cref="T:Apworks.Config.InterceptorRefElement"/> to remove.</param>
        </member>
        <member name="M:Apworks.Config.InterceptorRefElementCollection.GetItemAt(System.Int32)">
            <summary>
            Gets the <see cref="T:Apworks.Config.InterceptorRefElement"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Apworks.Config.InterceptorRefElement"/> to retrieve.</param>
        </member>
        <member name="M:Apworks.Config.InterceptorRefElementCollection.GetItemByKey(System.String)">
            <summary>
            Gets the <see cref="T:Apworks.Config.InterceptorRefElement"/> with the specified key.
            </summary>
            <param name="name">The key of the <see cref="T:Apworks.Config.InterceptorRefElement"/> to retrieve.</param>
        </member>
        <member name="M:Apworks.Config.InterceptorRefElementCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.InterceptorRefElementCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        </member>
        <member name="P:Apworks.Config.InterceptorRefElementCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements
            </summary>
        </member>
        <member name="P:Apworks.Config.InterceptorRefElementCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Apworks.Config.InterceptorRefElement"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Apworks.Config.InterceptorRefElement"/> to retrieve.</param>
        </member>
        <member name="P:Apworks.Config.InterceptorRefElementCollection.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Apworks.Config.InterceptorRefElement"/> with the specified key.
            </summary>
            <param name="name">The key of the <see cref="T:Apworks.Config.InterceptorRefElement"/> to retrieve.</param>
        </member>
        <member name="T:Apworks.Config.InterceptMethodElement">
            <summary>
            Represents the configuration for intercept method.
            </summary>
        </member>
        <member name="F:Apworks.Config.InterceptMethodElement.SignaturePropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.InterceptMethodElement.Signature"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.InterceptMethodElement.InterceptorRefsPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.InterceptMethodElement.InterceptorRefs"/> property.
            </summary>
        </member>
        <member name="M:Apworks.Config.InterceptMethodElement.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.InterceptMethodElement.Signature">
            <summary>
            Gets or sets the Signature.
            </summary>
        </member>
        <member name="P:Apworks.Config.InterceptMethodElement.InterceptorRefs">
            <summary>
            Gets or sets the InterceptorRefs.
            </summary>
        </member>
        <member name="T:Apworks.Config.InterceptMethodElementCollection">
            <summary>
            A collection of InterceptMethodElement instances.
            </summary>
        </member>
        <member name="F:Apworks.Config.InterceptMethodElementCollection.InterceptMethodElementPropertyName">
            <summary>
            The XML name of the individual <see cref="T:Apworks.Config.InterceptMethodElement"/> instances in this collection.
            </summary>
        </member>
        <member name="M:Apworks.Config.InterceptMethodElementCollection.IsElementName(System.String)">
            <summary>
            Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement"/> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="elementName">The name of the element to verify.</param>
            <returns>
            <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.InterceptMethodElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for the specified configuration element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.InterceptMethodElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Apworks.Config.InterceptMethodElement"/>.
            </summary>
            <returns>
            A new <see cref="T:Apworks.Config.InterceptMethodElement"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.InterceptMethodElementCollection.Add(Apworks.Config.InterceptMethodElement)">
            <summary>
            Adds the specified <see cref="T:Apworks.Config.InterceptMethodElement"/> to the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="method">The <see cref="T:Apworks.Config.InterceptMethodElement"/> to add.</param>
        </member>
        <member name="M:Apworks.Config.InterceptMethodElementCollection.Remove(Apworks.Config.InterceptMethodElement)">
            <summary>
            Removes the specified <see cref="T:Apworks.Config.InterceptMethodElement"/> from the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="method">The <see cref="T:Apworks.Config.InterceptMethodElement"/> to remove.</param>
        </member>
        <member name="M:Apworks.Config.InterceptMethodElementCollection.GetItemAt(System.Int32)">
            <summary>
            Gets the <see cref="T:Apworks.Config.InterceptMethodElement"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Apworks.Config.InterceptMethodElement"/> to retrieve.</param>
        </member>
        <member name="M:Apworks.Config.InterceptMethodElementCollection.GetItemByKey(System.String)">
            <summary>
            Gets the <see cref="T:Apworks.Config.InterceptMethodElement"/> with the specified key.
            </summary>
            <param name="signature">The key of the <see cref="T:Apworks.Config.InterceptMethodElement"/> to retrieve.</param>
        </member>
        <member name="M:Apworks.Config.InterceptMethodElementCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.InterceptMethodElementCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        </member>
        <member name="P:Apworks.Config.InterceptMethodElementCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements
            </summary>
        </member>
        <member name="P:Apworks.Config.InterceptMethodElementCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Apworks.Config.InterceptMethodElement"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Apworks.Config.InterceptMethodElement"/> to retrieve.</param>
        </member>
        <member name="P:Apworks.Config.InterceptMethodElementCollection.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Apworks.Config.InterceptMethodElement"/> with the specified key.
            </summary>
            <param name="signature">The key of the <see cref="T:Apworks.Config.InterceptMethodElement"/> to retrieve.</param>
        </member>
        <member name="T:Apworks.Config.InterceptContractElement">
            <summary>
            Represents the configuration for intercept contract.
            </summary>
        </member>
        <member name="F:Apworks.Config.InterceptContractElement.TypePropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.InterceptContractElement.Type"/> property.
            </summary>
        </member>
        <member name="F:Apworks.Config.InterceptContractElement.MethodsPropertyName">
            <summary>
            The XML name of the <see cref="P:Apworks.Config.InterceptContractElement.Methods"/> property.
            </summary>
        </member>
        <member name="M:Apworks.Config.InterceptContractElement.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.InterceptContractElement.Type">
            <summary>
            Gets or sets the Type.
            </summary>
        </member>
        <member name="P:Apworks.Config.InterceptContractElement.Methods">
            <summary>
            Gets or sets the Methods.
            </summary>
        </member>
        <member name="T:Apworks.Config.InterceptContractElementCollection">
            <summary>
            Represents the configuration for intercept contracts.
            </summary>
        </member>
        <member name="F:Apworks.Config.InterceptContractElementCollection.InterceptContractElementPropertyName">
            <summary>
            The XML name of the individual <see cref="T:Apworks.Config.InterceptContractElement"/> instances in this collection.
            </summary>
        </member>
        <member name="M:Apworks.Config.InterceptContractElementCollection.IsElementName(System.String)">
            <summary>
            Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement"/> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="elementName">The name of the element to verify.</param>
            <returns>
            <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.InterceptContractElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for the specified configuration element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.InterceptContractElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Apworks.Config.InterceptContractElement"/>.
            </summary>
            <returns>
            A new <see cref="T:Apworks.Config.InterceptContractElement"/>.
            </returns>
        </member>
        <member name="M:Apworks.Config.InterceptContractElementCollection.Add(Apworks.Config.InterceptContractElement)">
            <summary>
            Adds the specified <see cref="T:Apworks.Config.InterceptContractElement"/> to the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="contract">The <see cref="T:Apworks.Config.InterceptContractElement"/> to add.</param>
        </member>
        <member name="M:Apworks.Config.InterceptContractElementCollection.Remove(Apworks.Config.InterceptContractElement)">
            <summary>
            Removes the specified <see cref="T:Apworks.Config.InterceptContractElement"/> from the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="contract">The <see cref="T:Apworks.Config.InterceptContractElement"/> to remove.</param>
        </member>
        <member name="M:Apworks.Config.InterceptContractElementCollection.GetItemAt(System.Int32)">
            <summary>
            Gets the <see cref="T:Apworks.Config.InterceptContractElement"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Apworks.Config.InterceptContractElement"/> to retrieve.</param>
        </member>
        <member name="M:Apworks.Config.InterceptContractElementCollection.GetItemByKey(System.String)">
            <summary>
            Gets the <see cref="T:Apworks.Config.InterceptContractElement"/> with the specified key.
            </summary>
            <param name="type">The key of the <see cref="T:Apworks.Config.InterceptContractElement"/> to retrieve.</param>
        </member>
        <member name="M:Apworks.Config.InterceptContractElementCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="P:Apworks.Config.InterceptContractElementCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        </member>
        <member name="P:Apworks.Config.InterceptContractElementCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements
            </summary>
        </member>
        <member name="P:Apworks.Config.InterceptContractElementCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Apworks.Config.InterceptContractElement"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Apworks.Config.InterceptContractElement"/> to retrieve.</param>
        </member>
        <member name="P:Apworks.Config.InterceptContractElementCollection.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Apworks.Config.InterceptContractElement"/> with the specified key.
            </summary>
            <param name="type">The key of the <see cref="T:Apworks.Config.InterceptContractElement"/> to retrieve.</param>
        </member>
        <member name="T:Apworks.Config.HandlerKind">
            <summary>
            HandlerKind.
            </summary>
        </member>
        <member name="F:Apworks.Config.HandlerKind.Command">
            <summary>
            Command.
            </summary>
        </member>
        <member name="F:Apworks.Config.HandlerKind.Event">
            <summary>
            Event.
            </summary>
        </member>
        <member name="T:Apworks.Config.HandlerSourceType">
            <summary>
            HandlerSourceType.
            </summary>
        </member>
        <member name="F:Apworks.Config.HandlerSourceType.Type">
            <summary>
            Type.
            </summary>
        </member>
        <member name="F:Apworks.Config.HandlerSourceType.Assembly">
            <summary>
            Assembly.
            </summary>
        </member>
        <member name="T:Apworks.Config.ExceptionHandlingBehavior">
            <summary>
            ExceptionHandlingBehavior.
            </summary>
        </member>
        <member name="F:Apworks.Config.ExceptionHandlingBehavior.Direct">
            <summary>
            Direct.
            </summary>
        </member>
        <member name="F:Apworks.Config.ExceptionHandlingBehavior.Forward">
            <summary>
            Forward.
            </summary>
        </member>
        <member name="T:Apworks.Config.Fluent.IApplicationConfigurator">
            <summary>
            Represents that the implemented classes are application configurators.
            </summary>
        </member>
        <member name="T:Apworks.Config.Fluent.IConfigSourceConfigurator">
            <summary>
            Represents that the implemented classes are configuration configurators that
            uses a <see cref="T:Apworks.Config.IConfigSource"/> instance as the container.
            </summary>
        </member>
        <member name="T:Apworks.Config.Fluent.IConfigurator`1">
            <summary>
            Represents that the implemented classes are configuration configurators.
            </summary>
            <typeparam name="TContainer">The type of the object container.</typeparam>
        </member>
        <member name="M:Apworks.Config.Fluent.IConfigurator`1.Configure">
            <summary>
            Configures the container.
            </summary>
            <returns>The configured container.</returns>
        </member>
        <member name="T:Apworks.Config.Fluent.ApplicationConfigurator">
            <summary>
            Represents the application configurator.
            </summary>
        </member>
        <member name="T:Apworks.Config.Fluent.TypeSpecifiedConfigSourceConfigurator">
            <summary>
            Represents the base class for the configuration configurators which configures
            the container with a specific type.
            </summary>
        </member>
        <member name="T:Apworks.Config.Fluent.ConfigSourceConfigurator">
            <summary>
            Represents the base class for all configuration configurators that
            uses a <see cref="T:Apworks.Config.IConfigSource"/> instance as the container.
            </summary>
        </member>
        <member name="T:Apworks.Config.Fluent.Configurator`1">
            <summary>
            Represents the base class for all the configuration configurators.
            </summary>
            <typeparam name="TContainer">The type of the object container.</typeparam>
        </member>
        <member name="M:Apworks.Config.Fluent.Configurator`1.#ctor(Apworks.Config.Fluent.IConfigurator{`0})">
            <summary>
            Initializes a new instance of <c>Configurator{TContainer}</c> class.
            </summary>
            <param name="context">The <see cref="T:Apworks.Config.Fluent.IConfigurator`1"/> instance.</param>
            <remarks>The <paramref name="context"/> parameter specifies the configuration context
            which was provided by the previous configuration step and will be configured in the
            current step.</remarks>
        </member>
        <member name="M:Apworks.Config.Fluent.Configurator`1.DoConfigure(`0)">
            <summary>
            Configures the container.
            </summary>
            <param name="container">The object container to be configured.</param>
            <returns>The configured container.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Configurator`1.Configure">
            <summary>
            Configures the container.
            </summary>
            <returns>The configured container.</returns>
        </member>
        <member name="P:Apworks.Config.Fluent.Configurator`1.Context">
            <summary>
            Gets the configuration context instance.
            </summary>
        </member>
        <member name="M:Apworks.Config.Fluent.ConfigSourceConfigurator.#ctor(Apworks.Config.Fluent.IConfigSourceConfigurator)">
            <summary>
            Initializes a new instance of the <c>ConfigSourceConfigurator</c> class.
            </summary>
            <param name="context">The configuration context.</param>
        </member>
        <member name="M:Apworks.Config.Fluent.TypeSpecifiedConfigSourceConfigurator.#ctor(Apworks.Config.Fluent.IConfigSourceConfigurator,System.Type)">
            <summary>
            Initializes a new instance of <c>TypeSpecifiedConfigSourceConfigurator</c> class.
            </summary>
            <param name="context">The configuration context.</param>
            <param name="type">The type that is needed by the configuration.</param>
        </member>
        <member name="P:Apworks.Config.Fluent.TypeSpecifiedConfigSourceConfigurator.Type">
            <summary>
            Gets the type that is needed by the configuration.
            </summary>
        </member>
        <member name="M:Apworks.Config.Fluent.ApplicationConfigurator.#ctor(Apworks.Config.Fluent.IConfigSourceConfigurator,System.Type)">
            <summary>
            Initializes a new instance of <c>ApplicationConfigurator</c> class.
            </summary>
            <param name="context">The configuration context.</param>
            <param name="appType">The type of the application.</param>
        </member>
        <member name="M:Apworks.Config.Fluent.ApplicationConfigurator.DoConfigure(Apworks.Config.RegularConfigSource)">
            <summary>
            Configures the container.
            </summary>
            <param name="container">The configuration container.</param>
            <returns>The configured container.</returns>
        </member>
        <member name="T:Apworks.Config.Fluent.IApworksConfigurator">
            <summary>
            Represents that the implemented classes are Apworks configurators which configures
            the Apworks framework.
            </summary>
        </member>
        <member name="T:Apworks.Config.Fluent.ApworksConfigurator">
            <summary>
            Represents the Apworks configurator.
            </summary>
        </member>
        <member name="M:Apworks.Config.Fluent.ApworksConfigurator.#ctor">
            <summary>
            Initializes a new instance of <c>ApworksConfigurator</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Config.Fluent.ApworksConfigurator.Configure">
            <summary>
            Configures the container.
            </summary>
            <returns>The configured container.</returns>
        </member>
        <member name="T:Apworks.Config.Fluent.IExceptionHandlerConfigurator">
            <summary>
            Represents that the implemented classes are exception handler configurators.
            </summary>
        </member>
        <member name="T:Apworks.Config.Fluent.ExceptionHandlerConfigurator">
            <summary>
            Represents the exception handler configurator.
            </summary>
        </member>
        <member name="M:Apworks.Config.Fluent.ExceptionHandlerConfigurator.#ctor(Apworks.Config.Fluent.IConfigSourceConfigurator,System.Type,System.Type,Apworks.Config.ExceptionHandlingBehavior)">
            <summary>
            Initializes a new instance of <c>ExceptionHandlerConfigurator</c> class.
            </summary>
            <param name="context">The configuration context.</param>
            <param name="exceptionType">The type of the exception to be handled.</param>
            <param name="exceptionHandlerType">The type of the exception handler.</param>
            <param name="behavior">The exception handling behavior.</param>
        </member>
        <member name="M:Apworks.Config.Fluent.ExceptionHandlerConfigurator.#ctor(Apworks.Config.Fluent.IConfigSourceConfigurator,System.Type,System.Type)">
            <summary>
            Initializes a new instance of <c>ExceptionHandlerConfigurator</c> class.
            </summary>
            <param name="context">The configuration context.</param>
            <param name="exceptionType">The type of the exception to be handled.</param>
            <param name="exceptionHandlerType">The type of the exception handler.</param>
        </member>
        <member name="M:Apworks.Config.Fluent.ExceptionHandlerConfigurator.DoConfigure(Apworks.Config.RegularConfigSource)">
            <summary>
            Configures the container.
            </summary>
            <param name="container">The configuration container.</param>
            <returns>The configured container.</returns>
        </member>
        <member name="T:Apworks.Config.Fluent.Extensions">
            <summary>
            Represents the Extension Method provider which provides the routines for 
            the Fluent API of the Apworks framework configuration.
            </summary>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.WithApplication``1(Apworks.Config.Fluent.IApworksConfigurator)">
            <summary>
            Configures the Apworks framework by using the specified application object.
            </summary>
            <typeparam name="TApplication">The type of the application object.</typeparam>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IApworksConfigurator"/> instance to be extended.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IApplicationConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.WithDefaultApplication(Apworks.Config.Fluent.IApworksConfigurator)">
            <summary>
            Configures the Apworks framework by using the default application instance.
            </summary>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IApworksConfigurator"/> instance to be extended.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IApplicationConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.WithDefaultSettings(Apworks.Config.Fluent.IApworksConfigurator)">
            <summary>
            Configures the Apworks framework by using the default settings: the default application instance, the default
            identity generator and the default sequence generator.
            </summary>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IApworksConfigurator"/> instance to be extended.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.ISequenceGeneratorConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.WithIdentityGenerator``1(Apworks.Config.Fluent.IApplicationConfigurator)">
            <summary>
            Configures the Apworks framework by using the specified identity generator.
            </summary>
            <typeparam name="TIdentityGenerator">The type of the identity generator to be used by the framework.</typeparam>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IApplicationConfigurator"/> instance to be extended.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IIdentityGeneratorConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.WithDefaultIdentityGenerator(Apworks.Config.Fluent.IApplicationConfigurator)">
            <summary>
            Configures the Apworks framework by using a default identity generator.
            </summary>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IApplicationConfigurator"/> instance to be extended.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IIdentityGeneratorConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.WithSequenceGenerator``1(Apworks.Config.Fluent.IIdentityGeneratorConfigurator)">
            <summary>
            Configures the Apworks framework by using the specified sequence generator.
            </summary>
            <typeparam name="TSequenceGenerator">The type of the sequence generator to be used by the framework.</typeparam>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IIdentityGeneratorConfigurator"/> instance to be extended.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.ISequenceGeneratorConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.WithDefaultSequenceGenerator(Apworks.Config.Fluent.IIdentityGeneratorConfigurator)">
            <summary>
            Configures the Apworks framework by using a default sequence generator.
            </summary>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IIdentityGeneratorConfigurator"/> instance to be extended.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.ISequenceGeneratorConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.AddMessageHandler(Apworks.Config.Fluent.ISequenceGeneratorConfigurator,Apworks.Config.HandlerKind,Apworks.Config.HandlerSourceType,System.String,System.String)">
            <summary>
            Adds a message handler to the Apworks framework. (This operation only applies on CQRS architecture).
            </summary>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.ISequenceGeneratorConfigurator"/> instance to be extended.</param>
            <param name="handlerKind">The <see cref="T:Apworks.Config.HandlerKind"/> which specifies the kind of the handler, can either be a Command or an Event.</param>
            <param name="sourceType">The <see cref="T:Apworks.Config.HandlerSourceType"/> which specifies the type of the source, can either be an Assembly or a Type.</param>
            <param name="source">The source name, if <paramref name="sourceType"/> is Assembly, the source name should be the assembly full name, if
            <paramref name="sourceType"/> is Type, the source name should be the assembly qualified name of the type.</param>
            <param name="name">The name of the message handler.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IHandlerConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.AddExceptionHandler``2(Apworks.Config.Fluent.ISequenceGeneratorConfigurator,Apworks.Config.ExceptionHandlingBehavior)">
            <summary>
            Adds an exception handler to the Apworks framework.
            </summary>
            <typeparam name="TException">The type of the exception to be handled.</typeparam>
            <typeparam name="TExceptionHandler">The type of the exception handler.</typeparam>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.ISequenceGeneratorConfigurator"/> to be extended.</param>
            <param name="behavior">The exception handling behavior.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IExceptionHandlerConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.RegisterInterception``2(Apworks.Config.Fluent.ISequenceGeneratorConfigurator,System.Reflection.MethodInfo)">
            <summary>
            Registers an interceptor on the given method of a given type.
            </summary>
            <typeparam name="TInterceptor">The type of the interceptor to be registered.</typeparam>
            <typeparam name="TContract">The type which contains the method to be intercepted.</typeparam>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.ISequenceGeneratorConfigurator"/> instance to be extended.</param>
            <param name="interceptMethod">The method to be intercepted.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IInterceptionConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.RegisterInterception``2(Apworks.Config.Fluent.ISequenceGeneratorConfigurator,System.String)">
            <summary>
            Registers an interceptor on the given method of a given type.
            </summary>
            <typeparam name="TInterceptor">The type of the interceptor to be registered.</typeparam>
            <typeparam name="TContract">The type which contains the method to be intercepted.</typeparam>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.ISequenceGeneratorConfigurator"/> instance to be extended.</param>
            <param name="interceptMethod">The method to be intercepted.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IInterceptionConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.UsingObjectContainer``1(Apworks.Config.Fluent.ISequenceGeneratorConfigurator,System.Boolean,System.String)">
            <summary>
            Configures the Apworks framework by using the specified object container.
            </summary>
            <typeparam name="TObjectContainer">The type of the object container to be used by the framework.</typeparam>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.ISequenceGeneratorConfigurator"/> instance to be extended.</param>
            <param name="initFromConfigFile">The <see cref="T:System.Boolean"/> value which indicates whether the container configuration should be read from the config file.</param>
            <param name="sectionName">The name of the section in the config file. This value must be specified when the <paramref name="initFromConfigFile"/> parameter is set to true.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IObjectContainerConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.AddMessageHandler(Apworks.Config.Fluent.IHandlerConfigurator,Apworks.Config.HandlerKind,Apworks.Config.HandlerSourceType,System.String,System.String)">
            <summary>
            Adds a message handler to the Apworks framework. (This operation only applies on CQRS architecture).
            </summary>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IHandlerConfigurator"/> instance to be extended.</param>
            <param name="handlerKind">The <see cref="T:Apworks.Config.HandlerKind"/> which specifies the kind of the handler, can either be a Command or an Event.</param>
            <param name="sourceType">The <see cref="T:Apworks.Config.HandlerSourceType"/> which specifies the type of the source, can either be an Assembly or a Type.</param>
            <param name="source">The source name, if <paramref name="sourceType"/> is Assembly, the source name should be the assembly full name, if
            <paramref name="sourceType"/> is Type, the source name should be the assembly qualified name of the type.</param>
            <param name="name">The name of the message handler.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IHandlerConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.AddExceptionHandler``2(Apworks.Config.Fluent.IHandlerConfigurator,Apworks.Config.ExceptionHandlingBehavior)">
            <summary>
            Adds an exception handler to the Apworks framework.
            </summary>
            <typeparam name="TException">The type of the exception to be handled.</typeparam>
            <typeparam name="TExceptionHandler">The type of the exception handler.</typeparam>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IHandlerConfigurator"/> to be extended.</param>
            <param name="behavior">The exception handling behavior.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IExceptionHandlerConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.RegisterInterception``2(Apworks.Config.Fluent.IHandlerConfigurator,System.Reflection.MethodInfo)">
            <summary>
            Registers an interceptor on the given method of a given type.
            </summary>
            <typeparam name="TInterceptor">The type of the interceptor to be registered.</typeparam>
            <typeparam name="TContract">The type which contains the method to be intercepted.</typeparam>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IHandlerConfigurator"/> instance to be extended.</param>
            <param name="interceptMethod">The method to be intercepted.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IInterceptionConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.RegisterInterception``2(Apworks.Config.Fluent.IHandlerConfigurator,System.String)">
            <summary>
            Registers an interceptor on the given method of a given type.
            </summary>
            <typeparam name="TInterceptor">The type of the interceptor to be registered.</typeparam>
            <typeparam name="TContract">The type which contains the method to be intercepted.</typeparam>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IHandlerConfigurator"/> instance to be extended.</param>
            <param name="interceptMethod">The method to be intercepted.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IInterceptionConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.UsingObjectContainer``1(Apworks.Config.Fluent.IHandlerConfigurator,System.Boolean,System.String)">
            <summary>
            Configures the Apworks framework by using the specified object container.
            </summary>
            <typeparam name="TObjectContainer">The type of the object container to be used by the framework.</typeparam>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IHandlerConfigurator"/> instance to be extended.</param>
            <param name="initFromConfigFile">The <see cref="T:System.Boolean"/> value which indicates whether the container configuration should be read from the config file.</param>
            <param name="sectionName">The name of the section in the config file. This value must be specified when the <paramref name="initFromConfigFile"/> parameter is set to true.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IObjectContainerConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.AddExceptionHandler``2(Apworks.Config.Fluent.IExceptionHandlerConfigurator,Apworks.Config.ExceptionHandlingBehavior)">
            <summary>
            Adds an exception handler to the Apworks framework.
            </summary>
            <typeparam name="TException">The type of the exception to be handled.</typeparam>
            <typeparam name="TExceptionHandler">The type of the exception handler.</typeparam>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IExceptionHandlerConfigurator"/> to be extended.</param>
            <param name="behavior">The exception handling behavior.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IExceptionHandlerConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.RegisterInterception``2(Apworks.Config.Fluent.IExceptionHandlerConfigurator,System.Reflection.MethodInfo)">
            <summary>
            Registers an interceptor on the given method of a given type.
            </summary>
            <typeparam name="TInterceptor">The type of the interceptor to be registered.</typeparam>
            <typeparam name="TContract">The type which contains the method to be intercepted.</typeparam>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IExceptionHandlerConfigurator"/> instance to be extended.</param>
            <param name="interceptMethod">The method to be intercepted.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IInterceptionConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.RegisterInterception``2(Apworks.Config.Fluent.IExceptionHandlerConfigurator,System.String)">
            <summary>
            Registers an interceptor on the given method of a given type.
            </summary>
            <typeparam name="TInterceptor">The type of the interceptor to be registered.</typeparam>
            <typeparam name="TContract">The type which contains the method to be intercepted.</typeparam>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IExceptionHandlerConfigurator"/> instance to be extended.</param>
            <param name="interceptMethod">The method to be intercepted.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IInterceptionConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.UsingObjectContainer``1(Apworks.Config.Fluent.IExceptionHandlerConfigurator,System.Boolean,System.String)">
            <summary>
            Configures the Apworks framework by using the specified object container.
            </summary>
            <typeparam name="TObjectContainer">The type of the object container to be used by the framework.</typeparam>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IExceptionHandlerConfigurator"/> instance to be extended.</param>
            <param name="initFromConfigFile">The <see cref="T:System.Boolean"/> value which indicates whether the container configuration should be read from the config file.</param>
            <param name="sectionName">The name of the section in the config file. This value must be specified when the <paramref name="initFromConfigFile"/> parameter is set to true.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IObjectContainerConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.RegisterInterception``2(Apworks.Config.Fluent.IInterceptionConfigurator,System.Reflection.MethodInfo)">
            <summary>
            Registers an interceptor on the given method of a given type.
            </summary>
            <typeparam name="TInterceptor">The type of the interceptor to be registered.</typeparam>
            <typeparam name="TContract">The type which contains the method to be intercepted.</typeparam>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IInterceptionConfigurator"/> instance to be extended.</param>
            <param name="interceptMethod">The method to be intercepted.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IInterceptionConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.RegisterInterception``2(Apworks.Config.Fluent.IInterceptionConfigurator,System.String)">
            <summary>
            Registers an interceptor on the given method of a given type.
            </summary>
            <typeparam name="TInterceptor">The type of the interceptor to be registered.</typeparam>
            <typeparam name="TContract">The type which contains the method to be intercepted.</typeparam>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IInterceptionConfigurator"/> instance to be extended.</param>
            <param name="interceptMethod">The method to be intercepted.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IInterceptionConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.UsingObjectContainer``1(Apworks.Config.Fluent.IInterceptionConfigurator,System.Boolean,System.String)">
            <summary>
            Configures the Apworks framework by using the specified object container.
            </summary>
            <typeparam name="TObjectContainer">The type of the object container to be used by the framework.</typeparam>
            <param name="configurator">The <see cref="T:Apworks.Config.Fluent.IInterceptionConfigurator"/> instance to be extended.</param>
            <param name="initFromConfigFile">The <see cref="T:System.Boolean"/> value which indicates whether the container configuration should be read from the config file.</param>
            <param name="sectionName">The name of the section in the config file. This value must be specified when the <paramref name="initFromConfigFile"/> parameter is set to true.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IObjectContainerConfigurator"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.Create(Apworks.Config.Fluent.IObjectContainerConfigurator)">
            <summary>
            Creates the <see cref="T:Apworks.Application.IApp"/> instance.
            </summary>
            <param name="configurator">The instance of <see cref="T:Apworks.Config.Fluent.IObjectContainerConfigurator"/> to be extended.</param>
            <returns>The <see cref="T:Apworks.Application.IApp"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.Create(Apworks.Config.Fluent.IObjectContainerConfigurator,System.EventHandler{Apworks.Application.AppInitEventArgs})">
            <summary>
            Creates the <see cref="T:Apworks.Application.IApp"/> instance.
            </summary>
            <param name="configurator">The instance of <see cref="T:Apworks.Config.Fluent.IObjectContainerConfigurator"/> to be extended.</param>
            <param name="initializer">The application initializer.</param>
            <returns>The <see cref="T:Apworks.Application.IApp"/> instance.</returns>
        </member>
        <member name="M:Apworks.Config.Fluent.Extensions.ConfigureApworks(Apworks.Application.AppRuntime)">
            <summary>
            Configures the Apworks framework.
            </summary>
            <param name="appRuntime">The instance of <see cref="T:Apworks.Application.AppRuntime"/> to be extended.</param>
            <returns>The <see cref="T:Apworks.Config.Fluent.IApworksConfigurator"/> instance that holds the configurator for Apworks framework.</returns>
        </member>
        <member name="T:Apworks.Config.Fluent.IHandlerConfigurator">
            <summary>
            Represents that the implemented classes are message handler configurators.
            </summary>
        </member>
        <member name="T:Apworks.Config.Fluent.HandlerConfigurator">
            <summary>
            Represents the message handler configurator.
            </summary>
        </member>
        <member name="M:Apworks.Config.Fluent.HandlerConfigurator.#ctor(Apworks.Config.Fluent.IConfigSourceConfigurator,System.String,Apworks.Config.HandlerKind,Apworks.Config.HandlerSourceType,System.String)">
            <summary>
            Initializes a new instance of <c>HandlerConfigurator</c> class.
            </summary>
            <param name="context">The configuration context.</param>
            <param name="name">The name of the message handler.</param>
            <param name="handlerKind">The <see cref="T:Apworks.Config.HandlerKind"/> which specifies the kind of the handler, can either be a Command or an Event.</param>
            <param name="sourceType">The <see cref="T:Apworks.Config.HandlerSourceType"/> which specifies the type of the source, can either be an Assembly or a Type.</param>
            <param name="source">The source name, if <paramref name="sourceType"/> is Assembly, the source name should be the assembly full name, if
            <paramref name="sourceType"/> is Type, the source name should be the assembly qualified name of the type.</param>
        </member>
        <member name="M:Apworks.Config.Fluent.HandlerConfigurator.#ctor(Apworks.Config.Fluent.IConfigSourceConfigurator,Apworks.Config.HandlerKind,Apworks.Config.HandlerSourceType,System.String)">
            <summary>
            Initializes a new instance of <c>HandlerConfigurator</c> class.
            </summary>
            <param name="context">The configuration context.</param>
            <param name="handlerKind">The <see cref="T:Apworks.Config.HandlerKind"/> which specifies the kind of the handler, can either be a Command or an Event.</param>
            <param name="sourceType">The <see cref="T:Apworks.Config.HandlerSourceType"/> which specifies the type of the source, can either be an Assembly or a Type.</param>
            <param name="source">The source name, if <paramref name="sourceType"/> is Assembly, the source name should be the assembly full name, if
            <paramref name="sourceType"/> is Type, the source name should be the assembly qualified name of the type.</param>
        </member>
        <member name="M:Apworks.Config.Fluent.HandlerConfigurator.DoConfigure(Apworks.Config.RegularConfigSource)">
            <summary>
            Configures the container.
            </summary>
            <param name="container">The configuration container.</param>
            <returns>The configured container.</returns>
        </member>
        <member name="T:Apworks.Config.Fluent.IInterceptionConfigurator">
            <summary>
            Represents that the implemented classes are interception configurators.
            </summary>
        </member>
        <member name="T:Apworks.Config.Fluent.InterceptionConfigurator">
            <summary>
            Represents the interception configurator.
            </summary>
        </member>
        <member name="M:Apworks.Config.Fluent.InterceptionConfigurator.#ctor(Apworks.Config.Fluent.IConfigSourceConfigurator,System.Type,System.Type,System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of <c>InterceptionConfigurator</c> class.
            </summary>
            <param name="context">The configuration context.</param>
            <param name="interceptorType">The type of the interceptor to be registered.</param>
            <param name="contractType">The type that needs to be intercepted.</param>
            <param name="interceptMethod">The <see cref="T:System.Reflection.MethodInfo"/> instance that needs to be intercepted.</param>
        </member>
        <member name="M:Apworks.Config.Fluent.InterceptionConfigurator.#ctor(Apworks.Config.Fluent.IConfigSourceConfigurator,System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of <c>InterceptionConfigurator</c> class.
            </summary>
            <param name="context">The configuration context.</param>
            <param name="interceptorType">The type of the interceptor to be registered.</param>
            <param name="contractType">The type that needs to be intercepted.</param>
            <param name="interceptMethod">The name of the method that needs to be intercepted.</param>
        </member>
        <member name="M:Apworks.Config.Fluent.InterceptionConfigurator.DoConfigure(Apworks.Config.RegularConfigSource)">
            <summary>
            Configures the container.
            </summary>
            <param name="container">The configuration container.</param>
            <returns>The configured container.</returns>
        </member>
        <member name="T:Apworks.Config.Fluent.ISequenceGeneratorConfigurator">
            <summary>
            Represents that the implemented classes are sequence generator configurators.
            </summary>
        </member>
        <member name="T:Apworks.Config.Fluent.SequenceGeneratorConfigurator">
            <summary>
            Represents the sequence generator configurator.
            </summary>
        </member>
        <member name="M:Apworks.Config.Fluent.SequenceGeneratorConfigurator.#ctor(Apworks.Config.Fluent.IConfigSourceConfigurator,System.Type)">
            <summary>
            Initializes a new instance of <c>SequenceGeneratorConfigurator</c> class.
            </summary>
            <param name="context">The configuration context.</param>
            <param name="sequenceGeneratorType">The type of the generator to be used in the application.</param>
        </member>
        <member name="M:Apworks.Config.Fluent.SequenceGeneratorConfigurator.DoConfigure(Apworks.Config.RegularConfigSource)">
            <summary>
            Configures the container.
            </summary>
            <param name="container">The configuration container.</param>
            <returns>The configured container.</returns>
        </member>
        <member name="T:Apworks.Config.Fluent.IIdentityGeneratorConfigurator">
            <summary>
            Represents that the implemented classes are identity generator configurators.
            </summary>
        </member>
        <member name="T:Apworks.Config.Fluent.IdentityGeneratorConfigurator">
            <summary>
            Represents the identity generator configurator.
            </summary>
        </member>
        <member name="M:Apworks.Config.Fluent.IdentityGeneratorConfigurator.#ctor(Apworks.Config.Fluent.IConfigSourceConfigurator,System.Type)">
            <summary>
            Initializes a new instance of <c>IdentityGeneratorConfigurator</c> class.
            </summary>
            <param name="context">The configuration context.</param>
            <param name="identityGeneratorType">The type of the generator to be used in the application.</param>
        </member>
        <member name="M:Apworks.Config.Fluent.IdentityGeneratorConfigurator.DoConfigure(Apworks.Config.RegularConfigSource)">
            <summary>
            Configures the container.
            </summary>
            <param name="container">The configuration container.</param>
            <returns>The configured container.</returns>
        </member>
        <member name="T:Apworks.Config.Fluent.IObjectContainerConfigurator">
            <summary>
            Represents that the implemented classes are object container configurators.
            </summary>
        </member>
        <member name="T:Apworks.Config.Fluent.ObjectContainerConfigurator">
            <summary>
            Represents the object container configurator.
            </summary>
        </member>
        <member name="M:Apworks.Config.Fluent.ObjectContainerConfigurator.#ctor(Apworks.Config.Fluent.IConfigSourceConfigurator,System.Type,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of <c>ObjectContainerConfigurator</c> class.
            </summary>
            <param name="context">The configuration context.</param>
            <param name="objectContainerType">The type of the object container to be used by the application.</param>
            <param name="initFromConfigFile">The <see cref="T:System.Boolean"/> value which indicates whether the container configuration should be read from the config file.</param>
            <param name="sectionName">The name of the section in the config file. This value must be specified when the <paramref name="initFromConfigFile"/> parameter is set to true.</param>
        </member>
        <member name="M:Apworks.Config.Fluent.ObjectContainerConfigurator.DoConfigure(Apworks.Config.RegularConfigSource)">
            <summary>
            Configures the container.
            </summary>
            <param name="container">The configuration container.</param>
            <returns>The configured container.</returns>
        </member>
        <member name="T:Apworks.Events.ActionDelegatedEventHandler`1">
            <summary>
            Represents the event handler which delegates the event handling process to
            a given <see cref="T:System.Action`1"/> delegated method.
            </summary>
            <typeparam name="TEvent">The type of the event to be handled by current handler.</typeparam>
        </member>
        <member name="T:Apworks.Events.IEventHandler`1">
            <summary>
            Represents that the implemented classes are event handlers.
            </summary>
            <typeparam name="TEvent">The type of the event to be handled.</typeparam>
        </member>
        <member name="T:Apworks.IHandler`1">
            <summary>
            Represents that the implemented classes are message handlers.
            </summary>
            <typeparam name="T">The type of the message to be handled.</typeparam>
        </member>
        <member name="M:Apworks.IHandler`1.Handle(`0)">
            <summary>
            Handles the specified message.
            </summary>
            <param name="message">The message to be handled.</param>
        </member>
        <member name="M:Apworks.Events.ActionDelegatedEventHandler`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of <c>ActionDelegatedEventHandler{TEvent}</c> class.
            </summary>
            <param name="action">The <see cref="T:System.Action`1"/> instance that delegates the event handling process.</param>
        </member>
        <member name="M:Apworks.Events.ActionDelegatedEventHandler`1.Equals(System.Object)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates whether the current
            <c>ActionDelegatedEventHandler{T}</c> equals to the given object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> which is used to compare to
            the current <c>ActionDelegatedEventHandler{T}</c> instance.</param>
            <returns>If the given object equals to the current <c>ActionDelegatedEventHandler{T}</c>
            instance, returns true, otherwise, false.</returns>
        </member>
        <member name="M:Apworks.Events.ActionDelegatedEventHandler`1.GetHashCode">
            <summary>
            Gets the hash code of the current <c>ActionDelegatedEventHandler{T}</c> instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Apworks.Events.ActionDelegatedEventHandler`1.Handle(`0)">
            <summary>
            Handles the specified message.
            </summary>
            <param name="message">The message to be handled.</param>
        </member>
        <member name="T:Apworks.Events.EventAggregator">
            <summary>
            Represents an Event Aggregator implementation.
            </summary>
            <remarks>For more information about the Event Aggregator, please refer to: http://msdn.microsoft.com/en-us/library/ff921122(v=pandp.20).aspx
            </remarks>
        </member>
        <member name="T:Apworks.Events.IEventAggregator">
            <summary>
            Represents that the implemented classes are Event Aggregators.
            </summary>
            <remarks>
            For more information about the Event Aggregator, please refer to: http://msdn.microsoft.com/en-us/library/ff921122(v=pandp.20).aspx
            </remarks>
        </member>
        <member name="M:Apworks.Events.IEventAggregator.Subscribe``1(Apworks.Events.IEventHandler{``0})">
            <summary>
            Subscribes the event handler to a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandler">The event handler.</param>
        </member>
        <member name="M:Apworks.Events.IEventAggregator.Subscribe``1(System.Collections.Generic.IEnumerable{Apworks.Events.IEventHandler{``0}})">
            <summary>
            Subscribes the event handlers to a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlers">The event handlers.</param>
        </member>
        <member name="M:Apworks.Events.IEventAggregator.Subscribe``1(Apworks.Events.IEventHandler{``0}[])">
            <summary>
            Subscribes the event handlers to a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlers">The event handlers.</param>
        </member>
        <member name="M:Apworks.Events.IEventAggregator.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribes the <see cref="T:System.Action`1"/> delegate to a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlerAction">The <see cref="T:System.Action`1"/> delegate.</param>
        </member>
        <member name="M:Apworks.Events.IEventAggregator.Subscribe``1(System.Collections.Generic.IEnumerable{System.Action{``0}})">
            <summary>
            Subscribes the <see cref="T:System.Action`1"/> delegates to a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlerActions">The <see cref="T:System.Action`1"/> delegates.</param>
        </member>
        <member name="M:Apworks.Events.IEventAggregator.Subscribe``1(System.Action{``0}[])">
            <summary>
            Subscribes the <see cref="T:System.Action`1"/> delegates to a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlerActions">The <see cref="T:System.Action`1"/> delegates.</param>
        </member>
        <member name="M:Apworks.Events.IEventAggregator.Unsubscribe``1(Apworks.Events.IEventHandler{``0})">
            <summary>
            Unsubscribes the event handler from a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandler">The event handler.</param>
        </member>
        <member name="M:Apworks.Events.IEventAggregator.Unsubscribe``1(System.Collections.Generic.IEnumerable{Apworks.Events.IEventHandler{``0}})">
            <summary>
            Unsubscribes the event handlers from a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlers">The event handler.</param>
        </member>
        <member name="M:Apworks.Events.IEventAggregator.Unsubscribe``1(Apworks.Events.IEventHandler{``0}[])">
            <summary>
            Unsubscribes the event handlers from a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlers">The event handlers.</param>
        </member>
        <member name="M:Apworks.Events.IEventAggregator.Unsubscribe``1(System.Action{``0})">
            <summary>
            Unsubscribes the <see cref="T:System.Action`1"/> delegate from a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlerAction">The <see cref="T:System.Action`1"/> delegate.</param>
        </member>
        <member name="M:Apworks.Events.IEventAggregator.Unsubscribe``1(System.Collections.Generic.IEnumerable{System.Action{``0}})">
            <summary>
            Unsubscribes the <see cref="T:System.Action`1"/> delegates from a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlerActions">The <see cref="T:System.Action`1"/> delegates.</param>
        </member>
        <member name="M:Apworks.Events.IEventAggregator.Unsubscribe``1(System.Action{``0}[])">
            <summary>
            Unsubscribes the <see cref="T:System.Action`1"/> delegates from a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlerActions">The <see cref="T:System.Action`1"/> delegates.</param>
        </member>
        <member name="M:Apworks.Events.IEventAggregator.UnsubscribeAll``1">
            <summary>
            Unsubscribes all the subscribed event handlers from a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:Apworks.Events.IEventAggregator.UnsubscribeAll">
            <summary>
            Unsubscribes all the event handlers from the event aggregator.
            </summary>
        </member>
        <member name="M:Apworks.Events.IEventAggregator.GetSubscriptions``1">
            <summary>
            Gets the subscribed event handlers for a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <returns>A collection of subscribed event handlers.</returns>
        </member>
        <member name="M:Apworks.Events.IEventAggregator.Publish``1(``0)">
            <summary>
            Publishes the event to all of its subscriptions.
            </summary>
            <typeparam name="TEvent">The type of the event to be published.</typeparam>
            <param name="event">The event to be published.</param>
        </member>
        <member name="M:Apworks.Events.IEventAggregator.Publish``1(``0,System.Action{``0,System.Boolean,System.Exception},System.Nullable{System.TimeSpan})">
            <summary>
            Publishes the event to all of its subscriptions.
            </summary>
            <typeparam name="TEvent">The type of the event to be published.</typeparam>
            <param name="event">The event to be published.</param>
            <param name="callback">The callback method to be executed after the event has been published and processed.</param>
            <param name="timeout">When the event handler is executing in parallel, represents the timeout value
            for the handler to complete.</param>
        </member>
        <member name="M:Apworks.Events.EventAggregator.#ctor">
            <summary>
            Initializes a new instance of <c>EventAggregator</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Events.EventAggregator.#ctor(System.Object[])">
             <summary>
             Initializes a new instance of <c>EventAggregator</c> class.
             </summary>
             <param name="handlers">The event handlers to be registered to the Event Aggregator.</param>
             <remarks>
             All the event handlers registered to the Event Aggregator should implement the <see cref="T:Apworks.Events.IEventHandler`1"/>
             interface, otherwise, the instance will be ignored. When using IoC containers to register dependencies,
             remember to specify not only the name of the dependency, but also the type of the dependency. For example,
             in the Unity container configuration section, you should register the handlers by using the following snippet:
             <code>
             &lt;register type="Apworks.Events.IEventAggregator, Apworks" mapTo="Apworks.Events.EventAggregator, Apworks"&gt;
              &lt;constructor&gt;
                &lt;param name="handlers"&gt;
                  &lt;array&gt;
                    &lt;dependency name="orderDispatchedSendEmailHandler" type="Apworks.Events.IEventHandler`1[[ByteartRetail.Domain.Events.OrderDispatchedEvent, ByteartRetail.Domain]], Apworks" /&gt;
                    &lt;dependency name="orderConfirmedSendEmailHandler" type="Apworks.Events.IEventHandler`1[[ByteartRetail.Domain.Events.OrderConfirmedEvent, ByteartRetail.Domain]], Apworks" /&gt;
                  &lt;/array&gt;
                &lt;/param&gt;
              &lt;/constructor&gt;
            &lt;/register&gt;
             </code>
             </remarks>
        </member>
        <member name="M:Apworks.Events.EventAggregator.Subscribe``1(Apworks.Events.IEventHandler{``0})">
            <summary>
            Subscribes the event handler to a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandler">The event handler.</param>
        </member>
        <member name="M:Apworks.Events.EventAggregator.Subscribe``1(System.Collections.Generic.IEnumerable{Apworks.Events.IEventHandler{``0}})">
            <summary>
            Subscribes the event handlers to a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlers">The event handlers.</param>
        </member>
        <member name="M:Apworks.Events.EventAggregator.Subscribe``1(Apworks.Events.IEventHandler{``0}[])">
            <summary>
            Subscribes the event handlers to a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlers">The event handlers.</param>
        </member>
        <member name="M:Apworks.Events.EventAggregator.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribes the <see cref="T:System.Action`1"/> delegate to a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlerAction">The <see cref="T:System.Action`1"/> delegate.</param>
        </member>
        <member name="M:Apworks.Events.EventAggregator.Subscribe``1(System.Collections.Generic.IEnumerable{System.Action{``0}})">
            <summary>
            Subscribes the <see cref="T:System.Action`1"/> delegates to a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlerActions">The <see cref="T:System.Action`1"/> delegates.</param>
        </member>
        <member name="M:Apworks.Events.EventAggregator.Subscribe``1(System.Action{``0}[])">
            <summary>
            Subscribes the <see cref="T:System.Action`1"/> delegates to a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlerActions">The <see cref="T:System.Action`1"/> delegates.</param>
        </member>
        <member name="M:Apworks.Events.EventAggregator.Unsubscribe``1(Apworks.Events.IEventHandler{``0})">
            <summary>
            Unsubscribes the event handler from a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandler">The event handler.</param>
        </member>
        <member name="M:Apworks.Events.EventAggregator.Unsubscribe``1(System.Collections.Generic.IEnumerable{Apworks.Events.IEventHandler{``0}})">
            <summary>
            Unsubscribes the event handlers from a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlers">The event handler.</param>
        </member>
        <member name="M:Apworks.Events.EventAggregator.Unsubscribe``1(Apworks.Events.IEventHandler{``0}[])">
            <summary>
            Unsubscribes the event handlers from a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlers">The event handlers.</param>
        </member>
        <member name="M:Apworks.Events.EventAggregator.Unsubscribe``1(System.Action{``0})">
            <summary>
            Unsubscribes the <see cref="T:System.Action`1"/> delegate from a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlerAction">The <see cref="T:System.Action`1"/> delegate.</param>
        </member>
        <member name="M:Apworks.Events.EventAggregator.Unsubscribe``1(System.Collections.Generic.IEnumerable{System.Action{``0}})">
            <summary>
            Unsubscribes the <see cref="T:System.Action`1"/> delegates from a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlerActions">The <see cref="T:System.Action`1"/> delegates.</param>
        </member>
        <member name="M:Apworks.Events.EventAggregator.Unsubscribe``1(System.Action{``0}[])">
            <summary>
            Unsubscribes the <see cref="T:System.Action`1"/> delegates from a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandlerActions">The <see cref="T:System.Action`1"/> delegates.</param>
        </member>
        <member name="M:Apworks.Events.EventAggregator.UnsubscribeAll``1">
            <summary>
            Unsubscribes all the subscribed event handlers from a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:Apworks.Events.EventAggregator.UnsubscribeAll">
            <summary>
            Unsubscribes all the event handlers from the event aggregator.
            </summary>
        </member>
        <member name="M:Apworks.Events.EventAggregator.GetSubscriptions``1">
            <summary>
            Gets the subscribed event handlers for a given event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <returns>A collection of subscribed event handlers.</returns>
        </member>
        <member name="M:Apworks.Events.EventAggregator.Publish``1(``0)">
            <summary>
            Publishes the event to all of its subscriptions.
            </summary>
            <typeparam name="TEvent">The type of the event to be published.</typeparam>
            <param name="event">The event to be published.</param>
        </member>
        <member name="M:Apworks.Events.EventAggregator.Publish``1(``0,System.Action{``0,System.Boolean,System.Exception},System.Nullable{System.TimeSpan})">
            <summary>
            Publishes the event to all of its subscriptions.
            </summary>
            <typeparam name="TEvent">The type of the event to be published.</typeparam>
            <param name="event">The event to be published.</param>
            <param name="callback">The callback method to be executed after the event has been published and processed.</param>
            <param name="timeout">When the event handler is executing in parallel, represents the timeout value
            for the handler to complete.</param>
        </member>
        <member name="T:Apworks.Events.ParallelExecutionAttribute">
            <summary>
            Represents that the event handlers decorated by this attribute
            will handle the events in a parallel manner.
            </summary>
            <remarks>This attribute is only applicable to the event handlers and will only
            be used by the event buses, event aggregators or event dispatchers. Applying this attribute to
            other types of classes will take no effect.
            </remarks>
        </member>
        <member name="T:Apworks.IServiceLocator">
            <summary>
            Represents that the implemented classes are service locators.
            </summary>
            
        </member>
        <member name="M:Apworks.IServiceLocator.GetService``1">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <typeparam name="T">The type of the service object.</typeparam>
            <returns>The instance of the service object.</returns>
        </member>
        <member name="M:Apworks.IServiceLocator.GetService``1(System.Object)">
            <summary>
            Gets the service object of the specified type, with overrided
            arguments provided.
            </summary>
            <typeparam name="T">The type of the service object.</typeparam>
            <param name="overridedArguments">The overrided arguments to be used when getting the service.</param>
            <returns>The instance of the service object.</returns>
        </member>
        <member name="M:Apworks.IServiceLocator.GetService(System.Type,System.Object)">
            <summary>
            Gets the service object of the specified type, with overrided
            arguments provided.
            </summary>
            <param name="serviceType">The type of the service to get.</param>
            <param name="overridedArguments">The overrided arguments to be used when getting the service.</param>
            <returns>The instance of the service object.</returns>
        </member>
        <member name="M:Apworks.IServiceLocator.ResolveAll(System.Type)">
            <summary>
            Resolves all the objects from the specified type.
            </summary>
            <param name="serviceType">The type of the objects to be resolved.</param>
            <returns>A <see cref="T:System.Array"/> object which contains all the objects resolved.</returns>
        </member>
        <member name="M:Apworks.IServiceLocator.ResolveAll``1">
            <summary>
            Resolves all the objects from the specified type.
            </summary>
            <typeparam name="T">The type of the objects to be resolved.</typeparam>
            <returns>A <see cref="T:System.Array"/> object which contains all the objects resolved.</returns>
        </member>
        <member name="M:Apworks.IServiceLocator.Registered``1">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates whether the given type
            has been registered to the service locator.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <returns>True if the type has been registered, otherwise, false.</returns>
        </member>
        <member name="M:Apworks.IServiceLocator.Registered(System.Type)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates whether the given type
            has been registered to the service locator.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type has been registered, otherwise, false.</returns>
        </member>
        <member name="T:Apworks.IServiceRegister">
            <summary>
            Represents the service register (not finished yet).
            </summary>
        </member>
        <member name="T:Apworks.PagedResult`1">
            <summary>
            Represents a collection which contains a set of objects that is from
            a specific page of the entire object set.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
        </member>
        <member name="M:Apworks.PagedResult`1.#ctor">
            <summary>
            Initializes a new instance of <c>PagedResult</c> class.
            </summary>
        </member>
        <member name="M:Apworks.PagedResult`1.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of <c>PagedResult</c> class.
            </summary>
            <param name="totalRecords">Total number of records contained in the entire object set.</param>
            <param name="totalPages">Total number of pages.</param>
            <param name="pageSize">The number of records per page.</param>
            <param name="pageNumber">The current page number.</param>
            <param name="data">The objects contained in the current page.</param>
        </member>
        <member name="M:Apworks.PagedResult`1.Add(`0)">
            <summary>
            Adds an item to the System.Collections.Generic.ICollection{T}.
            </summary>
            <param name="item">The object to add to the System.Collections.Generic.ICollection{T}.</param>
        </member>
        <member name="M:Apworks.PagedResult`1.Clear">
            <summary>
            Removes all items from the System.Collections.Generic.ICollection{T}.
            </summary>
        </member>
        <member name="M:Apworks.PagedResult`1.Contains(`0)">
            <summary>
            Determines whether the System.Collections.Generic.ICollection{T} contains
            a specific value.
            </summary>
            <param name="item">The object to locate in the System.Collections.Generic.ICollection{T}.</param>
            <returns>true if item is found in the System.Collections.Generic.ICollection{T}; otherwise,
            false.</returns>
        </member>
        <member name="M:Apworks.PagedResult`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the System.Collections.Generic.ICollection{T} to an
            System.Array, starting at a particular System.Array index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements
            copied from System.Collections.Generic.ICollection{T}. The System.Array must
            have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Apworks.PagedResult`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection{T}.
            </summary>
            <param name="item">The object to remove from the System.Collections.Generic.ICollection{T}.</param>
            <returns></returns>
        </member>
        <member name="M:Apworks.PagedResult`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A System.Collections.Generic.IEnumerator{T} that can be used to iterate through
            the collection.</returns>
        </member>
        <member name="M:Apworks.PagedResult`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An System.Collections.IEnumerator object that can be used to iterate through
            the collection.</returns>
        </member>
        <member name="P:Apworks.PagedResult`1.TotalRecords">
            <summary>
            Gets or sets the total number of the records.
            </summary>
        </member>
        <member name="P:Apworks.PagedResult`1.TotalPages">
            <summary>
            Gets or sets the total pages available.
            </summary>
        </member>
        <member name="P:Apworks.PagedResult`1.PageSize">
            <summary>
            Gets or sets the number of records for each page.
            </summary>
        </member>
        <member name="P:Apworks.PagedResult`1.PageNumber">
            <summary>
            Gets or sets the page number.
            </summary>
        </member>
        <member name="P:Apworks.PagedResult`1.Data">
            <summary>
            Gets a list of objects contained by the current <c>PagedResult{T}</c> object.
            </summary>
        </member>
        <member name="P:Apworks.PagedResult`1.Count">
            <summary>
            Gets the number of elements contained in the System.Collections.Generic.ICollection{T}.
            </summary>
        </member>
        <member name="P:Apworks.PagedResult`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the System.Collections.Generic.ICollection{T}
            is read-only.
            </summary>
        </member>
        <member name="T:Apworks.Repositories.RepositoryContext">
            <summary>
            Represents the repository context.
            </summary>
        </member>
        <member name="T:Apworks.DisposableObject">
            <summary>
            Represents that the derived classes are disposable objects.
            </summary>
        </member>
        <member name="M:Apworks.DisposableObject.Finalize">
            <summary>
            Finalizes the object.
            </summary>
        </member>
        <member name="M:Apworks.DisposableObject.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">A <see cref="T:System.Boolean"/> value which indicates whether
            the object should be disposed explicitly.</param>
        </member>
        <member name="M:Apworks.DisposableObject.ExplicitDispose">
            <summary>
            Provides the facility that disposes the object in an explicit manner,
            preventing the Finalizer from being called after the object has been
            disposed explicitly.
            </summary>
        </member>
        <member name="M:Apworks.DisposableObject.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Apworks.Repositories.IRepositoryContext">
            <summary>
            Represents that the implemented classes are repository transaction contexts.
            </summary>
        </member>
        <member name="T:Apworks.IUnitOfWork">
            <summary>
            Represents that the implemented classes will maintain a list of objects
            affected by a business transaction and coordinate the writing out of changes
            and the resolution of concurrency problems. Unit of Work is an object-relational
            behavioral pattern which was described in Martin Fowler's book, Patterns of
            Enterprise Application Architecture. For more information about Unit of Work
            architectural pattern, please refer to http://martinfowler.com/eaaCatalog/unitOfWork.html.
            </summary>
        </member>
        <member name="M:Apworks.IUnitOfWork.Commit">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:Apworks.IUnitOfWork.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
        </member>
        <member name="P:Apworks.IUnitOfWork.DistributedTransactionSupported">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work could support Microsoft Distributed
            Transaction Coordinator (MS-DTC).
            </summary>
        </member>
        <member name="P:Apworks.IUnitOfWork.Committed">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work was successfully committed.
            </summary>
        </member>
        <member name="M:Apworks.Repositories.IRepositoryContext.RegisterNew(System.Object)">
            <summary>
            Registers a new object to the repository context.
            </summary>
            <param name="obj">The object to be registered.</param>
        </member>
        <member name="M:Apworks.Repositories.IRepositoryContext.RegisterModified(System.Object)">
            <summary>
            Registers a modified object to the repository context.
            </summary>
            <param name="obj">The object to be registered.</param>
        </member>
        <member name="M:Apworks.Repositories.IRepositoryContext.RegisterDeleted(System.Object)">
            <summary>
            Registers a deleted object to the repository context.
            </summary>
            <param name="obj">The object to be registered.</param>
        </member>
        <member name="P:Apworks.Repositories.IRepositoryContext.ID">
            <summary>
            Gets the unique-identifier of the repository context.
            </summary>
        </member>
        <member name="M:Apworks.Repositories.RepositoryContext.ClearRegistrations">
            <summary>
            Clears all the registration in the repository context.
            </summary>
            <remarks>Note that this can only be called after the repository context has successfully committed.</remarks>
        </member>
        <member name="M:Apworks.Repositories.RepositoryContext.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">A <see cref="T:System.Boolean"/> value which indicates whether
            the object should be disposed explicitly.</param>
        </member>
        <member name="M:Apworks.Repositories.RepositoryContext.RegisterNew(System.Object)">
            <summary>
            Registers a new object to the repository context.
            </summary>
            <param name="obj">The object to be registered.</param>
        </member>
        <member name="M:Apworks.Repositories.RepositoryContext.RegisterModified(System.Object)">
            <summary>
            Registers a modified object to the repository context.
            </summary>
            <param name="obj">The object to be registered.</param>
        </member>
        <member name="M:Apworks.Repositories.RepositoryContext.RegisterDeleted(System.Object)">
            <summary>
            Registers a deleted object to the repository context.
            </summary>
            <param name="obj">The object to be registered.</param>
        </member>
        <member name="M:Apworks.Repositories.RepositoryContext.Commit">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:Apworks.Repositories.RepositoryContext.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.RepositoryContext.NewCollection">
            <summary>
            Gets an enumerator which iterates over the collection that contains all the objects need to be added to the repository.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.RepositoryContext.ModifiedCollection">
            <summary>
            Gets an enumerator which iterates over the collection that contains all the objects need to be modified in the repository.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.RepositoryContext.DeletedCollection">
            <summary>
            Gets an enumerator which iterates over the collection that contains all the objects need to be deleted from the repository.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.RepositoryContext.ID">
            <summary>
            Gets the ID of the repository context.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.RepositoryContext.DistributedTransactionSupported">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work could support Microsoft Distributed
            Transaction Coordinator (MS-DTC).
            </summary>
        </member>
        <member name="P:Apworks.Repositories.RepositoryContext.Committed">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work was successfully committed.
            </summary>
        </member>
        <member name="T:Apworks.Services.ApplicationServices.DataTransferObject`1">
            <summary>
            Represents the data transfer object which maps the domain object to serializable data
            object and vice versa.
            </summary>
            <typeparam name="TDomainObject">The type of the domain object.</typeparam>
        </member>
        <member name="M:Apworks.Services.ApplicationServices.DataTransferObject`1.#ctor">
            <summary>
            Initializes a new instance of <c>DataTransferObject</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Services.ApplicationServices.DataTransferObject`1.MapFrom(`0)">
            <summary>
            Maps the domain object to the current data transfer object.
            </summary>
            <param name="domainObject">The domain object to be mapped.</param>
        </member>
        <member name="M:Apworks.Services.ApplicationServices.DataTransferObject`1.MapTo">
            <summary>
            Maps the current data transfer object to the domain object.
            </summary>
            <returns>The domain object.</returns>
        </member>
        <member name="M:Apworks.Services.ApplicationServices.DataTransferObject`1.MapFrom``2(``0)">
            <summary>
            Maps the domain object to the data transfer object.
            </summary>
            <typeparam name="TDO">The type of the domain object.</typeparam>
            <typeparam name="TDTO">The type of the data transfer object.</typeparam>
            <param name="domainObject">The instance of the domain object to be mapped.</param>
            <returns>The instance of the data transfer object.</returns>
        </member>
        <member name="M:Apworks.Services.ApplicationServices.DataTransferObject`1.MapTo``2(``0)">
            <summary>
            Maps the data transfer object to the domain object.
            </summary>
            <typeparam name="TDTO">The type of the data transfer object.</typeparam>
            <typeparam name="TDO">The type of the domain object.</typeparam>
            <param name="dto">The instance of the data transfer object.</param>
            <returns>The instance of the domain object.</returns>
        </member>
        <member name="T:Apworks.Application.AppInitEventArgs">
            <summary>
            Represents the class that contains the event data
            for application initialization.
            </summary>
        </member>
        <member name="M:Apworks.Application.AppInitEventArgs.#ctor">
            <summary>
            Initializes a new instance of <c>AppInitEventArgs</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Application.AppInitEventArgs.#ctor(Apworks.Config.IConfigSource,Apworks.ObjectContainer)">
            <summary>
            Initializes a new instance of <c>AppInitEventArgs</c> class.
            </summary>
            <param name="configSource">The <see cref="T:Apworks.Config.IConfigSource"/> instance that was used
            for configuring the application.</param>
            <param name="objectContainer">The <see cref="T:Apworks.IObjectContainer"/> instance with which the application
            registers or resolves the object dependencies.</param>
        </member>
        <member name="P:Apworks.Application.AppInitEventArgs.ConfigSource">
            <summary>
            Gets the <see cref="T:Apworks.Config.IConfigSource"/> instance that was used
            for configuring the application.
            </summary>
        </member>
        <member name="P:Apworks.Application.AppInitEventArgs.ObjectContainer">
            <summary>
            Gets the <see cref="T:Apworks.IObjectContainer"/> instance with which the application
            registers or resolves the object dependencies.
            </summary>
        </member>
        <member name="T:Apworks.Application.App">
            <summary>
            Represents the implementation of the application.
            </summary>
        </member>
        <member name="T:Apworks.Application.IApp">
            <summary>
            Represents that the implemented classes are Apworks applications.
            </summary>
        </member>
        <member name="M:Apworks.Application.IApp.Start">
            <summary>
            Starts the application.
            </summary>
        </member>
        <member name="P:Apworks.Application.IApp.ConfigSource">
            <summary>
            Gets the <see cref="T:Apworks.Config.IConfigSource"/> instance that was used
            for configuring the application.
            </summary>
        </member>
        <member name="P:Apworks.Application.IApp.ObjectContainer">
            <summary>
            Gets the <see cref="T:Apworks.IObjectContainer"/> instance with which the application
            registers or resolves the object dependencies.
            </summary>
        </member>
        <member name="P:Apworks.Application.IApp.Interceptors">
            <summary>
            Gets a list of <see cref="T:Castle.DynamicProxy.IInterceptor"/> instances that are
            registered on the current application.
            </summary>
        </member>
        <member name="E:Apworks.Application.IApp.Initialize">
            <summary>
            The event that occurs when the application is initializing.
            </summary>
        </member>
        <member name="M:Apworks.Application.App.#ctor(Apworks.Config.IConfigSource)">
            <summary>
            Initializes a new instance of <c>Application</c> class.
            </summary>
            <param name="configSource">The <see cref="T:Apworks.Config.IConfigSource"/> instance that was used
            for configuring the application.</param>
        </member>
        <member name="M:Apworks.Application.App.OnStart">
            <summary>
            Starts the application
            </summary>
        </member>
        <member name="M:Apworks.Application.App.Start">
            <summary>
            Starts the application.
            </summary>
        </member>
        <member name="P:Apworks.Application.App.ConfigSource">
            <summary>
            Gets the <see cref="T:Apworks.Config.IConfigSource"/> instance that was used
            for configuring the application.
            </summary>
        </member>
        <member name="P:Apworks.Application.App.ObjectContainer">
            <summary>
            Gets the <see cref="T:Apworks.IObjectContainer"/> instance with which the application
            registers or resolves the object dependencies.
            </summary>
        </member>
        <member name="P:Apworks.Application.App.Interceptors">
            <summary>
            Gets a list of <see cref="T:Castle.DynamicProxy.IInterceptor"/> instances that are
            registered on the current application.
            </summary>
        </member>
        <member name="E:Apworks.Application.App.Initialize">
            <summary>
            The event that occurs when the application is initializing.
            </summary>
        </member>
        <member name="T:Apworks.Application.AppRuntime">
            <summary>
            Represents the Application Runtime from where the application
            is created, initialized and started.
            </summary>
        </member>
        <member name="M:Apworks.Application.AppRuntime.Create(Apworks.Config.IConfigSource)">
            <summary>
            Creates and initializes a new application instance.
            </summary>
            <param name="configSource">The <see cref="T:Apworks.Config.IConfigSource"/> instance that
            is used for initializing the application.</param>
            <returns>The initialized application instance.</returns>
        </member>
        <member name="P:Apworks.Application.AppRuntime.Instance">
            <summary>
            Gets the instance of the current <c>ApplicationRuntime</c> class.
            </summary>
        </member>
        <member name="P:Apworks.Application.AppRuntime.CurrentApplication">
            <summary>
            Gets the instance of the currently running application.
            </summary>
        </member>
        <member name="T:Apworks.Bus.BusException">
            <summary>
            Represents the errors occur when performing bus operations in Apworks.
            </summary>
        </member>
        <member name="T:Apworks.InfrastructureException">
            <summary>
            Represents errors that occur in the infrastructure layer of Apworks framework.
            </summary>
        </member>
        <member name="T:Apworks.ApworksException">
            <summary>
            Represents errors that occur in the Apworks framework.
            </summary>
        </member>
        <member name="M:Apworks.ApworksException.#ctor">
            <summary>
            Initializes a new instance of the <c>ApworksException</c> class.
            </summary>
        </member>
        <member name="M:Apworks.ApworksException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>ApworksException</c> class with the specified
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apworks.ApworksException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>ApworksException</c> class with the specified
            error message and the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:Apworks.ApworksException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <c>ApworksException</c> class with the specified
            string formatter and the arguments that are used for formatting the message which
            describes the error.
            </summary>
            <param name="format">The string formatter which is used for formatting the error message.</param>
            <param name="args">The arguments that are used by the formatter to build the error message.</param>
        </member>
        <member name="M:Apworks.InfrastructureException.#ctor">
            <summary>
            Initializes a new instance of the <c>InfrastructureException</c> class.
            </summary>
        </member>
        <member name="M:Apworks.InfrastructureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>InfrastructureException</c> class with the specified
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apworks.InfrastructureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>InfrastructureException</c> class with the specified
            error message and the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:Apworks.InfrastructureException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <c>InfrastructureException</c> class with the specified
            string formatter and the arguments that are used for formatting the message which
            describes the error.
            </summary>
            <param name="format">The string formatter which is used for formatting the error message.</param>
            <param name="args">The arguments that are used by the formatter to build the error message.</param>
        </member>
        <member name="M:Apworks.Bus.BusException.#ctor">
            <summary>
            Initializes a new instance of the <c>BusException</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Bus.BusException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>BusException</c> class with the specified
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apworks.Bus.BusException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>BusException</c> class with the specified
            error message and the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:Apworks.Bus.BusException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <c>BusException</c> class with the specified
            string formatter and the arguments that are used for formatting the message which
            describes the error.
            </summary>
            <param name="format">The string formatter which is used for formatting the error message.</param>
            <param name="args">The arguments that are used by the formatter to build the error message.</param>
        </member>
        <member name="T:Apworks.Bus.MessageDispatchEventArgs">
            <summary>
            Represents the event data that is generated when dispatching messages.
            </summary>
        </member>
        <member name="M:Apworks.Bus.MessageDispatchEventArgs.#ctor">
            <summary>
            Initializes a new instance of <c>MessageDispatchEventArgs</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Bus.MessageDispatchEventArgs.#ctor(System.Object,System.Type,System.Object)">
            <summary>
            Initializes a new instance of <c>MessageDispatchEventArgs</c> class.
            </summary>
            <param name="message">The message.</param>
            <param name="handlerType">The type of the message handler.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="P:Apworks.Bus.MessageDispatchEventArgs.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:Apworks.Bus.MessageDispatchEventArgs.HandlerType">
            <summary>
            Gets or sets the type of the message handler.
            </summary>
        </member>
        <member name="P:Apworks.Bus.MessageDispatchEventArgs.Handler">
            <summary>
            Gets or sets the handler.
            </summary>
        </member>
        <member name="T:Apworks.Bus.DispatchingException">
            <summary>
            Represents the errors occur when dispatching the messages.
            </summary>
        </member>
        <member name="M:Apworks.Bus.DispatchingException.#ctor">
            <summary>
            Initializes a new instance of the <c>DispatcherException</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Bus.DispatchingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DispatcherException</c> class with the specified
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apworks.Bus.DispatchingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>DispatcherException</c> class with the specified
            error message and the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:Apworks.Bus.DispatchingException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <c>DispatcherException</c> class with the specified
            string formatter and the arguments that are used for formatting the message which
            describes the error.
            </summary>
            <param name="format">The string formatter which is used for formatting the error message.</param>
            <param name="args">The arguments that are used by the formatter to build the error message.</param>
        </member>
        <member name="T:Apworks.Bus.MessageDispatcher">
            <summary>
            Represents the message dispatcher.
            </summary>
        </member>
        <member name="T:Apworks.Bus.IMessageDispatcher">
            <summary>
            Represents the message dispatcher.
            </summary>
        </member>
        <member name="M:Apworks.Bus.IMessageDispatcher.Clear">
            <summary>
            Clears the registration of the message handlers.
            </summary>
        </member>
        <member name="M:Apworks.Bus.IMessageDispatcher.DispatchMessage``1(``0)">
            <summary>
            Dispatches the message.
            </summary>
            <param name="message">The message to be dispatched.</param>
        </member>
        <member name="M:Apworks.Bus.IMessageDispatcher.Register``1(Apworks.IHandler{``0})">
            <summary>
            Registers a message handler into message dispatcher.
            </summary>
            <typeparam name="T">The type of the message.</typeparam>
            <param name="handler">The handler to be registered.</param>
        </member>
        <member name="M:Apworks.Bus.IMessageDispatcher.UnRegister``1(Apworks.IHandler{``0})">
            <summary>
            Unregisters a message handler from the message dispatcher.
            </summary>
            <typeparam name="T">The type of the message.</typeparam>
            <param name="handler">The handler to be registered.</param>
        </member>
        <member name="E:Apworks.Bus.IMessageDispatcher.Dispatching">
            <summary>
            Occurs when the message dispatcher is going to dispatch a message.
            </summary>
        </member>
        <member name="E:Apworks.Bus.IMessageDispatcher.DispatchFailed">
            <summary>
            Occurs when the message dispatcher failed to dispatch a message.
            </summary>
        </member>
        <member name="E:Apworks.Bus.IMessageDispatcher.Dispatched">
            <summary>
            Occurs when the message dispatcher has finished dispatching the message.
            </summary>
        </member>
        <member name="M:Apworks.Bus.MessageDispatcher.RegisterType(Apworks.Bus.IMessageDispatcher,System.Type)">
            <summary>
            Registers the specified handler type to the message dispatcher.
            </summary>
            <param name="messageDispatcher">Message dispatcher instance.</param>
            <param name="handlerType">The type to be registered.</param>
        </member>
        <member name="M:Apworks.Bus.MessageDispatcher.RegisterAssembly(Apworks.Bus.IMessageDispatcher,System.Reflection.Assembly)">
            <summary>
            Registers all the handler types within a given assembly to the message dispatcher.
            </summary>
            <param name="messageDispatcher">Message dispatcher instance.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Apworks.Bus.MessageDispatcher.OnDispatching(Apworks.Bus.MessageDispatchEventArgs)">
            <summary>
            Occurs when the message dispatcher is going to dispatch a message.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Apworks.Bus.MessageDispatcher.OnDispatchFailed(Apworks.Bus.MessageDispatchEventArgs)">
            <summary>
            Occurs when the message dispatcher failed to dispatch a message.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Apworks.Bus.MessageDispatcher.OnDispatched(Apworks.Bus.MessageDispatchEventArgs)">
            <summary>
            Occurs when the message dispatcher has finished dispatching the message.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Apworks.Bus.MessageDispatcher.CreateAndRegister(Apworks.Config.IConfigSource,System.Type,System.Object[])">
            <summary>
            Creates a message dispatcher and registers all the message handlers
            specified in the <see cref="T:Apworks.Config.IConfigSource"/> instance.
            </summary>
            <param name="configSource">The <see cref="T:Apworks.Config.IConfigSource"/> instance
            that contains the definitions for message handlers.</param>
            <param name="messageDispatcherType">The type of the message dispatcher.</param>
            <param name="args">The arguments that is used for initializing the message dispatcher.</param>
            <returns>A <see cref="T:Apworks.Bus.IMessageDispatcher"/> instance.</returns>
        </member>
        <member name="M:Apworks.Bus.MessageDispatcher.Clear">
            <summary>
            Clears the registration of the message handlers.
            </summary>
        </member>
        <member name="M:Apworks.Bus.MessageDispatcher.DispatchMessage``1(``0)">
            <summary>
            Dispatches the message.
            </summary>
            <param name="message">The message to be dispatched.</param>
        </member>
        <member name="M:Apworks.Bus.MessageDispatcher.Register``1(Apworks.IHandler{``0})">
            <summary>
            Registers a message handler into message dispatcher.
            </summary>
            <typeparam name="T">The type of the message.</typeparam>
            <param name="handler">The handler to be registered.</param>
        </member>
        <member name="M:Apworks.Bus.MessageDispatcher.UnRegister``1(Apworks.IHandler{``0})">
            <summary>
            Unregisters a message handler from the message dispatcher.
            </summary>
            <typeparam name="T">The type of the message.</typeparam>
            <param name="handler">The handler to be registered.</param>
        </member>
        <member name="E:Apworks.Bus.MessageDispatcher.Dispatching">
            <summary>
            Occurs when the message dispatcher is going to dispatch a message.
            </summary>
        </member>
        <member name="E:Apworks.Bus.MessageDispatcher.DispatchFailed">
            <summary>
            Occurs when the message dispatcher failed to dispatch a message.
            </summary>
        </member>
        <member name="E:Apworks.Bus.MessageDispatcher.Dispatched">
            <summary>
            Occurs when the message dispatcher has finished dispatching the message.
            </summary>
        </member>
        <member name="T:Apworks.Bus.RegisterDispatchAttribute">
            <summary>
            Represents that the instances of the decorated interfaces
            can be registered in a message dispatcher.
            </summary>
        </member>
        <member name="T:Apworks.Config.AppConfigSource">
            <summary>
            Represents the configuration source that uses the application/web configuration file.
            </summary>
        </member>
        <member name="T:Apworks.Config.IConfigSource">
            <summary>
            Represents that the implemented classes are configuration sources for Apworks framework.
            </summary>
        </member>
        <member name="P:Apworks.Config.IConfigSource.Config">
            <summary>
            Gets the instance of <see cref="T:Apworks.Config.ApworksConfigSection"/> class.
            </summary>
        </member>
        <member name="F:Apworks.Config.AppConfigSource.DefaultConfigSection">
            <summary>
            Represents the default name of the configuration section used by Apworks framework.
            </summary>
        </member>
        <member name="M:Apworks.Config.AppConfigSource.#ctor">
            <summary>
            Initializes a new instance of <c>AppConfigSource</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Config.AppConfigSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of <c>AppConfigSource</c> class.
            </summary>
            <param name="configSectionName">The name of the Configuration Section.</param>
        </member>
        <member name="P:Apworks.Config.AppConfigSource.Config">
            <summary>
            Gets the instance of <see cref="T:Apworks.Config.ApworksConfigSection"/> class.
            </summary>
        </member>
        <member name="T:Apworks.Config.ConfigException">
            <summary>
            Represents errors that occur when configuring Apworks framework.
            </summary>
        </member>
        <member name="M:Apworks.Config.ConfigException.#ctor">
            <summary>
            Initializes a new instance of the <c>ConfigException</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Config.ConfigException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>ConfigException</c> class with the specified
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apworks.Config.ConfigException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>ConfigException</c> class with the specified
            error message and the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:Apworks.Config.ConfigException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <c>ConfigException</c> class with the specified
            string formatter and the arguments that are used for formatting the message which
            describes the error.
            </summary>
            <param name="format">The string formatter which is used for formatting the error message.</param>
            <param name="args">The arguments that are used by the formatter to build the error message.</param>
        </member>
        <member name="T:Apworks.Config.RegularConfigSource">
            <summary>
            Represents the configuration source that uses the programming
            code to initialize the Apworks configuration section.
            </summary>
        </member>
        <member name="M:Apworks.Config.RegularConfigSource.#ctor">
            <summary>
            Initializes a new instance of <c>RegularConfigSource</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Config.RegularConfigSource.AddHandler(System.String,Apworks.Config.HandlerKind,Apworks.Config.HandlerSourceType,System.String)">
            <summary>
            Adds a command or event handler to the ConfigSource.
            </summary>
            <param name="name">Name of the handler to be added.</param>
            <param name="kind">The <see cref="T:Apworks.Config.HandlerKind"/> value which
            represents the kind of the message.</param>
            <param name="sourceType">The <see cref="T:Apworks.Config.HandlerSourceType"/> value
            which indicates where the handler exists. This could be either a type or an assembly.</param>
            <param name="source">The identifier of the source, for <c>sourceType==HandlerSourceType.Type</c>,
            this value should be the name of the type; for <c>sourceType==HandlerSourceType.Assembly</c>,
            this value should be the name of the assembly.</param>
        </member>
        <member name="M:Apworks.Config.RegularConfigSource.AddException(System.Type,Apworks.Config.ExceptionHandlingBehavior)">
            <summary>
            Adds an exception definition to the ConfigSource.
            </summary>
            <param name="exceptionType">The type of the exception to be guarded.</param>
            <param name="behavior">The exception handling behavior.</param>
        </member>
        <member name="M:Apworks.Config.RegularConfigSource.AddExceptionHandler(System.Type,System.Type)">
            <summary>
            Adds an exception handler definition to the ConfigSource.
            </summary>
            <param name="exceptionType">The type of the exception being handled.</param>
            <param name="handlerType">The type of the exception handler.</param>
        </member>
        <member name="M:Apworks.Config.RegularConfigSource.AddInterceptor(System.String,System.Type)">
            <summary>
            Adds an interceptor to the current ConfigSource.
            </summary>
            <param name="name">The name of the interceptor.</param>
            <param name="interceptorType">The type of the interceptor.</param>
        </member>
        <member name="M:Apworks.Config.RegularConfigSource.AddInterceptorRef(System.Type,System.Reflection.MethodInfo,System.String)">
            <summary>
            Adds an interception reference to the specified contract and the method.
            </summary>
            <param name="contractType">The type of the contract.</param>
            <param name="method">The method.</param>
            <param name="name">The name of the interception reference.</param>
        </member>
        <member name="P:Apworks.Config.RegularConfigSource.Application">
            <summary>
            Gets or sets the type of the <see cref="T:Apworks.Application.IApp"/> instance.
            </summary>
        </member>
        <member name="P:Apworks.Config.RegularConfigSource.IdentityGenerator">
            <summary>
            Gets or sets the type of the identity generator.
            </summary>
        </member>
        <member name="P:Apworks.Config.RegularConfigSource.SequenceGenerator">
            <summary>
            Gets or sets the type of the sequence generator.
            </summary>
        </member>
        <member name="P:Apworks.Config.RegularConfigSource.ObjectContainer">
            <summary>
            Gets or sets the type of the object container.
            </summary>
        </member>
        <member name="P:Apworks.Config.RegularConfigSource.InitObjectContainerFromConfigFile">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value which indicates whether
            the object container should be initialized by the application/web configuration file.
            </summary>
        </member>
        <member name="P:Apworks.Config.RegularConfigSource.ObjectContainerSectionName">
            <summary>
            Gets or sets the name of the ConfigurationSection in the application/web configuration
            file with which the object container should be initialized.
            </summary>
        </member>
        <member name="P:Apworks.Config.RegularConfigSource.EventSerializer">
            <summary>
            Gets or sets the type of the event serializer.
            </summary>
        </member>
        <member name="P:Apworks.Config.RegularConfigSource.SnapshotSerializer">
            <summary>
            Gets or sets the type of the snapshot serializer.
            </summary>
        </member>
        <member name="P:Apworks.Config.RegularConfigSource.Config">
            <summary>
            Gets the instance of <see cref="T:Apworks.Config.ApworksConfigSection"/> class.
            </summary>
        </member>
        <member name="T:Apworks.HandlesAttribute">
            <summary>
            Represents that the decorated methods are inline domain event handlers.
            </summary>
        </member>
        <member name="M:Apworks.HandlesAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <c>HandlesAttribute</c> class.
            </summary>
            <param name="domainEventType">The type of the domain event that can be handled by
            the decorated method.</param>
        </member>
        <member name="P:Apworks.HandlesAttribute.DomainEventType">
            <summary>
            Gets or sets the type of the domain event that can be handled by
            the decorated method.
            </summary>
        </member>
        <member name="T:Apworks.Events.Storage.RdbmsDomainEventStorage`1">
            <summary>
            Represents the base class for domain event storages which are built based on the
            relational database systems.
            </summary>
            <typeparam name="TRdbmsStorage">The type of the <c>RdbmsStorage</c> which provides
            the required operations on the external storage mechanism.</typeparam>
        </member>
        <member name="T:Apworks.Events.Storage.IDomainEventStorage">
            <summary>
            Represents that the implemented classes are domain event stores that handle
            the operations for saving and retrieving domain events.
            </summary>
        </member>
        <member name="M:Apworks.Events.Storage.IDomainEventStorage.SaveEvent(Apworks.Events.IDomainEvent)">
            <summary>
            Saves the specified domain event to the event storage.
            </summary>
            <param name="domainEvent">The domain event to be saved.</param>
        </member>
        <member name="M:Apworks.Events.Storage.IDomainEventStorage.LoadEvents(System.Type,System.Guid)">
            <summary>
            Loads all the domain events for the specific aggregate root from the storage.
            </summary>
            <param name="aggregateRootType">The type of the aggregate root.</param>
            <param name="id">The identifier of the aggregate root.</param>
            <returns>A list of domain events for the specific aggregate root.</returns>
        </member>
        <member name="M:Apworks.Events.Storage.IDomainEventStorage.LoadEvents(System.Type,System.Guid,System.Int64)">
            <summary>
            Loads all the domain events for the specific aggregate root from the storage.
            </summary>
            <param name="aggregateRootType">The type of the aggregate root.</param>
            <param name="id">The identifier of the aggregate root.</param>
            <param name="version">The version number.</param>
            <returns>A list of domain events for the specific aggregate root which occur just after
            the given version number.</returns>
        </member>
        <member name="M:Apworks.Events.Storage.RdbmsDomainEventStorage`1.#ctor(System.String,Apworks.Storage.IStorageMappingResolver)">
            <summary>
            Initializes a new instance of the <c>RdbmsDomainEventStorage&lt;TRdbmsStorage&gt;</c> class.
            </summary>
            <param name="connectionString">The connection string which is used when connecting
            to the relational database system. For more information about the connection strings
            for different database providers, please refer to http://www.connectionstrings.com.
            </param>
            <param name="mappingResolver">The instance of the mapping resolver which resolves the table and column mappings
            between data objects and the relational database system.</param>
        </member>
        <member name="M:Apworks.Events.Storage.RdbmsDomainEventStorage`1.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">A <see cref="T:System.Boolean"/> value which indicates whether
            the object should be disposed explicitly.</param>
        </member>
        <member name="M:Apworks.Events.Storage.RdbmsDomainEventStorage`1.SaveEvent(Apworks.Events.IDomainEvent)">
            <summary>
            Saves the specified domain event to the event storage.
            </summary>
            <param name="domainEvent">The domain event to be saved.</param>
        </member>
        <member name="M:Apworks.Events.Storage.RdbmsDomainEventStorage`1.LoadEvents(System.Type,System.Guid)">
            <summary>
            Loads all the domain events for the specific aggregate root from the storage.
            </summary>
            <param name="aggregateRootType">The type of the aggregate root.</param>
            <param name="id">The identifier of the aggregate root.</param>
            <returns>A list of domain events for the specific aggregate root.</returns>
        </member>
        <member name="M:Apworks.Events.Storage.RdbmsDomainEventStorage`1.LoadEvents(System.Type,System.Guid,System.Int64)">
            <summary>
            Loads all the domain events for the specific aggregate root from the storage.
            </summary>
            <param name="aggregateRootType">The type of the aggregate root.</param>
            <param name="id">The identifier of the aggregate root.</param>
            <param name="version">The version number.</param>
            <returns>A list of domain events for the specific aggregate root which occur just after
            the given version number.</returns>
        </member>
        <member name="M:Apworks.Events.Storage.RdbmsDomainEventStorage`1.Commit">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:Apworks.Events.Storage.RdbmsDomainEventStorage`1.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
        </member>
        <member name="P:Apworks.Events.Storage.RdbmsDomainEventStorage`1.ConnectionString">
            <summary>
            Gets the connection string which is used when connecting
            to the relational database system. For more information about the connection strings
            for different database providers, please refer to http://www.connectionstrings.com.
            </summary>
        </member>
        <member name="P:Apworks.Events.Storage.RdbmsDomainEventStorage`1.MappingResolver">
            <summary>
            Gets the instance of the mapping resolver which resolves the table and column mappings
            between data objects and relational database system.
            </summary>
        </member>
        <member name="P:Apworks.Events.Storage.RdbmsDomainEventStorage`1.DistributedTransactionSupported">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work could support Microsoft Distributed
            Transaction Coordinator (MS-DTC).
            </summary>
        </member>
        <member name="P:Apworks.Events.Storage.RdbmsDomainEventStorage`1.Committed">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work was successfully committed.
            </summary>
        </member>
        <member name="T:Apworks.Interception.AdditionalInterfaceToProxyAttribute">
            <summary>
            Represents that the decorated classes are requiring additional interfaces
            to be intercepted when Castle Dynamic Proxy is creating the proxy objects
            for these classes.
            </summary>
        </member>
        <member name="M:Apworks.Interception.AdditionalInterfaceToProxyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <c>AdditionalInterfaceToProxyAttribute</c>.
            </summary>
            <param name="intfType">The type of the interface that needs to be intercepted
            when the proxy object is create.</param>
        </member>
        <member name="P:Apworks.Interception.AdditionalInterfaceToProxyAttribute.InterfaceType">
            <summary>
            Gets or sets the type of the interface that needs to be intercepted
            when the proxy object is created.
            </summary>
        </member>
        <member name="T:Apworks.Interception.BaseTypeForInterfaceProxyAttribute">
            <summary>
            Represents that the decorated classes are requiring a base type
            when its interface is proxied by the Castle dynamic proxy mechanism.
            </summary>
            <remarks>By using this attribute on the class, when the Castle Dynamic
            Proxy framework is creating the proxy class for this class' interface,
            the base type specified in this attribute will be used as the base type
            for the created proxy class.</remarks>
        </member>
        <member name="M:Apworks.Interception.BaseTypeForInterfaceProxyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <c>BaseTypeForInterfaceProxyAttribute</c> class.
            </summary>
            <param name="baseType">The base type from which the generated proxy object
            should derive.</param>
        </member>
        <member name="P:Apworks.Interception.BaseTypeForInterfaceProxyAttribute.BaseType">
            <summary>
            Gets or sets the base type from which the generated proxy object
            should derive.
            </summary>
        </member>
        <member name="T:Apworks.Interception.ExceptionHandlingInterceptor">
            <summary>
            Represents the interceptor for handling exceptions.
            </summary>
        </member>
        <member name="M:Apworks.Interception.ExceptionHandlingInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Performs the intercept actions.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="T:Apworks.Interception.InterceptorSelector">
            <summary>
            Represents the interceptor selector.
            </summary>
        </member>
        <member name="M:Apworks.Interception.InterceptorSelector.SelectInterceptors(System.Type,System.Reflection.MethodInfo,Castle.DynamicProxy.IInterceptor[])">
            <summary>
            Selects the interceptors for the given type and method.
            </summary>
            <param name="type">The type.</param>
            <param name="method">The method.</param>
            <param name="interceptors">The origin interceptor collection.</param>
            <returns>An array of interceptors specific for the given type and method.</returns>
        </member>
        <member name="T:Apworks.ObjectContainer">
            <summary>
            Represents the base class for object containers.
            </summary>
        </member>
        <member name="T:Apworks.IObjectContainer">
            <summary>
            Represents that the implemented classes are object containers.
            </summary>
        </member>
        <member name="M:Apworks.IObjectContainer.InitializeFromConfigFile(System.String)">
            <summary>
            Initializes the object container by using the application/web config file.
            </summary>
            <param name="configSectionName">The name of the ConfigurationSection in the application/web config file
            which is used for initializing the object container.</param>
        </member>
        <member name="M:Apworks.IObjectContainer.GetWrappedContainer``1">
            <summary>
            Gets the wrapped container instance.
            </summary>
            <typeparam name="T">The type of the wrapped container.</typeparam>
            <returns>The instance of the wrapped container.</returns>
        </member>
        <member name="M:Apworks.ObjectContainer.#ctor">
            <summary>
            Initializes a new instance of <c>ObjectContainer</c> class.
            </summary>
        </member>
        <member name="M:Apworks.ObjectContainer.DoGetService``1">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <typeparam name="T">The type of the service object.</typeparam>
            <returns>The instance of the service object.</returns>
        </member>
        <member name="M:Apworks.ObjectContainer.DoGetService``1(System.Object)">
            <summary>
            Gets the service object of the specified type, with overrided
            arguments provided.
            </summary>
            <typeparam name="T">The type of the service object.</typeparam>
            <param name="overridedArguments">The overrided arguments to be used when getting the service.</param>
            <returns>The instance of the service object.</returns>
        </member>
        <member name="M:Apworks.ObjectContainer.DoGetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type serviceType.-or- null if there is no service object
            of type serviceType.</returns>
        </member>
        <member name="M:Apworks.ObjectContainer.DoGetService(System.Type,System.Object)">
            <summary>
            Gets the service object of the specified type, with overrided
            arguments provided.
            </summary>
            <param name="serviceType">The type of the service to get.</param>
            <param name="overridedArguments">The overrided arguments to be used when getting the service.</param>
            <returns>The instance of the service object.</returns>
        </member>
        <member name="M:Apworks.ObjectContainer.DoResolveAll(System.Type)">
            <summary>
            Resolves all the objects from the specified type.
            </summary>
            <param name="serviceType">The type of the objects to be resolved.</param>
            <returns>A <see cref="T:System.Array"/> object which contains all the objects resolved.</returns>
        </member>
        <member name="M:Apworks.ObjectContainer.DoResolveAll``1">
            <summary>
            Resolves all the objects from the specified type.
            </summary>
            <typeparam name="T">The type of the objects to be resolved.</typeparam>
            <returns>A <see cref="T:System.Array"/> object which contains all the objects resolved.</returns>
        </member>
        <member name="M:Apworks.ObjectContainer.InitializeFromConfigFile(System.String)">
            <summary>
            Initializes the object container by using the application/web config file.
            </summary>
            <param name="configSectionName">The name of the ConfigurationSection in the application/web config file
            which is used for initializing the object container.</param>
        </member>
        <member name="M:Apworks.ObjectContainer.GetWrappedContainer``1">
            <summary>
            Gets the wrapped container instance.
            </summary>
            <typeparam name="T">The type of the wrapped container.</typeparam>
            <returns>The instance of the wrapped container.</returns>
        </member>
        <member name="M:Apworks.ObjectContainer.GetService``1">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <typeparam name="T">The type of the service object.</typeparam>
            <returns>The instance of the service object.</returns>
        </member>
        <member name="M:Apworks.ObjectContainer.GetService``1(System.Object)">
            <summary>
            Gets the service object of the specified type, with overrided
            arguments provided.
            </summary>
            <typeparam name="T">The type of the service object.</typeparam>
            <param name="overridedArguments">The overrided arguments to be used when getting the service.</param>
            <returns>The instance of the service object.</returns>
        </member>
        <member name="M:Apworks.ObjectContainer.GetService(System.Type,System.Object)">
            <summary>
            Gets the service object of the specified type, with overrided
            arguments provided.
            </summary>
            <param name="serviceType">The type of the service to get.</param>
            <param name="overridedArguments">The overrided arguments to be used when getting the service.</param>
            <returns>The instance of the service object.</returns>
        </member>
        <member name="M:Apworks.ObjectContainer.ResolveAll(System.Type)">
            <summary>
            Resolves all the objects from the specified type.
            </summary>
            <param name="serviceType">The type of the objects to be resolved.</param>
            <returns>A <see cref="T:System.Array"/> object which contains all the objects resolved.</returns>
        </member>
        <member name="M:Apworks.ObjectContainer.ResolveAll``1">
            <summary>
            Resolves all the objects from the specified type.
            </summary>
            <typeparam name="T">The type of the objects to be resolved.</typeparam>
            <returns>A <see cref="T:System.Array"/> object which contains all the objects resolved.</returns>
        </member>
        <member name="M:Apworks.ObjectContainer.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type serviceType.-or- null if there is no service object
            of type serviceType.</returns>
        </member>
        <member name="M:Apworks.ObjectContainer.Registered``1">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates whether the given type
            has been registered to the service locator.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <returns>True if the type has been registered, otherwise, false.</returns>
        </member>
        <member name="M:Apworks.ObjectContainer.Registered(System.Type)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates whether the given type
            has been registered to the service locator.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type has been registered, otherwise, false.</returns>
        </member>
        <member name="T:Apworks.Repositories.EventPublisherDomainRepository">
            <summary>
            Represents the base class for domain repositories that would publish
            domain events to the event bus while saving the aggregates.
            </summary>
        </member>
        <member name="T:Apworks.Repositories.DomainRepository">
            <summary>
            Represents the base class for domain repositories.
            </summary>
        </member>
        <member name="T:Apworks.Repositories.IDomainRepository">
            <summary>
            Represents that the implemented classes are domain repositories.
            </summary>
        </member>
        <member name="M:Apworks.Repositories.IDomainRepository.Get``1(System.Guid)">
            <summary>
            Gets the instance of the aggregate root with the specified identifier.
            </summary>
            <param name="id">The identifier of the aggregate root.</param>
            <returns>The instance of the aggregate root with the specified identifier.</returns>
        </member>
        <member name="M:Apworks.Repositories.IDomainRepository.Save``1(``0)">
            <summary>
            Saves the aggregate represented by the specified aggregate root to the repository.
            </summary>
            <param name="aggregateRoot">The aggregate root that is going to be saved.</param>
        </member>
        <member name="M:Apworks.Repositories.DomainRepository.#ctor">
            <summary>
            Initializes a new instance of <c>DomainRepository</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Repositories.DomainRepository.DoCommit">
            <summary>
            Commits the changes registered in the domain repository.
            </summary>
        </member>
        <member name="M:Apworks.Repositories.DomainRepository.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">A <see cref="T:System.Boolean"/> value which indicates whether
            the object should be disposed explicitly.</param>
        </member>
        <member name="M:Apworks.Repositories.DomainRepository.CreateAggregateRootInstance``1">
            <summary>
            Creates a new instance of the aggregate root regardless whether a public
            default constructor is provided.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <returns>A newly created instance for the specified aggregate root type.</returns>
        </member>
        <member name="M:Apworks.Repositories.DomainRepository.Get``1(System.Guid)">
            <summary>
            Gets the instance of the aggregate root with the specified identifier.
            </summary>
            <param name="id">The identifier of the aggregate root.</param>
            <returns>The instance of the aggregate root with the specified identifier.</returns>
        </member>
        <member name="M:Apworks.Repositories.DomainRepository.Save``1(``0)">
            <summary>
            Saves the aggregate represented by the specified aggregate root to the repository.
            </summary>
            <param name="aggregateRoot">The aggregate root that is going to be saved.</param>
        </member>
        <member name="M:Apworks.Repositories.DomainRepository.Commit">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:Apworks.Repositories.DomainRepository.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.DomainRepository.SaveHash">
            <summary>
            Gets the list which contains the aggregate roots being saved.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.DomainRepository.DelegatedUpdateAndClearAggregateRoot">
            <summary>
            Gets the delegated method which updates the version on aggregate root
            and clears all its uncommitted events.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.DomainRepository.DistributedTransactionSupported">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work could support Microsoft Distributed
            Transaction Coordinator (MS-DTC).
            </summary>
        </member>
        <member name="P:Apworks.Repositories.DomainRepository.Committed">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work was successfully committed.
            </summary>
        </member>
        <member name="M:Apworks.Repositories.EventPublisherDomainRepository.#ctor(Apworks.Bus.IEventBus)">
            <summary>
            Initializes a new instance of <c>EventPublisherDomainRepository</c> class.
            </summary>
            <param name="eventBus">The <see cref="T:Apworks.Bus.IEventBus"/> instance
            to which the domain events are published.</param>
        </member>
        <member name="M:Apworks.Repositories.EventPublisherDomainRepository.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">A <see cref="T:System.Boolean"/> value which indicates whether
            the object should be disposed explicitly.</param>
        </member>
        <member name="M:Apworks.Repositories.EventPublisherDomainRepository.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.EventPublisherDomainRepository.EventBus">
            <summary>
            Gets the <see cref="T:Apworks.Bus.IEventBus"/> instance to which the domain events are published.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.EventPublisherDomainRepository.DistributedTransactionSupported">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work could support Microsoft Distributed
            Transaction Coordinator (MS-DTC).
            </summary>
        </member>
        <member name="T:Apworks.Repositories.RegularDomainRepository">
            <summary>
            Represents the domain repository that uses the <see cref="T:Apworks.Repositories.IRepositoryContext"/>
            and <see cref="T:Apworks.Repositories.IRepository`1"/> instances to perform aggregate
            operations.
            </summary>
        </member>
        <member name="M:Apworks.Repositories.RegularDomainRepository.#ctor(Apworks.Repositories.IRepositoryContext)">
            <summary>
            Initializes a new instance of <c>RegularDomainRepository</c> class.
            </summary>
            <param name="context">The <see cref="T:Apworks.Repositories.IRepositoryContext"/> instance to which the 
            <c>RegularDomainRepository</c> forwards the repository operations.</param>
        </member>
        <member name="M:Apworks.Repositories.RegularDomainRepository.DoCommit">
            <summary>
            Commits the changes registered in the domain repository.
            </summary>
        </member>
        <member name="M:Apworks.Repositories.RegularDomainRepository.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">A <see cref="T:System.Boolean"/> value which indicates whether
            the object should be disposed explicitly.</param>
        </member>
        <member name="M:Apworks.Repositories.RegularDomainRepository.Get``1(System.Guid)">
            <summary>
            Gets the instance of the aggregate root with the specified identifier.
            </summary>
            <param name="id">The identifier of the aggregate root.</param>
            <returns>The instance of the aggregate root with the specified identifier.</returns>
        </member>
        <member name="M:Apworks.Repositories.RegularDomainRepository.Save``1(``0)">
            <summary>
            Saves the aggregate represented by the specified aggregate root to the repository.
            </summary>
            <param name="aggregateRoot">The aggregate root that is going to be saved.</param>
        </member>
        <member name="M:Apworks.Repositories.RegularDomainRepository.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.RegularDomainRepository.Context">
            <summary>
            Gets the <see cref="T:Apworks.Repositories.IRepositoryContext"/> instance.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.RegularDomainRepository.DistributedTransactionSupported">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work could support Microsoft Distributed
            Transaction Coordinator (MS-DTC).
            </summary>
        </member>
        <member name="T:Apworks.Repositories.RegularEventPublisherDomainRepository">
            <summary>
            Represents the domain repository that uses the <see cref="T:Apworks.Repositories.IRepositoryContext"/>
            and <see cref="T:Apworks.Repositories.IRepository`1"/> instances to perform aggregate
            operations and publishes the domain events to the specified event bus.
            </summary>
        </member>
        <member name="M:Apworks.Repositories.RegularEventPublisherDomainRepository.#ctor(Apworks.Repositories.IRepositoryContext,Apworks.Bus.IEventBus)">
            <summary>
            Initializes a new instance of <c>RegularEventPublisherDomainRepository</c> class.
            </summary>
            <param name="context">The <see cref="T:Apworks.Repositories.IRepositoryContext"/>instance
            that is used by the current domain repository to perform aggregate operations.</param>
            <param name="eventBus">The event bus to which the domain events are published.</param>
        </member>
        <member name="M:Apworks.Repositories.RegularEventPublisherDomainRepository.DoCommit">
            <summary>
            Commits the changes registered in the domain repository.
            </summary>
        </member>
        <member name="M:Apworks.Repositories.RegularEventPublisherDomainRepository.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">A <see cref="T:System.Boolean"/> value which indicates whether
            the object should be disposed explicitly.</param>
        </member>
        <member name="M:Apworks.Repositories.RegularEventPublisherDomainRepository.Get``1(System.Guid)">
            <summary>
            Gets the instance of the aggregate root with the specified identifier.
            </summary>
            <param name="id">The identifier of the aggregate root.</param>
            <returns>The instance of the aggregate root with the specified identifier.</returns>
        </member>
        <member name="M:Apworks.Repositories.RegularEventPublisherDomainRepository.Save``1(``0)">
            <summary>
            Saves the aggregate represented by the specified aggregate root to the repository.
            </summary>
            <param name="aggregateRoot">The aggregate root that is going to be saved.</param>
        </member>
        <member name="M:Apworks.Repositories.RegularEventPublisherDomainRepository.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.RegularEventPublisherDomainRepository.Context">
            <summary>
            Gets the <see cref="T:Apworks.Repositories.IRepositoryContext"/>instance
            that is used by the current domain repository to perform aggregate operations.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.RegularEventPublisherDomainRepository.DistributedTransactionSupported">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work could support Microsoft Distributed
            Transaction Coordinator (MS-DTC).
            </summary>
        </member>
        <member name="T:Apworks.ServiceLocator">
            <summary>
            Represents the service locator which locates a service with the given type.
            </summary>
        </member>
        <member name="M:Apworks.ServiceLocator.#ctor">
            <summary>
            Initializes a new instance of <c>ServiceLocator</c> class.
            </summary>
        </member>
        <member name="M:Apworks.ServiceLocator.GetService``1">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <typeparam name="T">The type of the service object.</typeparam>
            <returns>The instance of the service object.</returns>
        </member>
        <member name="M:Apworks.ServiceLocator.GetService``1(System.Object)">
            <summary>
            Gets the service object of the specified type, with overrided
            arguments provided.
            </summary>
            <typeparam name="T">The type of the service object.</typeparam>
            <param name="overridedArguments">The overrided arguments to be used when getting the service.</param>
            <returns>The instance of the service object.</returns>
        </member>
        <member name="M:Apworks.ServiceLocator.GetService(System.Type,System.Object)">
            <summary>
            Gets the service object of the specified type, with overrided
            arguments provided.
            </summary>
            <param name="serviceType">The type of the service to get.</param>
            <param name="overridedArguments">The overrided arguments to be used when getting the service.</param>
            <returns>The instance of the service object.</returns>
        </member>
        <member name="M:Apworks.ServiceLocator.ResolveAll(System.Type)">
            <summary>
            Resolves all the objects from the specified type.
            </summary>
            <param name="serviceType">The type of the objects to be resolved.</param>
            <returns>A <see cref="T:System.Array"/> object which contains all the objects resolved.</returns>
        </member>
        <member name="M:Apworks.ServiceLocator.ResolveAll``1">
            <summary>
            Resolves all the objects from the specified type.
            </summary>
            <typeparam name="T">The type of the objects to be resolved.</typeparam>
            <returns>A <see cref="T:System.Array"/> object which contains all the objects resolved.</returns>
        </member>
        <member name="M:Apworks.ServiceLocator.Registered``1">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates whether the given type
            has been registered to the service locator.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <returns>True if the type has been registered, otherwise, false.</returns>
        </member>
        <member name="M:Apworks.ServiceLocator.Registered(System.Type)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates whether the given type
            has been registered to the service locator.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type has been registered, otherwise, false.</returns>
        </member>
        <member name="M:Apworks.ServiceLocator.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">The type of the service to get.</param>
            <returns>The instance of the service object.</returns>
        </member>
        <member name="P:Apworks.ServiceLocator.Instance">
            <summary>
            Gets the current instance of <c>ServiceLocator</c> class.
            </summary>
        </member>
        <member name="T:Apworks.Snapshots.Providers.EventNumberSnapshotProvider">
            <summary>
            Represents the snapshot provider that takes the number of stored domain events
            as the strategy to implement its snapshot functionalities.
            </summary>
        </member>
        <member name="T:Apworks.Snapshots.Providers.StorageBasedSnapshotProvider">
            <summary>
            Represents the snapshot providers that utilize both event storage and snapshot storage to
            implement their functionalities.
            </summary>
        </member>
        <member name="T:Apworks.Snapshots.Providers.SnapshotProvider">
            <summary>
            Represents the base class for all snapshot providers.
            </summary>
        </member>
        <member name="T:Apworks.Snapshots.Providers.ISnapshotProvider">
            <summary>
            Represents that the implemented classes are snapshot providers.
            </summary>
        </member>
        <member name="M:Apworks.Snapshots.Providers.ISnapshotProvider.CanCreateOrUpdateSnapshot(Apworks.ISourcedAggregateRoot)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates
            whether the snapshot should be created or updated for the given
            aggregate root.
            </summary>
            <param name="aggregateRoot">The aggregate root.</param>
            <returns>True if the snapshot should be created or updated, 
            otherwise false.</returns>
        </member>
        <member name="M:Apworks.Snapshots.Providers.ISnapshotProvider.CreateOrUpdateSnapshot(Apworks.ISourcedAggregateRoot)">
            <summary>
            Creates or updates the snapshot for the given aggregate root.
            </summary>
            <param name="aggregateRoot">The aggregate root on which the snapshot is created or updated.</param>
        </member>
        <member name="M:Apworks.Snapshots.Providers.ISnapshotProvider.GetSnapshot(System.Type,System.Guid)">
            <summary>
            Gets the snapshot for the aggregate root with the given type and identifier.
            </summary>
            <param name="aggregateRootType">The type of the aggregate root.</param>
            <param name="id">The identifier of the aggregate root.</param>
            <returns>The snapshot instance.</returns>
        </member>
        <member name="M:Apworks.Snapshots.Providers.ISnapshotProvider.HasSnapshot(System.Type,System.Guid)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates whether the snapshot
            exists for the aggregate root with the given type and identifier.
            </summary>
            <param name="aggregateRootType">The type of the aggregate root.</param>
            <param name="id">The identifier of the aggregate root.</param>
            <returns>True if the snapshot exists, otherwise false.</returns>
        </member>
        <member name="P:Apworks.Snapshots.Providers.ISnapshotProvider.Option">
            <summary>
            Gets a <see cref="T:Apworks.Snapshots.Providers.SnapshotProviderOption"/> value
            which indicates the option when using the snapshot functionalities.
            </summary>
        </member>
        <member name="M:Apworks.Snapshots.Providers.SnapshotProvider.#ctor(Apworks.Snapshots.Providers.SnapshotProviderOption)">
            <summary>
            Initializes a new instance of <c>SnapshotProvider</c> class.
            </summary>
            <param name="option">The <see cref="T:Apworks.Snapshots.Providers.SnapshotProviderOption"/> value
            which is used for initializing the <c>SnapshotProvider</c> class.</param>
        </member>
        <member name="M:Apworks.Snapshots.Providers.SnapshotProvider.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">A <see cref="T:System.Boolean"/> value which indicates whether
            the object should be disposed explicitly.</param>
        </member>
        <member name="M:Apworks.Snapshots.Providers.SnapshotProvider.CanCreateOrUpdateSnapshot(Apworks.ISourcedAggregateRoot)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates
            whether the snapshot should be created or updated for the given
            aggregate root.
            </summary>
            <param name="aggregateRoot">The aggregate root.</param>
            <returns>True if the snapshot should be created or updated, 
            otherwise false.</returns>
        </member>
        <member name="M:Apworks.Snapshots.Providers.SnapshotProvider.CreateOrUpdateSnapshot(Apworks.ISourcedAggregateRoot)">
            <summary>
            Creates or updates the snapshot for the given aggregate root.
            </summary>
            <param name="aggregateRoot">The aggregate root on which the snapshot is created or updated.</param>
        </member>
        <member name="M:Apworks.Snapshots.Providers.SnapshotProvider.GetSnapshot(System.Type,System.Guid)">
            <summary>
            Gets the snapshot for the aggregate root with the given type and identifier.
            </summary>
            <param name="aggregateRootType">The type of the aggregate root.</param>
            <param name="id">The identifier of the aggregate root.</param>
            <returns>The snapshot instance.</returns>
        </member>
        <member name="M:Apworks.Snapshots.Providers.SnapshotProvider.HasSnapshot(System.Type,System.Guid)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates whether the snapshot
            exists for the aggregate root with the given type and identifier.
            </summary>
            <param name="aggregateRootType">The type of the aggregate root.</param>
            <param name="id">The identifier of the aggregate root.</param>
            <returns>True if the snapshot exists, otherwise false.</returns>
        </member>
        <member name="M:Apworks.Snapshots.Providers.SnapshotProvider.Commit">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:Apworks.Snapshots.Providers.SnapshotProvider.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.Providers.SnapshotProvider.Option">
            <summary>
            Gets a <see cref="T:Apworks.Snapshots.Providers.SnapshotProviderOption"/> value
            which indicates the option when using the snapshot functionalities.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.Providers.SnapshotProvider.DistributedTransactionSupported">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work could support Microsoft Distributed
            Transaction Coordinator (MS-DTC).
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.Providers.SnapshotProvider.Committed">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work was successfully committed.
            </summary>
        </member>
        <member name="M:Apworks.Snapshots.Providers.StorageBasedSnapshotProvider.#ctor(Apworks.Storage.IStorage,Apworks.Storage.IStorage,Apworks.Snapshots.Providers.SnapshotProviderOption)">
            <summary>
            Initializes a new instance of <c>StorageBasedSnapshotProvider</c> class.
            </summary>
            <param name="eventStorage">The instance of the event storage that is used for initializing the <c>StorageBasedSnapshotProvider</c> class.</param>
            <param name="snapshotStorage">The instance of the snapshot storage this is used for initializing the <c>StorageBasedSnapshotProvider</c> class.</param>
            <param name="option">The snapshot provider option.</param>
        </member>
        <member name="M:Apworks.Snapshots.Providers.StorageBasedSnapshotProvider.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">A <see cref="T:System.Boolean"/> value which indicates whether
            the object should be disposed explicitly.</param>
        </member>
        <member name="P:Apworks.Snapshots.Providers.StorageBasedSnapshotProvider.EventStorage">
            <summary>
            Gets the instance of the event storage used by <c>StorageBasedSnapshotProvider</c>.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.Providers.StorageBasedSnapshotProvider.SnapshotStorage">
            <summary>
            Gets the instance of the snapshot storage used by <c>StorageBasedSnapshotProvider</c>.
            </summary>
        </member>
        <member name="M:Apworks.Snapshots.Providers.EventNumberSnapshotProvider.#ctor(Apworks.Storage.IStorage,Apworks.Storage.IStorage,Apworks.Snapshots.Providers.SnapshotProviderOption,System.Int32)">
            <summary>
            Initializes a new instance of <c>EventNumberSnapshotProvider</c> class.
            </summary>
            <param name="eventStorage">The instance of the event storage that is used for initializing the <c>EventNumberSnapshotProvider</c> class.</param>
            <param name="snapshotStorage">The instance of the snapshot storage this is used for initializing the <c>EventNumberSnapshotProvider</c> class.</param>
            <param name="option">The snapshot provider option.</param>
            <param name="numOfEvents">The maximum number of events.</param>
        </member>
        <member name="M:Apworks.Snapshots.Providers.EventNumberSnapshotProvider.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">A <see cref="T:System.Boolean"/> value which indicates whether
            the object should be disposed explicitly.</param>
        </member>
        <member name="M:Apworks.Snapshots.Providers.EventNumberSnapshotProvider.CanCreateOrUpdateSnapshot(Apworks.ISourcedAggregateRoot)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates
            whether the snapshot should be created or updated for the given
            aggregate root.
            </summary>
            <param name="aggregateRoot">The aggregate root.</param>
            <returns>True if the snapshot should be created or updated, 
            otherwise false.</returns>
        </member>
        <member name="M:Apworks.Snapshots.Providers.EventNumberSnapshotProvider.CreateOrUpdateSnapshot(Apworks.ISourcedAggregateRoot)">
            <summary>
            Creates or updates the snapshot for the given aggregate root.
            </summary>
            <param name="aggregateRoot">The aggregate root on which the snapshot is created or updated.</param>
        </member>
        <member name="M:Apworks.Snapshots.Providers.EventNumberSnapshotProvider.GetSnapshot(System.Type,System.Guid)">
            <summary>
            Gets the snapshot for the aggregate root with the given type and identifier.
            </summary>
            <param name="aggregateRootType">The type of the aggregate root.</param>
            <param name="id">The identifier of the aggregate root.</param>
            <returns>The snapshot instance.</returns>
        </member>
        <member name="M:Apworks.Snapshots.Providers.EventNumberSnapshotProvider.HasSnapshot(System.Type,System.Guid)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates whether the snapshot
            exists for the aggregate root with the given type and identifier.
            </summary>
            <param name="aggregateRootType">The type of the aggregate root.</param>
            <param name="id">The identifier of the aggregate root.</param>
            <returns>True if the snapshot exists, otherwise false.</returns>
        </member>
        <member name="M:Apworks.Snapshots.Providers.EventNumberSnapshotProvider.Commit">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:Apworks.Snapshots.Providers.EventNumberSnapshotProvider.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.Providers.EventNumberSnapshotProvider.NumberOfEvents">
            <summary>
            Gets the maximum number of events.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.Providers.EventNumberSnapshotProvider.DistributedTransactionSupported">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work supports MS-DTC.
            </summary>
        </member>
        <member name="T:Apworks.Snapshots.Providers.EventNumberSnapshotProvider.EventNumberSnapshotMappingKey">
            <summary>
            Represents the class that is used as the dictionary key when
            maintaining the snapshot mappings.
            </summary>
        </member>
        <member name="M:Apworks.Snapshots.Providers.EventNumberSnapshotProvider.EventNumberSnapshotMappingKey.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of <c>EventNumberSnapshotMappingKey</c> class.
            </summary>
            <param name="typeName">The full name of the aggregate root type.</param>
            <param name="id">The aggregate root id.</param>
        </member>
        <member name="M:Apworks.Snapshots.Providers.EventNumberSnapshotProvider.EventNumberSnapshotMappingKey.Equals(System.Object)">
            <summary>
            Checks whether the given object is equal to this object.
            </summary>
            <param name="obj">The given object to be checked.</param>
            <returns>True if the two are equal, otherwise false.</returns>
        </member>
        <member name="M:Apworks.Snapshots.Providers.EventNumberSnapshotProvider.EventNumberSnapshotMappingKey.GetHashCode">
            <summary>
            Gets the hash code of the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apworks.Snapshots.Providers.EventNumberSnapshotProvider.EventNumberSnapshotMappingKey.ToString">
            <summary>
            Gets the string presentation of the current object.
            </summary>
            <returns>The string presentation.</returns>
        </member>
        <member name="M:Apworks.Snapshots.Providers.EventNumberSnapshotProvider.EventNumberSnapshotMappingKey.Equals(Apworks.Snapshots.Providers.EventNumberSnapshotProvider.EventNumberSnapshotMappingKey)">
            <summary>
            Checks whether the given object is equal to this object.
            </summary>
            <param name="other">The given object to be checked.</param>
            <returns>True if the two are equal, otherwise false.</returns>
        </member>
        <member name="P:Apworks.Snapshots.Providers.EventNumberSnapshotProvider.EventNumberSnapshotMappingKey.TypeName">
            <summary>
            Gets the full name of the aggregate root type.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.Providers.EventNumberSnapshotProvider.EventNumberSnapshotMappingKey.Id">
            <summary>
            Gets the aggregate root id.
            </summary>
        </member>
        <member name="T:Apworks.Snapshots.Providers.SuppressedSnapshotProvider">
            <summary>
            Represents the snapshot provider, when it is used, suppresses
            any snapshot functionalities.
            </summary>
        </member>
        <member name="M:Apworks.Snapshots.Providers.SuppressedSnapshotProvider.#ctor">
            <summary>
            Initializes a new instance of <c>SuppressedSnapshotProvider</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Snapshots.Providers.SuppressedSnapshotProvider.CanCreateOrUpdateSnapshot(Apworks.ISourcedAggregateRoot)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates
            whether the snapshot should be created or updated for the given
            aggregate root.
            </summary>
            <param name="aggregateRoot">The aggregate root.</param>
            <returns>True if the snapshot should be created or updated, 
            otherwise false.</returns>
            <remarks>This method always returns false in<c>SuppressedSnapshotProvider</c>
            to prevent the snapshots being created or updated.</remarks>
        </member>
        <member name="M:Apworks.Snapshots.Providers.SuppressedSnapshotProvider.CreateOrUpdateSnapshot(Apworks.ISourcedAggregateRoot)">
            <summary>
            Creates or updates the snapshot for the given aggregate root.
            </summary>
            <param name="aggregateRoot">The aggregate root on which the snapshot is created or updated.</param>
            <remarks>For <c>SuppressedSnapshotProvider</c>, nothing is done in this method.</remarks>
        </member>
        <member name="M:Apworks.Snapshots.Providers.SuppressedSnapshotProvider.GetSnapshot(System.Type,System.Guid)">
            <summary>
            Gets the snapshot for the aggregate root with the given type and identifier.
            </summary>
            <param name="aggregateRootType">The type of the aggregate root.</param>
            <param name="id">The identifier of the aggregate root.</param>
            <returns>The snapshot instance.</returns>
            <remarks>For <c>SuppressedSnapshotProvider</c>, null reference is returned simply indicating
            that no snapshot object is being loaded.</remarks>
        </member>
        <member name="M:Apworks.Snapshots.Providers.SuppressedSnapshotProvider.HasSnapshot(System.Type,System.Guid)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates whether the snapshot
            exists for the aggregate root with the given type and identifier.
            </summary>
            <param name="aggregateRootType">The type of the aggregate root.</param>
            <param name="id">The identifier of the aggregate root.</param>
            <returns>True if the snapshot exists, otherwise false.</returns>
            <remarks>This method always returns false in <c>SuppressedSnapshotProvider</c>
            indicating that, for any aggregate root, there is no snapshot in the system.</remarks>
        </member>
        <member name="M:Apworks.Snapshots.Providers.SuppressedSnapshotProvider.Commit">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:Apworks.Snapshots.Providers.SuppressedSnapshotProvider.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.Providers.SuppressedSnapshotProvider.DistributedTransactionSupported">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work could support Microsoft Distributed
            Transaction Coordinator (MS-DTC).
            </summary>
        </member>
        <member name="T:Apworks.Snapshots.Providers.SnapshotProviderOption">
            <summary>
            Represents the snapshot provider option.
            </summary>
        </member>
        <member name="F:Apworks.Snapshots.Providers.SnapshotProviderOption.Immediate">
            <summary>
            Indicates that immediate snapshot create/update should
            be performed.
            </summary>
        </member>
        <member name="F:Apworks.Snapshots.Providers.SnapshotProviderOption.Postpone">
            <summary>
            Indicates that the creating/updating of the snapshots
            would be postponed to a later scenario. 
            </summary>
        </member>
        <member name="T:Apworks.Snapshots.SnapshotDataObject">
            <summary>
            Represents the snapshot data object.
            </summary>
        </member>
        <member name="M:Apworks.Snapshots.SnapshotDataObject.#ctor">
            <summary>
            Initializes a new instance of <c>SnapshotDataObject</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Snapshots.SnapshotDataObject.ExtractSnapshot">
            <summary>
            Extracts the snapshot from the current snapshot data object.
            </summary>
            <returns>The snapshot instance.</returns>
        </member>
        <member name="M:Apworks.Snapshots.SnapshotDataObject.CreateFromAggregateRoot(Apworks.ISourcedAggregateRoot)">
            <summary>
            Creates the snapshot data object from the aggregate root.
            </summary>
            <param name="aggregateRoot">The aggregate root for which the snapshot is being created.</param>
            <returns>The snapshot data object.</returns>
        </member>
        <member name="M:Apworks.Snapshots.SnapshotDataObject.GetHashCode">
            <summary>
            Returns the hash code for current snapshot data object.
            </summary>
            <returns>The calculated hash code for the current snapshot data object.</returns>
        </member>
        <member name="M:Apworks.Snapshots.SnapshotDataObject.Equals(System.Object)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value indicating whether this instance is equal to a specified
            object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>True if obj is an instance of the <see cref="T:Apworks.Snapshots.SnapshotDataObject"/> type and equals the value of this
            instance; otherwise, false.</returns>
        </member>
        <member name="P:Apworks.Snapshots.SnapshotDataObject.SnapshotData">
            <summary>
            Gets or sets an array of <see cref="T:System.Byte"/> values that represents
            the binary content of the snapshot data.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.SnapshotDataObject.AggregateRootID">
            <summary>
            Gets or sets the identifier of the aggregate root.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.SnapshotDataObject.AggregateRootType">
            <summary>
            Gets or sets the assembly qualified name of the type of the aggregate root.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.SnapshotDataObject.SnapshotType">
            <summary>
            Gets or sets the assembly qualified name of the type of the snapshot.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.SnapshotDataObject.Version">
            <summary>
            Gets or sets the version of the snapshot.
            </summary>
            <remarks>This version is also equal to the version of the event
            on which the snapshot was taken.</remarks>
        </member>
        <member name="P:Apworks.Snapshots.SnapshotDataObject.Branch">
            <summary>
            Gets or sets the branch of the snapshot.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.SnapshotDataObject.Timestamp">
            <summary>
            Gets or sets the timestamp on which the snapshot was taken.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.SnapshotDataObject.ID">
            <summary>
            Gets or sets the identifier of the snapshot data object.
            </summary>
        </member>
        <member name="T:Apworks.Exceptions.ExceptionHandler`1">
            <summary>
            Represents the base class of exception handlers.
            </summary>
            <typeparam name="TException">The type of the exception being handled.</typeparam>
        </member>
        <member name="T:Apworks.Exceptions.IExceptionHandler">
            <summary>
            Represents that the implemented classes are exception handlers.
            </summary>
        </member>
        <member name="M:Apworks.Exceptions.IExceptionHandler.HandleException(System.Exception)">
            <summary>
            Handles a specific exception.
            </summary>
            <param name="ex">The exception to be handled.</param>
            <returns>True if the exceptioin was successfully handled, otherwise, false.</returns>
        </member>
        <member name="M:Apworks.Exceptions.ExceptionHandler`1.DoHandle(`0)">
            <summary>
            Performs the exception handling internally.
            </summary>
            <param name="ex">The exception to be handled.</param>
            <returns>True if the exception was handled successfully, otherwise, false.</returns>
        </member>
        <member name="M:Apworks.Exceptions.ExceptionHandler`1.HandleException(System.Exception)">
            <summary>
            Handles a specific exception.
            </summary>
            <param name="ex">The exception to be handled.</param>
            <returns>True if the exceptioin was successfully handled, otherwise, false.</returns>
        </member>
        <member name="T:Apworks.Exceptions.ExceptionManager">
            <summary>
            Represents the exception manager which handles and processes
            the exceptions.
            </summary>
        </member>
        <member name="M:Apworks.Exceptions.ExceptionManager.GetExceptionHandlers(System.Type)">
            <summary>
            Gets a list of exception handlers for a specific exception type.
            </summary>
            <param name="exceptionType">The type of the exception.</param>
            <returns>A list of exception handlers.</returns>
        </member>
        <member name="M:Apworks.Exceptions.ExceptionManager.GetExceptionHandlers``1">
            <summary>
            Gets a list of exception handlers for a specific exception type.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <returns>A list of exception handlers.</returns>
        </member>
        <member name="M:Apworks.Exceptions.ExceptionManager.GetRegisteredExceptionTypes">
            <summary>
            Gets all the exception types registered in the Apworks configuration section.
            </summary>
            <returns>A list of exception types registered.</returns>
        </member>
        <member name="M:Apworks.Exceptions.ExceptionManager.HandleException(System.Exception)">
            <summary>
            Handles a specific exception.
            </summary>
            <param name="ex">The exception to be handled.</param>
            <returns>True if the exception can be handled successfully, otherwise, false.</returns>
        </member>
        <member name="M:Apworks.Exceptions.ExceptionManager.HandleException``1(``0)">
            <summary>
            Handles a specific exception.
            </summary>
            <typeparam name="TException">The type of the exception to be handled.</typeparam>
            <param name="ex">The exception to be handled.</param>
            <returns>True if the exception can be handled successfully, otherwise, false.</returns>
        </member>
        <member name="P:Apworks.Exceptions.ExceptionManager.RegisteredExceptionCount">
            <summary>
            Gets a <see cref="T:System.Int32"/> value which represents the number of exceptions
            registered in the exception manager.
            </summary>
        </member>
        <member name="T:Apworks.Repositories.SnapshotDomainRepository">
            <summary>
            Represents the domain repository that uses the snapshots to perform
            repository operations and publishes the domain events to the specified
            event bus.
            </summary>
        </member>
        <member name="M:Apworks.Repositories.SnapshotDomainRepository.#ctor(Apworks.Storage.IStorage,Apworks.Bus.IEventBus)">
            <summary>
            Initializes a new instance of <c>SnapshotDomainRepository</c> class.
            </summary>
            <param name="storage">The <see cref="T:Apworks.Storage.IStorage"/> instance that is used
            by the current domain repository to manipulate snapshot data.</param>
            <param name="eventBus">The <see cref="T:Apworks.Bus.IEventBus"/> instance to which
            the domain events are published.</param>
        </member>
        <member name="M:Apworks.Repositories.SnapshotDomainRepository.DoCommit">
            <summary>
            Commits the changes registered in the domain repository.
            </summary>
        </member>
        <member name="M:Apworks.Repositories.SnapshotDomainRepository.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">A <see cref="T:System.Boolean"/> value which indicates whether
            the object should be disposed explicitly.</param>
        </member>
        <member name="M:Apworks.Repositories.SnapshotDomainRepository.Get``1(System.Guid)">
            <summary>
            Gets the instance of the aggregate root with the specified identifier.
            </summary>
            <param name="id">The identifier of the aggregate root.</param>
            <returns>The instance of the aggregate root with the specified identifier.</returns>
        </member>
        <member name="M:Apworks.Repositories.SnapshotDomainRepository.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.SnapshotDomainRepository.Storage">
            <summary>
            Gets the <see cref="T:Apworks.Storage.IStorage"/> instance that is used
            by the current domain repository to manipulate snapshot data.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.SnapshotDomainRepository.DistributedTransactionSupported">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work could support Microsoft Distributed
            Transaction Coordinator (MS-DTC).
            </summary>
        </member>
        <member name="T:Apworks.Repositories.EventSourcedDomainRepository">
            <summary>
            Represents the domain repository that supports the event sourcing facilities.
            </summary>
        </member>
        <member name="M:Apworks.Repositories.EventSourcedDomainRepository.#ctor(Apworks.Events.Storage.IDomainEventStorage,Apworks.Bus.IEventBus,Apworks.Snapshots.Providers.ISnapshotProvider)">
            <summary>
            Initializes a new instance of <c>EventSourcedDomainRepository</c> class.
            </summary>
            <param name="domainEventStorage">The <see cref="T:Apworks.Events.Storage.IDomainEventStorage"/> instance
            that handles the storage mechanism for domain events.</param>
            <param name="eventBus">The <see cref="T:Apworks.Bus.IEventBus"/> instance to which the domain events
            are published.</param>
            <param name="snapshotProvider">The <see cref="T:Apworks.Snapshots.Providers.ISnapshotProvider"/> instance
            that is used for handling the snapshot operations.</param>
        </member>
        <member name="M:Apworks.Repositories.EventSourcedDomainRepository.DoCommit">
            <summary>
            Commits the changes registered in the domain repository.
            </summary>
        </member>
        <member name="M:Apworks.Repositories.EventSourcedDomainRepository.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">A <see cref="T:System.Boolean"/> value which indicates whether
            the object should be disposed explicitly.</param>
        </member>
        <member name="M:Apworks.Repositories.EventSourcedDomainRepository.Get``1(System.Guid)">
            <summary>
            Gets the instance of the aggregate root with the specified identifier.
            </summary>
            <param name="id">The identifier of the aggregate root.</param>
            <returns>The instance of the aggregate root with the specified identifier.</returns>
        </member>
        <member name="M:Apworks.Repositories.EventSourcedDomainRepository.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.EventSourcedDomainRepository.DomainEventStorage">
            <summary>
            Gets the instance of the domain event storage which is used for storing domain events.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.EventSourcedDomainRepository.SnapshotProvider">
            <summary>
            Gets the <see cref="T:Apworks.Snapshots.Providers.ISnapshotProvider"/> instance
            that is used for handling the snapshot operations.
            </summary>
        </member>
        <member name="P:Apworks.Repositories.EventSourcedDomainRepository.DistributedTransactionSupported">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work could support Microsoft Distributed
            Transaction Coordinator (MS-DTC).
            </summary>
        </member>
        <member name="T:Apworks.Snapshots.ISnapshot">
            <summary>
            Represents that the implemented classes are snapshots.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.ISnapshot.Timestamp">
            <summary>
            Gets or sets the timestamp on which the snapshot was taken.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.ISnapshot.AggregateRootID">
            <summary>
            Gets or sets the identifier of the aggregate root which the
            snapshot represents.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.ISnapshot.Version">
            <summary>
            Gets or sets the version of the snapshot, which commonly would
            be the version of the aggregate root.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.ISnapshot.Branch">
            <summary>
            Gets or sets the branch on which the snapshot exists.
            </summary>
        </member>
        <member name="T:Apworks.Snapshots.ISnapshotOrignator">
            <summary>
            Represents that the implemented classes are snapshot originators.
            </summary>
        </member>
        <member name="M:Apworks.Snapshots.ISnapshotOrignator.BuildFromSnapshot(Apworks.Snapshots.ISnapshot)">
            <summary>
            Builds the originator from the specific snapshot.
            </summary>
            <param name="snapshot">The snapshot from which the originator is built.</param>
        </member>
        <member name="M:Apworks.Snapshots.ISnapshotOrignator.CreateSnapshot">
            <summary>
            Creates the snapshot.
            </summary>
            <returns>The snapshot that was created based on the current originator.</returns>
        </member>
        <member name="T:Apworks.Serialization.SerializationException">
            <summary>
            Represents errors that occur when serializing/deserializing an object.
            </summary>
        </member>
        <member name="M:Apworks.Serialization.SerializationException.#ctor">
            <summary>
            Initializes a new instance of the <c>SerializationException</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Serialization.SerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SerializationException</c> class with the specified
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apworks.Serialization.SerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>SerializationException</c> class with the specified
            error message and the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:Apworks.Serialization.SerializationException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <c>SerializationException</c> class with the specified
            string formatter and the arguments that are used for formatting the message which
            describes the error.
            </summary>
            <param name="format">The string formatter which is used for formatting the error message.</param>
            <param name="args">The arguments that are used by the formatter to build the error message.</param>
        </member>
        <member name="T:Apworks.Snapshots.Serialization.ISnapshotSerializer">
            <summary>
            Represents that the implemented classes are serializers for snapshots.
            </summary>
        </member>
        <member name="T:Apworks.Serialization.IObjectSerializer">
            <summary>
            Represents that the implemented classes are object serializers.
            </summary>
        </member>
        <member name="M:Apworks.Serialization.IObjectSerializer.Serialize``1(``0)">
            <summary>
            Serializes an object into a byte stream.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="obj">The object to be serialized.</param>
            <returns>The byte stream which contains the serialized data.</returns>
        </member>
        <member name="M:Apworks.Serialization.IObjectSerializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes an object from the given byte stream.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="stream">The byte stream which contains the serialized data of the object.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:Apworks.Snapshots.Serialization.SnapshotBinarySerializer">
            <summary>
            Represents the binary snapshot serializer.
            </summary>
        </member>
        <member name="T:Apworks.Serialization.ObjectBinarySerializer">
            <summary>
            Represents the binary serializer.
            </summary>
        </member>
        <member name="M:Apworks.Serialization.ObjectBinarySerializer.Serialize``1(``0)">
            <summary>
            Serializes an object into a byte stream.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="obj">The object to be serialized.</param>
            <returns>The byte stream which contains the serialized data.</returns>
        </member>
        <member name="M:Apworks.Serialization.ObjectBinarySerializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes an object from the given byte stream.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="stream">The byte stream which contains the serialized data of the object.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:Apworks.Snapshots.Serialization.SnapshotDataContractSerializer">
            <summary>
            Represents the data contract snapshot serializer.
            </summary>
        </member>
        <member name="T:Apworks.Serialization.ObjectDataContractSerializer">
            <summary>
            Represents the data contract serializer.
            </summary>
        </member>
        <member name="M:Apworks.Serialization.ObjectDataContractSerializer.Serialize``1(``0)">
            <summary>
            Serializes an object into a byte stream.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="obj">The object to be serialized.</param>
            <returns>The byte stream which contains the serialized data.</returns>
        </member>
        <member name="M:Apworks.Serialization.ObjectDataContractSerializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes an object from the given byte stream.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="stream">The byte stream which contains the serialized data of the object.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:Apworks.Snapshots.Serialization.SnapshotJsonSerializer">
            <summary>
            Represents the Json snapshot serializer.
            </summary>
        </member>
        <member name="T:Apworks.Serialization.ObjectJsonSerializer">
            <summary>
            Represents the Json serializer.
            </summary>
        </member>
        <member name="M:Apworks.Serialization.ObjectJsonSerializer.Serialize``1(``0)">
            <summary>
            Serializes an object into a byte stream.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="obj">The object to be serialized.</param>
            <returns>The byte stream which contains the serialized data.</returns>
        </member>
        <member name="M:Apworks.Serialization.ObjectJsonSerializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes an object from the given byte stream.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="stream">The byte stream which contains the serialized data of the object.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:Apworks.Snapshots.Serialization.SnapshotXmlSerializer">
            <summary>
            Represents the XML snapshot serializer.
            </summary>
        </member>
        <member name="T:Apworks.Serialization.ObjectXmlSerializer">
            <summary>
            Represents the Json serializer.
            </summary>
        </member>
        <member name="M:Apworks.Serialization.ObjectXmlSerializer.Serialize``1(``0)">
            <summary>
            Serializes an object into a byte stream.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="obj">The object to be serialized.</param>
            <returns>The byte stream which contains the serialized data.</returns>
        </member>
        <member name="M:Apworks.Serialization.ObjectXmlSerializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes an object from the given byte stream.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="stream">The byte stream which contains the serialized data of the object.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:Apworks.Snapshots.Snapshot">
            <summary>
            Represents the snapshot.
            </summary>
        </member>
        <member name="M:Apworks.Snapshots.Snapshot.#ctor">
            <summary>
            Initializes a new instance of <c>Snapshot</c> class.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.Snapshot.Version">
            <summary>
            Gets or sets the version of the snapshot.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.Snapshot.Branch">
            <summary>
            Gets or sets the branch of the snapshot.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.Snapshot.Timestamp">
            <summary>
            Gets or sets the timestamp on which the snapshot was taken.
            </summary>
        </member>
        <member name="P:Apworks.Snapshots.Snapshot.AggregateRootID">
            <summary>
            Gets or sets the identifier of the aggregate root which the
            snapshot represents.
            </summary>
        </member>
        <member name="T:Apworks.Bus.IBus">
            <summary>
            Represents the message bus.
            </summary>
        </member>
        <member name="M:Apworks.Bus.IBus.Publish``1(``0)">
            <summary>
            Publishes the specified message to the bus.
            </summary>
            <typeparam name="TMessage">The type of the message to be published.</typeparam>
            <param name="message">The message to be published.</param>
        </member>
        <member name="M:Apworks.Bus.IBus.Publish``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Publishes a collection of messages to the bus.
            </summary>
            <typeparam name="TMessage">The type of the message to be published.</typeparam>
            <param name="messages">The messages to be published.</param>
        </member>
        <member name="M:Apworks.Bus.IBus.Clear">
            <summary>
            Clears the published messages waiting for commit.
            </summary>
        </member>
        <member name="T:Apworks.Bus.ICommandBus">
            <summary>
            Represents that the implemented classes are command buses.
            </summary>
        </member>
        <member name="T:Apworks.Bus.IEventBus">
            <summary>
            Represents that the implemented classes are event buses.
            </summary>
        </member>
        <member name="T:Apworks.Commands.Command">
            <summary>
            Represents the base class of the commands.
            </summary>
        </member>
        <member name="T:Apworks.Commands.ICommand">
            <summary>
            Represents that the implemented classes are commands.
            </summary>
        </member>
        <member name="M:Apworks.Commands.Command.#ctor">
            <summary>
            Initializes a new instance of the <c>Command</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Commands.Command.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <c>Command</c> class.
            </summary>
            <param name="id">The identifier which identifies a single command instance.</param>
        </member>
        <member name="M:Apworks.Commands.Command.GetHashCode">
            <summary>
            Returns the hash code for current command object.
            </summary>
            <returns>The calculated hash code for the current command object.</returns>
        </member>
        <member name="M:Apworks.Commands.Command.Equals(System.Object)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value indicating whether this instance is equal to a specified
            object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>True if obj is an instance of the <see cref="T:Apworks.Commands.ICommand"/> type and equals the value of this
            instance; otherwise, false.</returns>
        </member>
        <member name="P:Apworks.Commands.Command.ID">
            <summary>
            Gets or sets the identifier of the command instance.
            </summary>
        </member>
        <member name="T:Apworks.Commands.CommandHandler`1">
            <summary>
            Represents the base class for command handlers.
            </summary>
            <typeparam name="TCommand">The type of the command to be handled.</typeparam>
        </member>
        <member name="T:Apworks.Commands.ICommandHandler`1">
            <summary>
            Represents that the implemented classes are command handlers.
            </summary>
            <typeparam name="TCommand">The type of the command to be handled.</typeparam>
        </member>
        <member name="M:Apworks.Commands.CommandHandler`1.#ctor">
            <summary>
            Initializes a new instance of <c>CommandHandler&lt;TCommand&gt;</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Commands.CommandHandler`1.Handle(`0)">
            <summary>
            Handles the specified command.
            </summary>
            <param name="command">The command instance to be handled.</param>
        </member>
        <member name="P:Apworks.Commands.CommandHandler`1.DomainRepository">
            <summary>
            Gets the instance of the domain repository that could be used
            by the current command handler to perform repository operations.
            </summary>
        </member>
        <member name="T:Apworks.Constants">
            <summary>
            Represents the utility class which provides all the constants used by Apworks framework.
            </summary>
        </member>
        <member name="T:Apworks.Constants.Configuration">
            <summary>
            Represents the utility class which provides all the constants for Apworks configuration module.
            </summary>
        </member>
        <member name="F:Apworks.Constants.Configuration.ConfigurationSectionName">
            <summary>
            The name of the configuration section which holds the configuration elements.
            </summary>
        </member>
        <member name="F:Apworks.Constants.Configuration.DefaultIdentityGeneratorName">
            <summary>
            The name of the default identity generator.
            </summary>
        </member>
        <member name="F:Apworks.Constants.Configuration.DefaultSequenceGeneratorName">
            <summary>
            The name of the default sequence generator.
            </summary>
        </member>
        <member name="T:Apworks.Constants.ApplicationRuntime">
            <summary>
            Represents the constants and readonly fields used during the running of the application.
            </summary>
        </member>
        <member name="F:Apworks.Constants.ApplicationRuntime.DefaultVersion">
            <summary>
            Represents the default version number.
            </summary>
        </member>
        <member name="F:Apworks.Constants.ApplicationRuntime.DefaultBranch">
            <summary>
            Represents the default branch number.
            </summary>
        </member>
        <member name="T:Apworks.DomainException">
            <summary>
            Represents errors that occur in the domain layer of Apworks framework.
            </summary>
        </member>
        <member name="M:Apworks.DomainException.#ctor">
            <summary>
            Initializes a new instance of the <c>DomainException</c> class.
            </summary>
        </member>
        <member name="M:Apworks.DomainException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DomainException</c> class with the specified
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apworks.DomainException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>DomainException</c> class with the specified
            error message and the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:Apworks.DomainException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <c>DomainException</c> class with the specified
            string formatter and the arguments that are used for formatting the message which
            describes the error.
            </summary>
            <param name="format">The string formatter which is used for formatting the error message.</param>
            <param name="args">The arguments that are used by the formatter to build the error message.</param>
        </member>
        <member name="T:Apworks.ExpressionParseException">
            <summary>
            Represents errors that occur when parsing the strings to expressions.
            </summary>
        </member>
        <member name="M:Apworks.ExpressionParseException.#ctor">
            <summary>
            Initializes a new instance of the <c>ParseException</c> class.
            </summary>
        </member>
        <member name="M:Apworks.ExpressionParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>ParseException</c> class with the specified
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apworks.ExpressionParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>ParseException</c> class with the specified
            error message and the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:Apworks.ExpressionParseException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <c>ParseException</c> class with the specified
            string formatter and the arguments that are used for formatting the message which
            describes the error.
            </summary>
            <param name="format">The string formatter which is used for formatting the error message.</param>
            <param name="args">The arguments that are used by the formatter to build the error message.</param>
        </member>
        <member name="T:Apworks.Specifications.ExpressionFuncExtender">
            <summary>
            Represents the extender for Expression[Func[T, bool]] type.
            This is part of the solution which solves
            the expression parameter problem when going to Entity Framework by using
            Apworks specifications. For more information about this solution please
            refer to http://blogs.msdn.com/b/meek/archive/2008/05/02/linq-to-entities-combining-predicates.aspx.
            </summary>
        </member>
        <member name="M:Apworks.Specifications.ExpressionFuncExtender.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines two given expressions by using the AND semantics.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="first">The first part of the expression.</param>
            <param name="second">The second part of the expression.</param>
            <returns>The combined expression.</returns>
        </member>
        <member name="M:Apworks.Specifications.ExpressionFuncExtender.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines two given expressions by using the OR semantics.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="first">The first part of the expression.</param>
            <param name="second">The second part of the expression.</param>
            <returns>The combined expression.</returns>
        </member>
        <member name="T:Apworks.Specifications.ParameterRebinder">
            <summary>
            Represents the parameter rebinder used for rebinding the parameters
            for the given expressions. This is part of the solution which solves
            the expression parameter problem when going to Entity Framework by using
            Apworks specifications. For more information about this solution please
            refer to http://blogs.msdn.com/b/meek/archive/2008/05/02/linq-to-entities-combining-predicates.aspx.
            </summary>
        </member>
        <member name="T:Apworks.Storage.Builders.WhereClauseBuilder`1">
            <summary>
            Represents the base class of all the where clause builders.
            </summary>
            <typeparam name="TDataObject">The type of the data object which would be mapped to
            a certain table in the relational database.</typeparam>
        </member>
        <member name="T:Apworks.Storage.Builders.IWhereClauseBuilder`1">
            <summary>
            Represents that the implemented classes are where clause builders that
            build the WHERE clause for the SQL syntax for relational database systems.
            </summary>
            <typeparam name="T">The type of the data object which would be mapped to
            a certain table in the relational database.</typeparam>
        </member>
        <member name="M:Apworks.Storage.Builders.IWhereClauseBuilder`1.BuildWhereClause(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Builds the WHERE clause from the given expression object.
            </summary>
            <param name="expression">The expression object.</param>
            <returns>The <c>Apworks.Storage.Builders.WhereClauseBuildResult</c> instance
            which contains the build result.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.#ctor(Apworks.Storage.IStorageMappingResolver)">
            <summary>
            Initializes a new instance of <c>WhereClauseBuilderBase&lt;T&gt;</c> class.
            </summary>
            <param name="mappingResolver">The <c>Apworks.Storage.IStorageMappingResolver</c>
            instance which will be used for generating the mapped field names.</param>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.BinaryExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.MemberExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitBlock(System.Linq.Expressions.BlockExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.BlockExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.CatchBlock"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.ConditionalExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.DebugInfoExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitDefault(System.Linq.Expressions.DefaultExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.DefaultExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.DynamicExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.ElementInit"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitGoto(System.Linq.Expressions.GotoExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.GotoExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitIndex(System.Linq.Expressions.IndexExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.IndexExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.InvocationExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitLabel(System.Linq.Expressions.LabelExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.LabelExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.LabelTarget"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.Expression`1"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.ListInitExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitLoop(System.Linq.Expressions.LoopExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.LoopExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.MemberAssignment"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.MemberBinding"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.MemberInitExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.MemberListBinding"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.MemberMemberBinding"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.NewExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.NewArrayExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.ParameterExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.SwitchExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.SwitchCase"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitTry(System.Linq.Expressions.TryExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.TryExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.UnaryExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuilder`1.BuildWhereClause(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Builds the WHERE clause from the given expression object.
            </summary>
            <param name="expression">The expression object.</param>
            <returns>The <c>Apworks.Storage.Builders.WhereClauseBuildResult</c> instance
            which contains the build result.</returns>
        </member>
        <member name="P:Apworks.Storage.Builders.WhereClauseBuilder`1.And">
            <summary>
            Gets a <c>System.String</c> value which represents the AND operation in the WHERE clause.
            </summary>
        </member>
        <member name="P:Apworks.Storage.Builders.WhereClauseBuilder`1.Or">
            <summary>
            Gets a <c>System.String</c> value which represents the OR operation in the WHERE clause.
            </summary>
        </member>
        <member name="P:Apworks.Storage.Builders.WhereClauseBuilder`1.Equal">
            <summary>
            Gets a <c>System.String</c> value which represents the EQUAL operation in the WHERE clause.
            </summary>
        </member>
        <member name="P:Apworks.Storage.Builders.WhereClauseBuilder`1.Not">
            <summary>
            Gets a <c>System.String</c> value which represents the NOT operation in the WHERE clause.
            </summary>
        </member>
        <member name="P:Apworks.Storage.Builders.WhereClauseBuilder`1.NotEqual">
            <summary>
            Gets a <c>System.String</c> value which represents the NOT EQUAL operation in the WHERE clause.
            </summary>
        </member>
        <member name="P:Apworks.Storage.Builders.WhereClauseBuilder`1.Like">
            <summary>
            Gets a <c>System.String</c> value which represents the LIKE operation in the WHERE clause.
            </summary>
        </member>
        <member name="P:Apworks.Storage.Builders.WhereClauseBuilder`1.LikeSymbol">
            <summary>
            Gets a <c>System.Char</c> value which represents the place-holder for the wildcard in the LIKE operation.
            </summary>
        </member>
        <member name="P:Apworks.Storage.Builders.WhereClauseBuilder`1.ParameterChar">
            <summary>
            Gets a <c>System.Char</c> value which represents the leading character to be used by the
            database parameter.
            </summary>
        </member>
        <member name="T:Apworks.Storage.Builders.WhereClauseBuildResult">
            <summary>
            Represents the where clause build result.
            </summary>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuildResult.#ctor">
            <summary>
            Initializes a new instance of <c>WhereClauseBuildResult</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuildResult.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of <c>WhereClauseBuildResult</c> class.
            </summary>
            <param name="whereClause">The <c>System.String</c> value which represents the generated
            WHERE clause.</param>
            <param name="parameterValues">The <c>Dictionary&lt;string, object&gt;</c> instance which contains
            the mapping of the parameters and their values.</param>
        </member>
        <member name="M:Apworks.Storage.Builders.WhereClauseBuildResult.ToString">
            <summary>
            Returns a <c>System.String</c> object which represents the content of the Where Clause
            Build Result.
            </summary>
            <returns>A <c>System.String</c> object which represents the content of the Where Clause
            Build Result.</returns>
        </member>
        <member name="P:Apworks.Storage.Builders.WhereClauseBuildResult.WhereClause">
            <summary>
            Gets or sets a <c>System.String</c> value which represents the generated
            WHERE clause.
            </summary>
        </member>
        <member name="P:Apworks.Storage.Builders.WhereClauseBuildResult.ParameterValues">
            <summary>
            Gets or sets a <c>Dictionary&lt;string, object&gt;</c> instance which contains
            the mapping of the parameters and their values.
            </summary>
        </member>
        <member name="T:Apworks.Storage.SortOrder">
            <summary>
            Represents the sorting style.
            </summary>
        </member>
        <member name="F:Apworks.Storage.SortOrder.Unspecified">
            <summary>
            Indicates that the sorting style is not specified.
            </summary>
        </member>
        <member name="F:Apworks.Storage.SortOrder.Ascending">
            <summary>
            Indicates an ascending sorting.
            </summary>
        </member>
        <member name="F:Apworks.Storage.SortOrder.Descending">
            <summary>
            Indicates a descending sorting.
            </summary>
        </member>
        <member name="T:Apworks.Events.DomainEvent">
            <summary>
            Represents the base class for all domain events.
            </summary>
        </member>
        <member name="T:Apworks.Events.IDomainEvent">
            <summary>
            Represents that the implemented classes are domain events.
            </summary>
            <remarks>Domain events are the events raised by domain model.</remarks>
        </member>
        <member name="T:Apworks.Events.IEvent">
            <summary>
            Represents that the implemented classes are events.
            </summary>
        </member>
        <member name="P:Apworks.Events.IEvent.Timestamp">
            <summary>
            Gets or sets the date and time on which the event was produced.
            </summary>
            <remarks>The format of this date/time value could be various between different
            systems. Apworks recommend system designer or architect uses the standard
            UTC date/time format.</remarks>
        </member>
        <member name="P:Apworks.Events.IEvent.AssemblyQualifiedEventType">
            <summary>
            Gets or sets the assembly qualified type name of the event.
            </summary>
        </member>
        <member name="P:Apworks.Events.IDomainEvent.Source">
            <summary>
            Gets or sets the source entity from which the domain event was generated.
            </summary>
        </member>
        <member name="P:Apworks.Events.IDomainEvent.Version">
            <summary>
            Gets or sets the version of the domain event.
            </summary>
        </member>
        <member name="P:Apworks.Events.IDomainEvent.Branch">
            <summary>
            Gets or sets the branch on which the current domain event exists.
            </summary>
        </member>
        <member name="M:Apworks.Events.DomainEvent.#ctor">
            <summary>
            Initializes a new instance of <c>DomainEvent</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Events.DomainEvent.#ctor(Apworks.IEntity)">
            <summary>
            Initializes a new instace of <c>DomainEvent</c> class.
            </summary>
            <param name="source">The source entity which raises the domain event.</param>
        </member>
        <member name="M:Apworks.Events.DomainEvent.GetHashCode">
            <summary>
            Returns the hash code for current domain event.
            </summary>
            <returns>The calculated hash code for the current domain event.</returns>
        </member>
        <member name="M:Apworks.Events.DomainEvent.Equals(System.Object)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value indicating whether this instance is equal to a specified
            entity.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>True if obj is an instance of the <see cref="T:Apworks.ISourcedAggregateRoot"/> type and equals the value of this
            instance; otherwise, false.</returns>
        </member>
        <member name="M:Apworks.Events.DomainEvent.Publish``1(``0)">
            <summary>
            Publishes the domain event to the registered domain event handlers.
            </summary>
            <typeparam name="TDomainEvent">The type of the domain event to be published.</typeparam>
            <param name="domainEvent">The domain event to be published.</param>
            <remarks>
            This method publishes domain events to the domain event handlers that have been registered 
            to the object container. The method will use the <see cref="T:Apworks.ServiceLocator"/> instance to
            resolve all the registered domain event handlers, then publish the given domain event to
            all of these registered handlers. The domain event handler should implement the interface
            <see cref="T:Apworks.Events.IDomainEventHandler`1"/>.
            </remarks>
        </member>
        <member name="M:Apworks.Events.DomainEvent.Publish``1(``0,System.Action{``0,System.Boolean,System.Exception},System.Nullable{System.TimeSpan})">
            <summary>
            Publishes the domain event to the registered domain event handlers.
            </summary>
            <typeparam name="TDomainEvent">The type of the domain event to be published.</typeparam>
            <param name="domainEvent">The domain event to be published.</param>
            <param name="callback">The callback function which will be executed after the
            domain event has been published and processed.</param>
            <param name="timeout">If a domain event handler is decorated by <see cref="T:Apworks.Events.ParallelExecutionAttribute"/> attribute, this parameter
            is to specify the timeout value for the handler to process the event.</param>
            <remarks>
            This method publishes domain events to the domain event handlers that have been registered 
            to the object container. The method will use the <see cref="T:Apworks.ServiceLocator"/> instance to
            resolve all the registered domain event handlers, then publish the given domain event to
            all of these registered handlers. The domain event handler should implement the interface
            <see cref="T:Apworks.Events.IDomainEventHandler`1"/>.
            </remarks>
        </member>
        <member name="P:Apworks.Events.DomainEvent.Source">
            <summary>
            Gets or sets the source entity from which the domain event was generated.
            </summary>
        </member>
        <member name="P:Apworks.Events.DomainEvent.Version">
            <summary>
            Gets or sets the version of the domain event.
            </summary>
        </member>
        <member name="P:Apworks.Events.DomainEvent.Branch">
            <summary>
            Gets or sets the branch on which the current version of domain event exists.
            </summary>
        </member>
        <member name="P:Apworks.Events.DomainEvent.AssemblyQualifiedEventType">
            <summary>
            Gets or sets the assembly qualified type name of the event.
            </summary>
        </member>
        <member name="P:Apworks.Events.DomainEvent.Timestamp">
            <summary>
            Gets or sets the date and time on which the event was produced.
            </summary>
            <remarks>The format of this date/time value could be various between different
            systems. Apworks recommend system designer or architect uses the standard
            UTC date/time format.</remarks>
        </member>
        <member name="P:Apworks.Events.DomainEvent.ID">
            <summary>
            Gets or sets the identifier of the domain event.
            </summary>
        </member>
        <member name="T:Apworks.Events.EventHandler`1">
            <summary>
            Represents the base class for event handlers.
            </summary>
            <typeparam name="TEvent">The type of the event to be handled.</typeparam>
        </member>
        <member name="M:Apworks.Events.EventHandler`1.Handle(`0)">
            <summary>
            Handles the specified event.
            </summary>
            <param name="message">The event to be handled.</param>
        </member>
        <member name="T:Apworks.Events.IDomainEventHandler`1">
            <summary>
            Represents the event handler for domain events.
            </summary>
            <typeparam name="TDomainEvent">The type of the domain event to be handled by current handler.</typeparam>
        </member>
        <member name="T:Apworks.Events.InlineDomainEventHandler`1">
            <summary>
            Represents the domain event handler that is defined within the scope of
            an aggregate root and handles the domain event when <c>SourcedAggregateRoot.RaiseEvent&lt;TEvent&gt;</c>
            is called.
            </summary>
        </member>
        <member name="M:Apworks.Events.InlineDomainEventHandler`1.#ctor(Apworks.ISourcedAggregateRoot,System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of <c>InlineDomainEventHandler</c> class.
            </summary>
            <param name="aggregateRoot">The instance of the aggregate root within which the domain event
            was raised and handled.</param>
            <param name="mi">The method which handles the domain event.</param>
        </member>
        <member name="M:Apworks.Events.InlineDomainEventHandler`1.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified System.Object is equal to the current System.Object;
            otherwise, false.</returns>
        </member>
        <member name="M:Apworks.Events.InlineDomainEventHandler`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current System.Object.</returns>
        </member>
        <member name="M:Apworks.Events.InlineDomainEventHandler`1.Handle(`0)">
            <summary>
            Handles the specified message.
            </summary>
            <param name="message">The message to be handled.</param>
        </member>
        <member name="T:Apworks.Events.Serialization.DomainEventBinarySerializer">
            <summary>
            Represents the serializer for domain events that serializes/deserializes the domain events
            with binary format.
            </summary>
        </member>
        <member name="T:Apworks.Events.Serialization.IDomainEventSerializer">
            <summary>
            Represents that the implemented classes are domain event serializers.
            </summary>
        </member>
        <member name="T:Apworks.Events.Serialization.DomainEventDataContractSerializer">
            <summary>
            Represents the serializer for domain events that serializes/deserializes the domain events
            with DataContract format.
            </summary>
        </member>
        <member name="T:Apworks.Events.Serialization.DomainEventJsonSerializer">
            <summary>
            Represents the serializer for domain events that serializes/deserializes the domain events
            with Json format.
            </summary>
        </member>
        <member name="T:Apworks.Events.Serialization.DomainEventXmlSerializer">
            <summary>
            Represents the serializer for domain events that serializes/deserializes the domain events
            with XML format.
            </summary>
        </member>
        <member name="T:Apworks.Events.Storage.DomainEventDataObject">
            <summary>
            Represents the domain event data object which holds the data of a specific domain event.
            </summary>
            <remarks>The <c>DomainEventDataObject</c> class implemented the Data Transfer Object pattern
            that was described in Martin Fowler's book, Patterns of Enterprise Application Architecture.
            For more information about Data Transfer Object pattern, please refer to http://martinfowler.com/eaaCatalog/dataTransferObject.html.
            </remarks>
        </member>
        <member name="M:Apworks.Events.Storage.DomainEventDataObject.#ctor">
            <summary>
            Initializes a new instance of the domain event data object.
            </summary>
        </member>
        <member name="M:Apworks.Events.Storage.DomainEventDataObject.GetDomainEventSerializer">
            <summary>
            Gets the serializer for domain events.
            </summary>
            <returns>The domain event serializer instance.</returns>
        </member>
        <member name="M:Apworks.Events.Storage.DomainEventDataObject.FromDomainEvent(Apworks.Events.IDomainEvent)">
            <summary>
            Creates and initializes the domain event data object from the given domain event.
            </summary>
            <param name="entity">The domain event instance from which the domain event data object
            is created and initialized.</param>
            <returns>The initialized data object instance.</returns>
        </member>
        <member name="M:Apworks.Events.Storage.DomainEventDataObject.ToDomainEvent">
            <summary>
            Converts the domain event data object to its corresponding domain event entity instance.
            </summary>
            <returns>The domain event entity instance that is converted from the current domain event data object.</returns>
        </member>
        <member name="P:Apworks.Events.Storage.DomainEventDataObject.Data">
            <summary>
            Gets or sets an array of <see cref="T:System.Byte"/> value which holds the data
            of current domain event object.
            </summary>
        </member>
        <member name="P:Apworks.Events.Storage.DomainEventDataObject.AssemblyQualifiedEventType">
            <summary>
            Gets or sets the assembly qualified name of the type of the domain event.
            </summary>
        </member>
        <member name="P:Apworks.Events.Storage.DomainEventDataObject.Branch">
            <summary>
            Gets or sets the branch on which domain event data object exists.
            </summary>
        </member>
        <member name="P:Apworks.Events.Storage.DomainEventDataObject.ID">
            <summary>
            Gets or sets the identifier of the domain event.
            </summary>
            <remarks>Note that since the <c>DomainEventDataObject</c> is the data
            presentation of the corresponding domain event object, this identifier value
            can also be considered to be the identifier for the <c>DomainEventDataObject</c> instance.</remarks>
        </member>
        <member name="P:Apworks.Events.Storage.DomainEventDataObject.SourceID">
            <summary>
            Gets or sets the identifier of the aggregate root which holds the instance
            of the current domain event.
            </summary>
        </member>
        <member name="P:Apworks.Events.Storage.DomainEventDataObject.AssemblyQualifiedSourceType">
            <summary>
            Gets or sets the assembly qualified name of the type of the aggregate root.
            </summary>
        </member>
        <member name="P:Apworks.Events.Storage.DomainEventDataObject.Timestamp">
            <summary>
            Gets or sets the date and time on which the event was produced.
            </summary>
            <remarks>The format of this date/time value could be various between different
            systems. Apworks recommend system designer or architect uses the standard
            UTC date/time format.</remarks>
        </member>
        <member name="P:Apworks.Events.Storage.DomainEventDataObject.Version">
            <summary>
            Gets or sets the version of the domain event data object.
            </summary>
        </member>
        <member name="T:Apworks.Generators.SequenceGenerator">
            <summary>
            Represents the default sequence generator.
            </summary>
        </member>
        <member name="T:Apworks.Generators.ISequenceGenerator">
            <summary>
            Represents that the implemented classes are sequence generators.
            </summary>
        </member>
        <member name="P:Apworks.Generators.ISequenceGenerator.Next">
            <summary>
            Gets the next value of the sequence.
            </summary>
        </member>
        <member name="P:Apworks.Generators.SequenceGenerator.Instance">
            <summary>
            Gets the singleton instance of <c>SequenceGenerator</c> class.
            </summary>
        </member>
        <member name="P:Apworks.Generators.SequenceGenerator.Next">
            <summary>
            Gets the next value of the sequence.
            </summary>
        </member>
        <member name="T:Apworks.Generators.SequentialIdentityGenerator">
            <summary>
            Represents the sequential identity generator.
            </summary>
        </member>
        <member name="T:Apworks.Generators.IIdentityGenerator">
            <summary>
            Represents that the implemented classes are identity generators.
            </summary>
        </member>
        <member name="M:Apworks.Generators.IIdentityGenerator.Generate">
            <summary>
            Generates the identity.
            </summary>
            <returns>The generated identity instance.</returns>
        </member>
        <member name="M:Apworks.Generators.SequentialIdentityGenerator.Generate">
            <summary>
            Generates the identity.
            </summary>
            <returns>The generated identity instance.</returns>
        </member>
        <member name="P:Apworks.Generators.SequentialIdentityGenerator.Next">
            <summary>
            Gets the next value of the sequence.
            </summary>
        </member>
        <member name="T:Apworks.Generators.IdentityGenerator">
            <summary>
            Represents the default identity generator.
            </summary>
        </member>
        <member name="M:Apworks.Generators.IdentityGenerator.Generate">
            <summary>
            Generates the identity.
            </summary>
            <returns>The generated identity instance.</returns>
        </member>
        <member name="P:Apworks.Generators.IdentityGenerator.Instance">
            <summary>
            Gets the instance of the <c>IdentityGenerator</c> class.
            </summary>
        </member>
        <member name="T:Apworks.ISourcedAggregateRoot">
            <summary>
            Represents that the implemented classes are aggregate roots that
            support event sourcing mechanism.
            </summary>
        </member>
        <member name="M:Apworks.ISourcedAggregateRoot.BuildFromHistory(System.Collections.Generic.IEnumerable{Apworks.Events.IDomainEvent})">
            <summary>
            Builds the aggreate from the historial events.
            </summary>
            <param name="historicalEvents">The historical events from which the aggregate is built.</param>
        </member>
        <member name="P:Apworks.ISourcedAggregateRoot.UncommittedEvents">
            <summary>
            Gets all the uncommitted events.
            </summary>
        </member>
        <member name="P:Apworks.ISourcedAggregateRoot.Version">
            <summary>
            Gets the version of the aggregate.
            </summary>
        </member>
        <member name="P:Apworks.ISourcedAggregateRoot.Branch">
            <summary>
            Gets the branch on which the aggregate exists.
            </summary>
        </member>
        <member name="T:Apworks.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_ADD_AGGREGATE_FAIL">
            <summary>
              Looks up a localized string similar to Failed to add the aggregate(s) to the repository..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_BEGIN_TRANS_DOMAIN_REPOSITORY_FAIL">
            <summary>
              Looks up a localized string similar to Failed to begin the transaction for the domain repository..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_BEGIN_TRANS_STORAGE_FAIL">
            <summary>
              Looks up a localized string similar to Failed to begin transaction with the isolation level {0}..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_BUILD_FIELD_NAME_FAIL">
            <summary>
              Looks up a localized string similar to The where clause builder failed to build the field name for member {0}..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_CHECK_EXIST_AGGREGATE_FAIL">
            <summary>
              Looks up a localized string similar to Failed to check the existance of the aggregate..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_CLOSE_CONN_STORAGE_FAIL">
            <summary>
              Looks up a localized string similar to Failed to close the connection..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_COMMIT_DOMAIN_REPOSITORY_CONTEXT_FAIL">
            <summary>
              Looks up a localized string similar to Failed to commit the domain repository Unit of Work..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_COMMIT_ROLLBACK_WHEN_DISPOSE_STORAGE_FAIL">
            <summary>
              Looks up a localized string similar to Either commit or rollback fails when disposing the storage device object..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_COMMIT_TRANS_STORAGE_FAIL">
            <summary>
              Looks up a localized string similar to Failed to commit the transaction..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_DELETE_FROM_STORAGE_FAIL">
            <summary>
              Looks up a localized string similar to Failed to delete the object from storage for type {0}, with the criteria {1}..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_DESERIALIZE_FAIL">
            <summary>
              Looks up a localized string similar to Failed to deserialize the object..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_DISPOSE_DOMAIN_REPOSITORY_FAIL">
            <summary>
              Looks up a localized string similar to Failed to dispose the domain repository..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_DOMAINEVENTSTORE_INVALID_CONNSTR">
            <summary>
              Looks up a localized string similar to Database connection string was not specified as it must be used by LINQ to SQL Domain Event Store. Check the configuration file to make sure the configuration section for event storage was defined and the connection string was provided properly..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_DOMAINEVENTSTORE_INVALID_MAPPING">
            <summary>
              Looks up a localized string similar to LINQ to SQL mapping xml was not defined as it must be used by the LINQ to SQL Domain Event Store. Check the configuration file to make sure the configuration section for event storage was defined and the mapping xml was specified property..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_DOMAINEVENTSTORE_INVALID_TYPE">
            <summary>
              Looks up a localized string similar to The type of the configuration section is not valid as required. Required: {0}, Actual: {1}..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_EXPRESSION_NODE_TYPE_NOT_SUPPORT">
            <summary>
              Looks up a localized string similar to The expression type {0} is not supported by current version of Apworks..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_FIND_AGGREGATE_FAIL">
            <summary>
              Looks up a localized string similar to Error occurs when trying to find the aggregate(s) from the repository..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_FINDALL_AGGREGATE_FAIL">
            <summary>
              Looks up a localized string similar to Failed to find all the aggregates..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_GENERATE_UID_FAIL">
            <summary>
              Looks up a localized string similar to General error occurs when generating the unique identifier..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_GENERATE_WHERE_CLAUSE_FAIL">
            <summary>
              Looks up a localized string similar to The where clause builder failed to generate the where clause for the expression {0}..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_GENERATE_WHERE_NOT_SUPPORT">
            <summary>
              Looks up a localized string similar to There are some unsupported operations when generating where clause for the expression {0}..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_GET_AGGREGATE_FAIL">
            <summary>
              Looks up a localized string similar to Error occurs when trying to get the aggregate(s) from the repository..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_GET_IDENTITY_GENERATOR_FAIL">
            <summary>
              Looks up a localized string similar to Unable to get the identity generator..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_GETALL_AGGREGATE_FAIL">
            <summary>
              Looks up a localized string similar to Failed to get all the aggregates from the repository..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_INIT_RDBMS_DOMAIN_EVENT_STORAGE_FAIL">
            <summary>
              Looks up a localized string similar to Unable to create the Relational Database Management System Domain Event Storage with the provided type {0}..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_INIT_RDBMS_STORAGE_FAIL">
            <summary>
              Looks up a localized string similar to Failed to initialize the RDBMS storage device..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_INIT_XML_STORAGE_MAPPING_FAIL">
            <summary>
              Looks up a localized string similar to Failed to initialize the XML mapping resolver with the given file {0}..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_INSERT_INTO_STORAGE_FAIL">
            <summary>
              Looks up a localized string similar to Failed to insert the data object into the storage with the data {0}..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_INVALID_CONFIG_ELEMENT">
            <summary>
              Looks up a localized string similar to Configuration element {0}, which is required by Apworks, was not configured properly..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_INVALID_HANDLER_SIGNATURE">
            <summary>
              Looks up a localized string similar to The method {0} going to be used as domain event handler doesn&apos;t have a correct signature..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_INVALID_METHOD_CALL_ARGUMENT_NUMBER">
            <summary>
              Looks up a localized string similar to Number of the arguments used by the method call should only be one..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_LOAD_OBJ_CONTAINER_FAIL">
            <summary>
              Looks up a localized string similar to Failed to initialize and load the object container..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_MEMBER_TYPE_NOT_SUPPORT">
            <summary>
              Looks up a localized string similar to Only the property member of the given data object and the field member is supported. Current member type is {0}..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_METHOD_CALL_ARGUMENT_TYPE_NOT_SUPPORT">
            <summary>
              Looks up a localized string similar to The type of the argument that used by the method should be either Constant or Member. Currently it is {0}..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_METHOD_NOT_SUPPORT">
            <summary>
              Looks up a localized string similar to Only the StartsWith, EndsWith and Equals methods are supported. Currently it is {0}..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_PROCESS_NODE_NOT_SUPPORT">
            <summary>
              Looks up a localized string similar to The process of the expression type {0} is not supported..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_REMOVE_AGGREGATE_FAIL">
            <summary>
              Looks up a localized string similar to Failed to remove the aggregate from the repository..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_ROLLBACK_TRANS_DOMAIN_REPOSITORY_FAIL">
            <summary>
              Looks up a localized string similar to Failed to rollback the transaction from the domain repository..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_ROLLBACK_TRANS_STORAGE_FAIL">
            <summary>
              Looks up a localized string similar to Failed to rollback the transaction..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_SELECT_FIRSTONLY_FAIL">
            <summary>
              Looks up a localized string similar to Failed to select the first only object for data type {0} with the property bag {1}..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_SELECT_FROM_STORAGE_FAIL">
            <summary>
              Looks up a localized string similar to Failed to select data objects from the storage for data type {0}, with the criteria {1}, sorting fields {2} and sort order {3}..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_SERIALIZE_FAIL">
            <summary>
              Looks up a localized string similar to Failed to serialize the object..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_STORAGE_TRANS_COMPLETED">
            <summary>
              Looks up a localized string similar to The transaction has already completed..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_UPDATE_AGGREGATE_FAIL">
            <summary>
              Looks up a localized string similar to Failed to update the aggregate in the repository..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_UPDATE_FROM_STORAGE_FAIL">
            <summary>
              Looks up a localized string similar to Failed to update the data object of type {0} from the storage, with the new values {1} and the selection criteria {2}..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_VISIT_CONSTANT_FAIL">
            <summary>
              Looks up a localized string similar to Failed to process the constant expression {0}..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_VISIT_MEMBER_FAIL">
            <summary>
              Looks up a localized string similar to Failed to process the member expression {0}..
            </summary>
        </member>
        <member name="P:Apworks.Properties.Resources.EX_VISIT_METHOD_CALL_FAIL">
            <summary>
              Looks up a localized string similar to Failed to process the method call expression {0}..
            </summary>
        </member>
        <member name="T:Apworks.Repositories.IRepository`1">
            <summary>
            Represents that the implemented classes are repositories.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.Add(`0)">
            <summary>
            Adds an aggregate root to the repository.
            </summary>
            <param name="aggregateRoot">The aggregate root to be added to the repository.</param>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.GetByKey(System.Object)">
            <summary>
            Gets the aggregate root instance from repository by a given key.
            </summary>
            <param name="key">The key of the aggregate root.</param>
            <returns>The instance of the aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.GetAll">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <returns>All the aggregate roots got from the repository.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder)">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <returns>All the aggregate roots got from the repository, with the aggregate roots being sorted by
            using the provided sort predicate and the sort order.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32)">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <returns>All the aggregate roots got from the repository for the specified page, with the aggregate roots being sorted by
            using the provided sort predicate and the sort order.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.GetAll(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <returns>All the aggregate roots that match the given specification.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.GetAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder)">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <returns>All the aggregate roots that match the given specification and were sorted by using the given sort predicate and the sort order.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.GetAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32)">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <returns>All the aggregate roots that match the given specification and were sorted by using the given sort predicate and the sort order.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregated roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.GetAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.GetAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.GetAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.Get(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Gets a single aggregate root from repository.
            </summary>
            <param name="specification">The specification with which the aggregate root should match.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.Get(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets a single aggregate root from repository.
            </summary>
            <param name="specification">The specification with which the aggregate root should match.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.FindAll">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder)">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32)">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.FindAll(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Finds all the aggregate roots that match the given specification.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.FindAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder)">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.FindAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32)">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The number of objects per page.</param>
            <param name="pageSize">The number of objects per page.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.FindAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.FindAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.FindAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.Find(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Finds a single aggregate root from the repository.
            </summary>
            <param name="specification">The specification with which the aggregate root should match.</param>
            <returns>The instance of the aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.Find(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds a single aggregate root from the repository.
            </summary>
            <param name="specification">The specification with which the aggregate root should match.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.Exists(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Checkes whether the aggregate root, which matches the given specification, exists in the repository.
            </summary>
            <param name="specification">The specification with which the aggregate root should match.</param>
            <returns>True if the aggregate root exists, otherwise false.</returns>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.Remove(`0)">
            <summary>
            Removes the aggregate root from current repository.
            </summary>
            <param name="aggregateRoot">The aggregate root to be removed.</param>
        </member>
        <member name="M:Apworks.Repositories.IRepository`1.Update(`0)">
            <summary>
            Updates the aggregate root in the current repository.
            </summary>
            <param name="aggregateRoot">The aggregate root to be updated.</param>
        </member>
        <member name="P:Apworks.Repositories.IRepository`1.Context">
            <summary>
            Gets the instance of the repository context on which the repository was attached.
            </summary>
        </member>
        <member name="T:Apworks.Repositories.Repository`1">
            <summary>
            Represents the base class for repositories.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.#ctor(Apworks.Repositories.IRepositoryContext)">
            <summary>
            Initializes a new instance of <c>Repository&lt;TAggregateRoot&gt;</c> class.
            </summary>
            <param name="context">The repository context being used by the repository.</param>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoAdd(`0)">
            <summary>
            Adds an aggregate root to the repository.
            </summary>
            <param name="aggregateRoot">The aggregate root to be added to the repository.</param>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoGetByKey(System.Object)">
            <summary>
            Gets the aggregate root instance from repository by a given key.
            </summary>
            <param name="key">The key of the aggregate root.</param>
            <returns>The instance of the aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoGetAll">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <returns>All the aggregate roots got from the repository.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoGetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder)">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <returns>All the aggregate roots got from the repository, with the aggregate roots being sorted by
            using the provided sort predicate and the sort order.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoGetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32)">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <returns>All the aggregate roots got from the repository for the specified page, with the aggregate roots being sorted by
            using the provided sort predicate and the sort order.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoGetAll(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <returns>All the aggregate roots that match the given specification.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoGetAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder)">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <returns>All the aggregate roots that match the given specification and were sorted by using the given sort predicate and the sort order.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoGetAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32)">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <returns>All the aggregate roots that match the given specification and were sorted by using the given sort predicate and the sort order.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoGetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoGetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoGetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregated roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoGetAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoGetAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoGetAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoFindAll">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <returns>All the aggregate roots got from the repository.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoFindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder)">
            <summary>
            Finds all the aggregate roots from repository, sorting by using the provided sort predicate
            and the specified sort order.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <returns>All the aggregate roots got from the repository, with the aggregate roots being sorted by
            using the provided sort predicate and the sort order.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoFindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32)">
            <summary>
            Finds all the aggregate roots from repository with paging enabled, sorting by using the provided sort predicate
            and the specified sort order.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <returns>All the aggregate roots got from the repository, with the aggregate roots being sorted by
            using the provided sort predicate and the sort order.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoFindAll(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Finds all the aggregate roots that match the given specification.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <returns>All the aggregate roots that match the given specification.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoFindAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder)">
            <summary>
            Finds all the aggregate roots that match the given specification, and sorts the aggregate roots
            by using the provided sort predicate and the specified sort order.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <returns>All the aggregate roots that match the given specification and were sorted by using the given sort predicate and the sort order.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoFindAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32)">
            <summary>
            Finds all the aggregate roots that match the given specification with paging enabled, and sorts the aggregate roots
            by using the provided sort predicate and the specified sort order.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The number of objects per page.</param>
            <param name="pageSize">The number of objects per page.</param>
            <returns>All the aggregate roots that match the given specification and were sorted by using the given sort predicate and the sort order.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoFindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoFindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoFindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoFindAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoFindAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoFindAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoGet(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Gets a single aggregate root instance from repository by using the given specification.
            </summary>
            <param name="specification">The specification with which the aggregate root should match.</param>
            <returns>The aggregate root instance.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoGet(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets a single aggregate root from repository.
            </summary>
            <param name="specification">The specification with which the aggregate root should match.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoFind(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Finds a single aggregate root that matches the given specification.
            </summary>
            <param name="specification">The specification with which the aggregate root should match.</param>
            <returns>The instance of the aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoFind(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds a single aggregate root from the repository.
            </summary>
            <param name="specification">The specification with which the aggregate root should match.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoExists(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Checkes whether the aggregate root, which matches the given specification, exists in the repository.
            </summary>
            <param name="specification">The specification with which the aggregate root should match.</param>
            <returns>True if the aggregate root exists, otherwise false.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoRemove(`0)">
            <summary>
            Removes the aggregate root from current repository.
            </summary>
            <param name="aggregateRoot">The aggregate root to be removed.</param>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.DoUpdate(`0)">
            <summary>
            Updates the aggregate root in the current repository.
            </summary>
            <param name="aggregateRoot">The aggregate root to be updated.</param>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.Add(`0)">
            <summary>
            Adds an aggregate root to the repository.
            </summary>
            <param name="aggregateRoot">The aggregate root to be added to the repository.</param>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.GetByKey(System.Object)">
            <summary>
            Gets the aggregate root instance from repository by a given key.
            </summary>
            <param name="key">The key of the aggregate root.</param>
            <returns>The instance of the aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.GetAll">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <returns>All the aggregate roots got from the repository.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder)">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <returns>All the aggregate roots got from the repository, with the aggregate roots being sorted by
            using the provided sort predicate and the sort order.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.GetAll(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <returns>All the aggregate roots that match the given specification.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.GetAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder)">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <returns>All the aggregate roots that match the given specification and were sorted by using the given sort predicate and the sort order.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32)">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <returns>All the aggregate roots got from the repository for the specified page, with the aggregate roots being sorted by
            using the provided sort predicate and the sort order.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.GetAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32)">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <returns>All the aggregate roots that match the given specification and were sorted by using the given sort predicate and the sort order.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregated roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.GetAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.GetAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.GetAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.Get(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Gets a single aggregate root instance from repository by using the given specification.
            </summary>
            <param name="specification">The specification with which the aggregate root should match.</param>
            <returns>The aggregate root instance.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.Get(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets a single aggregate root from repository.
            </summary>
            <param name="specification">The specification with which the aggregate root should match.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.FindAll">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder)">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.FindAll(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Finds all the aggregate roots that match the given specification.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.FindAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder)">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32)">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.FindAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32)">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The number of objects per page.</param>
            <param name="pageSize">The number of objects per page.</param>
            <returns>The aggregate roots.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.FindAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.FindAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.FindAll(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Apworks.Storage.SortOrder,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds all the aggregate roots from repository.
            </summary>
            <param name="specification">The specification with which the aggregate roots should match.</param>
            <param name="sortPredicate">The sort predicate which is used for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> enumeration which specifies the sort order.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The number of objects per page.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.Find(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Finds a single aggregate root that matches the given specification.
            </summary>
            <param name="specification">The specification with which the aggregate root should match.</param>
            <returns>The instance of the aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.Find(Apworks.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Finds a single aggregate root from the repository.
            </summary>
            <param name="specification">The specification with which the aggregate root should match.</param>
            <param name="eagerLoadingProperties">The properties for the aggregated objects that need to be loaded.</param>
            <returns>The aggregate root.</returns>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.Remove(`0)">
            <summary>
            Removes the aggregate root from current repository.
            </summary>
            <param name="aggregateRoot">The aggregate root to be removed.</param>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.Update(`0)">
            <summary>
            Updates the aggregate root in the current repository.
            </summary>
            <param name="aggregateRoot">The aggregate root to be updated.</param>
        </member>
        <member name="M:Apworks.Repositories.Repository`1.Exists(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Checkes whether the aggregate root, which matches the given specification, exists in the repository.
            </summary>
            <param name="specification">The specification with which the aggregate root should match.</param>
            <returns>True if the aggregate root exists, otherwise false.</returns>
        </member>
        <member name="P:Apworks.Repositories.Repository`1.Context">
            <summary>
            Gets the <see cref="T:Apworks.Repositories.IRepositoryContext"/> instance.
            </summary>
        </member>
        <member name="T:Apworks.Repositories.RepositoryException">
            <summary>
            Represents errors that occur in the repository of Apworks framework.
            </summary>
        </member>
        <member name="M:Apworks.Repositories.RepositoryException.#ctor">
            <summary>
            Initializes a new instance of the <c>RepositoryException</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Repositories.RepositoryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>RepositoryException</c> class with the specified
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apworks.Repositories.RepositoryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>RepositoryException</c> class with the specified
            error message and the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:Apworks.Repositories.RepositoryException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <c>RepositoryException</c> class with the specified
            string formatter and the arguments that are used for formatting the message which
            describes the error.
            </summary>
            <param name="format">The string formatter which is used for formatting the error message.</param>
            <param name="args">The arguments that are used by the formatter to build the error message.</param>
        </member>
        <member name="T:Apworks.SourcedAggregateRoot">
            <summary>
            Represents the base class for aggregate roots that support the event sourcing mechanism.
            </summary>
        </member>
        <member name="F:Apworks.SourcedAggregateRoot.UpdateVersionAndClearUncommittedEventsMethodName">
            <summary>
            The name of the method that updates the aggregate root version
            and clears the uncommitted events.
            </summary>
        </member>
        <member name="M:Apworks.SourcedAggregateRoot.#ctor">
            <summary>
            Initializes a new instance of <c>SourcedAggregateRoot</c> class.
            </summary>
        </member>
        <member name="M:Apworks.SourcedAggregateRoot.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of <c>SourcedAggregateRoot</c> class.
            </summary>
            <param name="id">The unique identifier of the aggregate root.</param>
        </member>
        <member name="M:Apworks.SourcedAggregateRoot.GetDomainEventHandlers(Apworks.Events.IDomainEvent)">
            <summary>
            Gets all the valid domain event handlers for the specific domain event.
            </summary>
            <param name="domainEvent">The domain event on which the handlers should be retrieved.</param>
            <returns>The domain event handlers.</returns>
        </member>
        <member name="M:Apworks.SourcedAggregateRoot.HandleEvent``1(``0)">
            <summary>
            Handles the given domain event on the aggregate root.
            </summary>
            <typeparam name="TEvent">The type of the domain event.</typeparam>
            <param name="event">The domain event which needs to be handled by aggregate root.</param>
        </member>
        <member name="M:Apworks.SourcedAggregateRoot.RaiseEvent``1(``0)">
            <summary>
            Raises a domain event.
            </summary>
            <typeparam name="TEvent">The type of the domain event.</typeparam>
            <param name="event">The domain event to be raised.</param>
        </member>
        <member name="M:Apworks.SourcedAggregateRoot.DoBuildFromSnapshot(Apworks.Snapshots.ISnapshot)">
            <summary>
            When overrided in the derived classes, builds the aggregate from the given snapshot instance.
            </summary>
            <param name="snapshot">The <see cref="T:Apworks.Snapshots.ISnapshot"/> instance
            with which the aggregate is built.</param>
        </member>
        <member name="M:Apworks.SourcedAggregateRoot.DoCreateSnapshot">
            <summary>
            When overrided in the derived classes, creates the snapshot instance based on the current aggregate.
            </summary>
            <returns>The <see cref="T:Apworks.Snapshots.ISnapshot"/> instance that is created based on
            the current aggregate.</returns>
        </member>
        <member name="M:Apworks.SourcedAggregateRoot.UpdateVersionAndClearUncommittedEvents">
            <summary>
            Updates the version of the aggregate root and clears all uncommitted events.
            </summary>
            <remarks>This method is handled by the Apworks framework internally and should not be referenced in any circumstances.</remarks>
        </member>
        <member name="M:Apworks.SourcedAggregateRoot.GetHashCode">
            <summary>
            Returns the hash code for current aggregate root.
            </summary>
            <returns>The calculated hash code for the current aggregate root.</returns>
        </member>
        <member name="M:Apworks.SourcedAggregateRoot.Equals(System.Object)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value indicating whether this instance is equal to a specified
            object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>True if obj is an instance of the <see cref="T:Apworks.ISourcedAggregateRoot"/> type and equals the value of this
            instance; otherwise, false.</returns>
        </member>
        <member name="M:Apworks.SourcedAggregateRoot.BuildFromHistory(System.Collections.Generic.IEnumerable{Apworks.Events.IDomainEvent})">
            <summary>
            Builds the aggreate from the historial events.
            </summary>
            <param name="historicalEvents">The historical events from which the aggregate is built.</param>
        </member>
        <member name="M:Apworks.SourcedAggregateRoot.BuildFromSnapshot(Apworks.Snapshots.ISnapshot)">
            <summary>
            Builds the aggregate from the specified snapshot instance.
            </summary>
            <param name="snapshot">The <see cref="T:Apworks.Snapshots.ISnapshot"/> instance
            with which the aggregate is built.</param>
        </member>
        <member name="M:Apworks.SourcedAggregateRoot.CreateSnapshot">
            <summary>
            Creates the snapshot instance based on the current aggregate.
            </summary>
            <returns>The <see cref="T:Apworks.Snapshots.ISnapshot"/> instance that is created based on
            the current aggregate.</returns>
        </member>
        <member name="P:Apworks.SourcedAggregateRoot.UncommittedEvents">
            <summary>
            Gets all the uncommitted events.
            </summary>
        </member>
        <member name="P:Apworks.SourcedAggregateRoot.Version">
            <summary>
            Gets the version of the aggregate.
            </summary>
        </member>
        <member name="P:Apworks.SourcedAggregateRoot.Branch">
            <summary>
            Gets the branch on which the aggregate exists.
            </summary>
        </member>
        <member name="P:Apworks.SourcedAggregateRoot.ID">
            <summary>
            Gets or sets the identifier of the aggregate root.
            </summary>
        </member>
        <member name="T:Apworks.Specifications.AnySpecification`1">
            <summary>
            Represents the specification that can be satisfied by the given object
            in any circumstance.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="T:Apworks.Specifications.Specification`1">
            <summary>
            Represents the base class for specifications.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="T:Apworks.Specifications.ISpecification`1">
            <summary>
            Represents that the implemented classes are specifications. For more
            information about the specification pattern, please refer to
            http://martinfowler.com/apsupp/spec.pdf.
            </summary>
            <typeparam name="T">The type of the object to which the specification
            is applied.</typeparam>
        </member>
        <member name="M:Apworks.Specifications.ISpecification`1.IsSatisfiedBy(`0)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates whether the specification
            is satisfied by the given object.
            </summary>
            <param name="obj">The object to which the specification is applied.</param>
            <returns>True if the specification is satisfied, otherwise false.</returns>
        </member>
        <member name="M:Apworks.Specifications.ISpecification`1.And(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Combines the current specification instance with another specification instance
            and returns the combined specification which represents that both the current and
            the given specification must be satisfied by the given object.
            </summary>
            <param name="other">The specification instance with which the current specification
            is combined.</param>
            <returns>The combined specification instance.</returns>
        </member>
        <member name="M:Apworks.Specifications.ISpecification`1.Or(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Combines the current specification instance with another specification instance
            and returns the combined specification which represents that either the current or
            the given specification should be satisfied by the given object.
            </summary>
            <param name="other">The specification instance with which the current specification
            is combined.</param>
            <returns>The combined specification instance.</returns>
        </member>
        <member name="M:Apworks.Specifications.ISpecification`1.AndNot(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Combines the current specification instance with another specification instance
            and returns the combined specification which represents that the current specification
            should be satisfied by the given object but the specified specification should not.
            </summary>
            <param name="other">The specification instance with which the current specification
            is combined.</param>
            <returns>The combined specification instance.</returns>
        </member>
        <member name="M:Apworks.Specifications.ISpecification`1.Not">
            <summary>
            Reverses the current specification instance and returns a specification which represents
            the semantics opposite to the current specification.
            </summary>
            <returns>The reversed specification instance.</returns>
        </member>
        <member name="M:Apworks.Specifications.ISpecification`1.GetExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="M:Apworks.Specifications.Specification`1.Eval(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Evaluates a LINQ expression to its corresponding specification.
            </summary>
            <param name="expression">The LINQ expression to be evaluated.</param>
            <returns>The specification which represents the same semantics as the given LINQ expression.</returns>
        </member>
        <member name="M:Apworks.Specifications.Specification`1.IsSatisfiedBy(`0)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates whether the specification
            is satisfied by the given object.
            </summary>
            <param name="obj">The object to which the specification is applied.</param>
            <returns>True if the specification is satisfied, otherwise false.</returns>
        </member>
        <member name="M:Apworks.Specifications.Specification`1.And(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Combines the current specification instance with another specification instance
            and returns the combined specification which represents that both the current and
            the given specification must be satisfied by the given object.
            </summary>
            <param name="other">The specification instance with which the current specification
            is combined.</param>
            <returns>The combined specification instance.</returns>
        </member>
        <member name="M:Apworks.Specifications.Specification`1.Or(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Combines the current specification instance with another specification instance
            and returns the combined specification which represents that either the current or
            the given specification should be satisfied by the given object.
            </summary>
            <param name="other">The specification instance with which the current specification
            is combined.</param>
            <returns>The combined specification instance.</returns>
        </member>
        <member name="M:Apworks.Specifications.Specification`1.AndNot(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Combines the current specification instance with another specification instance
            and returns the combined specification which represents that the current specification
            should be satisfied by the given object but the specified specification should not.
            </summary>
            <param name="other">The specification instance with which the current specification
            is combined.</param>
            <returns>The combined specification instance.</returns>
        </member>
        <member name="M:Apworks.Specifications.Specification`1.Not">
            <summary>
            Reverses the current specification instance and returns a specification which represents
            the semantics opposite to the current specification.
            </summary>
            <returns>The reversed specification instance.</returns>
        </member>
        <member name="M:Apworks.Specifications.Specification`1.GetExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="M:Apworks.Specifications.AnySpecification`1.GetExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="T:Apworks.Specifications.AndNotSpecification`1">
            <summary>
            Represents the combined specification which indicates that the first specification
            can be satisifed by the given object whereas the second one cannot.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="T:Apworks.Specifications.CompositeSpecification`1">
            <summary>
            Represents the base class for composite specifications.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="T:Apworks.Specifications.ICompositeSpecification`1">
            <summary>
            Represents that the implemented classes are composite specifications.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="P:Apworks.Specifications.ICompositeSpecification`1.Left">
            <summary>
            Gets the left side of the specification.
            </summary>
        </member>
        <member name="P:Apworks.Specifications.ICompositeSpecification`1.Right">
            <summary>
            Gets the right side of the specification.
            </summary>
        </member>
        <member name="M:Apworks.Specifications.CompositeSpecification`1.#ctor(Apworks.Specifications.ISpecification{`0},Apworks.Specifications.ISpecification{`0})">
            <summary>
            Constructs a new instance of <c>CompositeSpecification&lt;T&gt;</c> class.
            </summary>
            <param name="left">The first specification.</param>
            <param name="right">The second specification.</param>
        </member>
        <member name="P:Apworks.Specifications.CompositeSpecification`1.Left">
            <summary>
            Gets the first specification.
            </summary>
        </member>
        <member name="P:Apworks.Specifications.CompositeSpecification`1.Right">
            <summary>
            Gets the second specification.
            </summary>
        </member>
        <member name="M:Apworks.Specifications.AndNotSpecification`1.#ctor(Apworks.Specifications.ISpecification{`0},Apworks.Specifications.ISpecification{`0})">
            <summary>
            Constructs a new instance of <c>AndNotSpecification&lt;T&gt;</c> class.
            </summary>
            <param name="left">The first specification.</param>
            <param name="right">The second specification.</param>
        </member>
        <member name="M:Apworks.Specifications.AndNotSpecification`1.GetExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="T:Apworks.Specifications.AndSpecification`1">
            <summary>
            Represents the combined specification which indicates that both of the given
            specifications should be satisfied by the given object.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="M:Apworks.Specifications.AndSpecification`1.#ctor(Apworks.Specifications.ISpecification{`0},Apworks.Specifications.ISpecification{`0})">
            <summary>
            Constructs a new instance of <c>AndSpecification&lt;T&gt;</c> class.
            </summary>
            <param name="left">The first specification.</param>
            <param name="right">The second specification.</param>
        </member>
        <member name="M:Apworks.Specifications.AndSpecification`1.GetExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="T:Apworks.Specifications.ExpressionSpecification`1">
            <summary>
            Represents the specification which is represented by the corresponding
            LINQ expression.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="M:Apworks.Specifications.ExpressionSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Initializes a new instance of <c>ExpressionSpecification&lt;T&gt;</c> class.
            </summary>
            <param name="expression">The LINQ expression which represents the current
            specification.</param>
        </member>
        <member name="M:Apworks.Specifications.ExpressionSpecification`1.GetExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="T:Apworks.Specifications.ISpecificationParser`1">
            <summary>
            Represents that the implemented classes are specification parsers that
            parses the given specification to a domain specific criteria object, such 
            as the <c>ICriteria</c> instance in NHibernate.
            </summary>
            <typeparam name="TCriteria">The type of the domain specific criteria.</typeparam>
        </member>
        <member name="M:Apworks.Specifications.ISpecificationParser`1.Parse``1(Apworks.Specifications.ISpecification{``0})">
            <summary>
            Parses the given specification to a domain specific criteria object.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
            <param name="specification">The specified specification instance.</param>
            <returns>The instance of the domain specific criteria.</returns>
        </member>
        <member name="T:Apworks.Specifications.NoneSpecification`1">
            <summary>
            Represents the specification that can be satisfied by the given object
            in no circumstance.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="M:Apworks.Specifications.NoneSpecification`1.GetExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="T:Apworks.Specifications.NotSpecification`1">
            <summary>
            Represents the specification which indicates the semantics opposite to the given specification.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="M:Apworks.Specifications.NotSpecification`1.#ctor(Apworks.Specifications.ISpecification{`0})">
            <summary>
            Initializes a new instance of <c>NotSpecification&lt;T&gt;</c> class.
            </summary>
            <param name="specification">The specification to be reversed.</param>
        </member>
        <member name="M:Apworks.Specifications.NotSpecification`1.GetExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="T:Apworks.Specifications.OrSpecification`1">
            <summary>
            Represents the combined specification which indicates that either of the given
            specification should be satisfied by the given object.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="M:Apworks.Specifications.OrSpecification`1.#ctor(Apworks.Specifications.ISpecification{`0},Apworks.Specifications.ISpecification{`0})">
            <summary>
            Initializes a new instance of <c>OrSpecification&lt;T&gt;</c> class.
            </summary>
            <param name="left">The first specification.</param>
            <param name="right">The second specification.</param>
        </member>
        <member name="M:Apworks.Specifications.OrSpecification`1.GetExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="T:Apworks.Specifications.SpecificationException">
            <summary>
            Represents errors that occur in the specification of Apworks framework.
            </summary>
        </member>
        <member name="M:Apworks.Specifications.SpecificationException.#ctor">
            <summary>
            Initializes a new instance of the <c>SpecificationException</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Specifications.SpecificationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SpecificationException</c> class with the specified
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apworks.Specifications.SpecificationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>SpecificationException</c> class with the specified
            error message and the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:Apworks.Specifications.SpecificationException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <c>SpecificationException</c> class with the specified
            string formatter and the arguments that are used for formatting the message which
            describes the error.
            </summary>
            <param name="format">The string formatter which is used for formatting the error message.</param>
            <param name="args">The arguments that are used by the formatter to build the error message.</param>
        </member>
        <member name="T:Apworks.Storage.IStorage">
            <summary>
            Represents that the implemented classes are storages.
            </summary>
        </member>
        <member name="M:Apworks.Storage.IStorage.SelectFirstOnly``1">
            <summary>
            Gets the first-only object from storage.
            </summary>
            <typeparam name="T">The type of the object to get.</typeparam>
            <returns>The instance of the object.</returns>
        </member>
        <member name="M:Apworks.Storage.IStorage.SelectFirstOnly``1(Apworks.Specifications.ISpecification{``0})">
            <summary>
            Gets the first-only object from the storage by given specification.
            </summary>
            <typeparam name="T">The type of the object to get.</typeparam>
            <param name="specification">The specification.</param>
            <returns>The instance of the object.</returns>
        </member>
        <member name="M:Apworks.Storage.IStorage.GetRecordCount``1">
            <summary>
            Gets the number of records in the storage.
            </summary>
            <typeparam name="T">The type of the object to get.</typeparam>
            <returns>The number of records in the storage.</returns>
        </member>
        <member name="M:Apworks.Storage.IStorage.GetRecordCount``1(Apworks.Specifications.ISpecification{``0})">
            <summary>
            Gets the number of records in the storage.
            </summary>
            <typeparam name="T">The type of the object to get.</typeparam>
            <param name="specification">The specification.</param>
            <returns>The number of records in the storage.</returns>
        </member>
        <member name="M:Apworks.Storage.IStorage.Select``1">
            <summary>
            Gets a list of all objects from storage.
            </summary>
            <typeparam name="T">The type of the object to get.</typeparam>
            <returns>A list of the objects.</returns>
        </member>
        <member name="M:Apworks.Storage.IStorage.Select``1(Apworks.Specifications.ISpecification{``0})">
            <summary>
            Gets a list of objects from storage by given specification.
            </summary>
            <typeparam name="T">The type of the object to get.</typeparam>
            <param name="specification">The specification.</param>
            <returns>A list of the objects.</returns>
        </member>
        <member name="M:Apworks.Storage.IStorage.Select``1(Apworks.Specifications.ISpecification{``0},Apworks.Storage.PropertyBag,Apworks.Storage.SortOrder)">
            <summary>
            Gets a list of ordered objects from storage by given specification.
            </summary>
            <typeparam name="T">The type of the object to get.</typeparam>
            <param name="specification">The specification.</param>
            <param name="orders">The <c>PropertyBag</c> instance which contains the ordering fields.</param>
            <param name="sortOrder">The sort order.</param>
            <returns>A list of ordered objects.</returns>
        </member>
        <member name="M:Apworks.Storage.IStorage.Insert``1(Apworks.Storage.PropertyBag)">
            <summary>
            Inserts the object into the storage.
            </summary>
            <typeparam name="T">The type of the object to be inserted.</typeparam>
            <param name="allFields">The <c>PropertyBag</c> instance which contains the properties and property values
            to be inserted.</param>
        </member>
        <member name="M:Apworks.Storage.IStorage.Delete``1">
            <summary>
            Deletes all objects from storage.
            </summary>
            <typeparam name="T">The type of the object to be deleted.</typeparam>
        </member>
        <member name="M:Apworks.Storage.IStorage.Delete``1(Apworks.Specifications.ISpecification{``0})">
            <summary>
            Deletes specified objects from storage.
            </summary>
            <typeparam name="T">The type of the object to be deleted.</typeparam>
            <param name="specification">The specification.</param>
        </member>
        <member name="M:Apworks.Storage.IStorage.Update``1(Apworks.Storage.PropertyBag)">
            <summary>
            Updates all the objects in storage with the given values.
            </summary>
            <typeparam name="T">The type of the object to be updated.</typeparam>
            <param name="newValues">The <c>PropertyBag</c> instance which contains the properties and property values
            to be updated.</param>
        </member>
        <member name="M:Apworks.Storage.IStorage.Update``1(Apworks.Storage.PropertyBag,Apworks.Specifications.ISpecification{``0})">
            <summary>
            Updates all the objects in storage with the given values and the specification.
            </summary>
            <typeparam name="T">The type of the object to be updated.</typeparam>
            <param name="newValues">The <c>PropertyBag</c> instance which contains the properties and property values
            to be updated.</param>
            <param name="specification">The specification.</param>
        </member>
        <member name="T:Apworks.Storage.IStorageMappingResolver">
            <summary>
            Represents that the implemented classes are storage mapping resolvers.
            </summary>
        </member>
        <member name="M:Apworks.Storage.IStorageMappingResolver.ResolveTableName``1">
            <summary>
            Resolves the table name by using the given type.
            </summary>
            <typeparam name="T">The type of the object to be resolved.</typeparam>
            <returns>The table name.</returns>
        </member>
        <member name="M:Apworks.Storage.IStorageMappingResolver.ResolveFieldName``1(System.String)">
            <summary>
            Resolves the field name by using the given type and property name.
            </summary>
            <typeparam name="T">The type of the object to be resolved.</typeparam>
            <param name="propertyName">The property name.</param>
            <returns>The field name.</returns>
        </member>
        <member name="M:Apworks.Storage.IStorageMappingResolver.IsAutoIdentityField``1(System.String)">
            <summary>
            Checks if the given property is mapped to an auto-generated identity field.
            </summary>
            <typeparam name="T">The type of the object to be resolved.</typeparam>
            <param name="propertyName">The property name.</param>
            <returns>True if the field is mapped to an auto-generated identity, otherwise false.</returns>
        </member>
        <member name="T:Apworks.Storage.PropertyBag">
            <summary>
            Represents the property bag that contains a list of the mapping between the properties and their values
            for a specific object.
            </summary>
        </member>
        <member name="F:Apworks.Storage.PropertyBag.PropertyBagBindingFlags">
            <summary>
            The binding flags for getting properties on a given object.
            </summary>
        </member>
        <member name="M:Apworks.Storage.PropertyBag.#ctor">
            <summary>
            Initializes a new instance of <c>PropertyBag</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Storage.PropertyBag.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <c>PropertyBag</c> class and populates the content by using the given object.
            </summary>
            <param name="target">The target object used for initializing the property bag.</param>
        </member>
        <member name="M:Apworks.Storage.PropertyBag.Clear">
            <summary>
            Clears the property bag.
            </summary>
        </member>
        <member name="M:Apworks.Storage.PropertyBag.Add(System.String,System.Object)">
            <summary>
            Adds a property and its value to the property bag.
            </summary>
            <param name="propertyName">The name of the property to be added.</param>
            <param name="propertyValue">The value of the property.</param>
            <returns>The instance with the added property.</returns>
        </member>
        <member name="M:Apworks.Storage.PropertyBag.AddSort``1(System.String)">
            <summary>
            Adds a property to property bag, to be used as the sort field.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="propertyName">The name of the property to be added.</param>
            <returns>The instance with the added sort field.</returns>
        </member>
        <member name="M:Apworks.Storage.PropertyBag.ToString">
            <summary>
            Gets the <see cref="T:System.String"/> value which represents the current property bag.
            </summary>
            <returns>The <see cref="T:System.String"/> value which represents the current property bag.</returns>
        </member>
        <member name="M:Apworks.Storage.PropertyBag.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Apworks.Storage.PropertyBag.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Apworks.Storage.PropertyBag.Item(System.String)">
            <summary>
            Gets the property value by using the index.
            </summary>
            <param name="idx">The index.</param>
            <returns>The property value.</returns>
        </member>
        <member name="P:Apworks.Storage.PropertyBag.Count">
            <summary>
            Gets the number of elements in the property bag.
            </summary>
        </member>
        <member name="T:Apworks.Storage.RdbmsStorage">
            <summary>
            Represents a relational database storage device.
            </summary>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.#ctor(System.String,Apworks.Storage.IStorageMappingResolver)">
            <summary>
            Initializes a new instance of <c>RdbmsStorage</c> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="mappingResolver">The mapping resolver.</param>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.CreateWhereClauseBuilder``1">
            <summary>
            Creates a new instance of the where clause builder.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <returns>The instance of the where clause builder.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetWhereClauseBuilder``1">
            <summary>
            Gets the instance of the where clause builder for the given data type.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <returns>The instance of the where clause builder.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.CreateDatabaseConnection">
            <summary>
            Creates the database connection.
            </summary>
            <returns>The <see cref="T:System.Data.Common.DbConnection"/> instance which represents
            the open connection to the relational database.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.CreateParameter">
            <summary>
            Creates a database parameter object.
            </summary>
            <returns>The instance of database parameter object.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.CreateCommand(System.String,System.Data.Common.DbConnection)">
            <summary>
            Creates a instance of the command object.
            </summary>
            <param name="sql">The SQL statement used for creating the command object.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> which represents
            the database connection.</param>
            <returns>The instance of the command object.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">A <see cref="T:System.Boolean"/> value which indicates whether
            the object should be disposed explicitly.</param>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetSelectCriteria``1(Apworks.Storage.PropertyBag)">
            <summary>
            Gets the selection criteria clause from the property bag.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="criteria">The <c>PropertyBag</c> instance which contains the criteria.</param>
            <returns>The selection criteria clause, commonly, the WHERE clause.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetSelectCriteriaDbParameterList``1(Apworks.Storage.PropertyBag)">
            <summary>
            Gets a list of database parameters for constructing the selection criteria clause.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="criteria">The <c>PropertyBag</c> instance which contains the criteria.</param>
            <returns>The list of database parameters.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetSelectCriteriaDbParameterList``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets a list of database parameters for constructing the selection criteria clause.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="parameterValues">The <c>Dictionary&lt;string, object&gt;</c> instance which contains the criteria.</param>
            <returns>The list of database parameters.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetOrderByFieldList``1(Apworks.Storage.PropertyBag)">
            <summary>
            Gets the field list for sorting.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="orders">The <c>PropertyBag</c> instance which contains the fields for sorting.</param>
            <returns>The sorting field list, commonly, the ORDER BY clause.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetTableName``1">
            <summary>
            Gets the table name.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <returns>The table name.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetFieldName``1(System.String)">
            <summary>
            Gets the name of the field by using the specified property name.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="propertyName">The property name.</param>
            <returns>The field name in relational database tables.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetFieldNameList``1">
            <summary>
            Gets the list of the field names, separated by the comma character.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <returns>The field names, separated by the comma character.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetFieldNameList``1(Apworks.Storage.PropertyBag)">
            <summary>
            Gets the list of the field names, separated by the comma character, by using the
            specified fields.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="allFields">The <c>PropertyBag</c> object that contains the specified fields.</param>
            <returns>The field names, separated by the comma character.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetInsertFieldNameList``1(Apworks.Storage.PropertyBag)">
            <summary>
            Gets a comma separated list of the field names for INSERT operation, by using the specified
            fields.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="fields">The <c>PropertyBag</c> instance which contains the fields.</param>
            <returns>The comma separated list of the field names for INSERT operation.</returns>
            <remarks>The auto-generated identity fields will be omitted.</remarks>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetInsertParameterNameList``1(Apworks.Storage.PropertyBag)">
            <summary>
            Gets a comma separated list of the field parameter names for INSERT operation, by using the
            specified fields.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="fields">The <c>PropertyBag</c> object which contains the fields.</param>
            <returns>The comma separated list of the field parameter names for INSERT operation.</returns>
            <remarks>The auto-generated identity fields will be omitted.</remarks>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetInsertDbParameterList``1(Apworks.Storage.PropertyBag)">
            <summary>
            Gets a list of database parameters used by the INSERT operation, by using the specified
            fields.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="fields">The <c>PropertyBag</c> object which contains the fields.</param>
            <returns>The list of database parameters.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetUpdateCriteria``1(Apworks.Storage.PropertyBag)">
            <summary>
            Gets a <see cref="T:System.String"/> value which represents the selection criteria in the UPDATE clause.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="criteria">The <c>PropertyBag</c> object which contains the fields for selection criteria.</param>
            <returns>A <see cref="T:System.String"/> value which represents the selection criteria in the UPDATE clause.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetUpdateCriteriaDbParameterList``1(Apworks.Storage.PropertyBag)">
            <summary>
            Gets a list of database parameters used by the UPDATE operation as the update criteria.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="criteria">The <c>PropertyBag</c> object which contains the fields for selection criteria.</param>
            <returns>The list of database parameters.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetUpdateCriteriaDbParameterList``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates the <see cref="T:System.Data.Common.DbParameter"/> list which contains the parameter
            definitions to be used in the UPDATE WHERE clause.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="parameterValues">The parameter values.</param>
            <returns>A list of <see cref="T:System.Data.Common.DbParameter"/> objects.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetUpdateFieldList``1(Apworks.Storage.PropertyBag)">
            <summary>
            Gets a comma separated <see cref="T:System.String"/> value which represents the fields
            that needs to be updated to the new values.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="newValues">The <c>PropertyBag</c> object which contains the fields and their
            new values to be updated.</param>
            <returns>A comma separated <see cref="T:System.String"/> value which represents the fields.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetUpdateDbParameterList``1(Apworks.Storage.PropertyBag)">
            <summary>
            Gets the database parameters that are used for update the fields in UPDATE clause.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="newValues">The <c>PropertyBag</c> object which contains the fields and their
            new values to be updated.</param>
            <returns>The database parameters.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetDeleteCriteria``1(Apworks.Storage.PropertyBag)">
            <summary>
            Gets a <see cref="T:System.String"/> value which represents the selection criteria in the DELETE clause.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="criteria">The <c>PropertyBag</c> object which contains the fields for selection criteria.</param>
            <returns>A <see cref="T:System.String"/> value which represents the selection criteria in the DELETE clause.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetDeleteDbParameterList``1(Apworks.Storage.PropertyBag)">
            <summary>
            Gets the database parameters that are used for update the fields in DELETE clause.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="criteria">The <c>PropertyBag</c> object which contains the fields and their
            new values to be updated.</param>
            <returns>The database parameters.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetDeleteDbParameterList``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates the <see cref="T:System.Data.Common.DbParameter"/> list which contains the parameter
            definitions to be used in the DELETE WHERE clause.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="parameterValues">The parameter values.</param>
            <returns>A list of <see cref="T:System.Data.Common.DbParameter"/> objects.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.CreateFromReader``1(System.Data.Common.DbDataReader)">
            <summary>
            Creates the data object instance from a <see cref="T:System.Data.Common.DbDataReader"/> instance.
            </summary>
            <typeparam name="T">The type of the object to be created.</typeparam>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> instance.</param>
            <returns>The data object instance.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.DoGetRecordCount``1(Apworks.Specifications.ISpecification{``0},System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Gets the number of records existing in the current storage.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="specification">The instance of <see cref="T:Apworks.Specifications.ISpecification`1"/>
            which represents the filter criteria.</param>
            <param name="connection">The instance of <see cref="T:System.Data.Common.DbConnection"/> which represents
            the connection to a database.</param>
            <param name="transaction">The instance of <see cref="T:System.Data.Common.DbTransaction"/> which represents
            the database transaction.</param>
            <returns>The number of records.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.DoSelectFirstOnly``1(Apworks.Specifications.ISpecification{``0},System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Selects the first-only object from the current storage.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="specification">The instance of <see cref="T:Apworks.Specifications.ISpecification`1"/>
            which represents the filter criteria.</param>
            <param name="connection">The instance of <see cref="T:System.Data.Common.DbConnection"/> which represents
            the connection to a database.</param>
            <param name="transaction">The instance of <see cref="T:System.Data.Common.DbTransaction"/> which represents
            the database transaction.</param>
            <returns>The first-only object that exists in the current storage.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.DoSelect``1(Apworks.Specifications.ISpecification{``0},Apworks.Storage.PropertyBag,Apworks.Storage.SortOrder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Selects all the object from the current storage.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="specification">The instance of <see cref="T:Apworks.Specifications.ISpecification`1"/>
            which represents the filter criteria.</param>
            <param name="orders">The <see cref="T:Apworks.Storage.PropertyBag"/> which represents the fields for sorting.</param>
            <param name="sortOrder">The <see cref="T:Apworks.Storage.SortOrder"/> value which represents the sort order.</param>
            <param name="connection">The instance of <see cref="T:System.Data.Common.DbConnection"/> which represents
            the connection to a database.</param>
            <param name="transaction">The instance of <see cref="T:System.Data.Common.DbTransaction"/> which represents
            the database transaction.</param>
            <returns>All the objects selected.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.DoInsert``1(Apworks.Storage.PropertyBag,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Inserts an object into current storage.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="allFields">The fields to be inserted.</param>
            <param name="connection">The instance of <see cref="T:System.Data.Common.DbConnection"/> which represents
            the connection to a database.</param>
            <param name="transaction">The instance of <see cref="T:System.Data.Common.DbTransaction"/> which represents
            the database transaction.</param>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.DoDelete``1(Apworks.Specifications.ISpecification{``0},System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Deletes an object from current storage.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="specification">The instance of <see cref="T:Apworks.Specifications.ISpecification`1"/>
            which represents the filter criteria.</param>
            <param name="connection">The instance of <see cref="T:System.Data.Common.DbConnection"/> which represents
            the connection to a database.</param>
            <param name="transaction">The instance of <see cref="T:System.Data.Common.DbTransaction"/> which represents
            the database transaction.</param>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.DoUpdate``1(Apworks.Storage.PropertyBag,Apworks.Specifications.ISpecification{``0},System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Updates the object with new values.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="newValues">The <see cref="T:Apworks.Storage.PropertyBag"/> which contains the new values.</param>
            <param name="specification">The instance of <see cref="T:Apworks.Specifications.ISpecification`1"/>
            which represents the filter criteria.</param>
            <param name="connection">The instance of <see cref="T:System.Data.Common.DbConnection"/> which represents
            the connection to a database.</param>
            <param name="transaction">The instance of <see cref="T:System.Data.Common.DbTransaction"/> which represents
            the database transaction.</param>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.SelectFirstOnly``1">
            <summary>
            Gets the first only object from storage.
            </summary>
            <typeparam name="T">The type of the object to get.</typeparam>
            <returns>The instance of the object.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.SelectFirstOnly``1(Apworks.Specifications.ISpecification{``0})">
            <summary>
            Gets the first-only object from the storage by given specification.
            </summary>
            <typeparam name="T">The type of the object to get.</typeparam>
            <param name="specification">The specification.</param>
            <returns>The instance of the object.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetRecordCount``1">
            <summary>
            Gets the number of records in the storage.
            </summary>
            <typeparam name="T">The type of the object to get.</typeparam>
            <returns>The number of records in the storage.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.GetRecordCount``1(Apworks.Specifications.ISpecification{``0})">
            <summary>
            Gets the number of records in the storage.
            </summary>
            <typeparam name="T">The type of the object to get.</typeparam>
            <param name="specification">The specification.</param>
            <returns>The number of records in the storage.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.Select``1">
            <summary>
            Gets a list of all objects from storage.
            </summary>
            <typeparam name="T">The type of the object to get.</typeparam>
            <returns>A list of the objects.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.Select``1(Apworks.Specifications.ISpecification{``0})">
            <summary>
            Gets a list of objects from storage by given specification.
            </summary>
            <typeparam name="T">The type of the object to get.</typeparam>
            <param name="specification">The specification.</param>
            <returns>A list of the objects.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.Select``1(Apworks.Specifications.ISpecification{``0},Apworks.Storage.PropertyBag,Apworks.Storage.SortOrder)">
            <summary>
            Gets a list of ordered objects from storage by given specification.
            </summary>
            <typeparam name="T">The type of the object to get.</typeparam>
            <param name="specification">The specification.</param>
            <param name="orders">The <c>PropertyBag</c> instance which contains the ordering fields.</param>
            <param name="sortOrder">The sort order.</param>
            <returns>A list of ordered objects.</returns>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.Insert``1(Apworks.Storage.PropertyBag)">
            <summary>
            Inserts the object into the storage.
            </summary>
            <typeparam name="T">The type of the object to be inserted.</typeparam>
            <param name="allFields">The <c>PropertyBag</c> instance which contains the properties and property values
            to be inserted.</param>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.Delete``1">
            <summary>
            Deletes all objects from storage.
            </summary>
            <typeparam name="T">The type of the object to be deleted.</typeparam>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.Delete``1(Apworks.Specifications.ISpecification{``0})">
            <summary>
            Deletes specified objects from storage.
            </summary>
            <typeparam name="T">The type of the object to be deleted.</typeparam>
            <param name="specification">The specification.</param>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.Update``1(Apworks.Storage.PropertyBag)">
            <summary>
            Updates all the objects in storage with the given values.
            </summary>
            <typeparam name="T">The type of the object to be updated.</typeparam>
            <param name="newValues">The <c>PropertyBag</c> instance which contains the properties and property values
            to be updated.</param>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.Update``1(Apworks.Storage.PropertyBag,Apworks.Specifications.ISpecification{``0})">
            <summary>
            Updates all the objects in storage with the given values and the specification.
            </summary>
            <typeparam name="T">The type of the object to be updated.</typeparam>
            <param name="newValues">The <c>PropertyBag</c> instance which contains the properties and property values
            to be updated.</param>
            <param name="specification">The specification.</param>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.Commit">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:Apworks.Storage.RdbmsStorage.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
        </member>
        <member name="P:Apworks.Storage.RdbmsStorage.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
        </member>
        <member name="P:Apworks.Storage.RdbmsStorage.MappingResolver">
            <summary>
            Gets the instance of the storage mapping resolver.
            </summary>
        </member>
        <member name="P:Apworks.Storage.RdbmsStorage.IsolationLevel">
            <summary>
            Gets a <see cref="T:System.Data.IsolationLevel"/> value which represents the transaction
            locking behavior for the connection.
            </summary>
        </member>
        <member name="P:Apworks.Storage.RdbmsStorage.DistributedTransactionSupported">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work supports MS-DTC.
            </summary>
        </member>
        <member name="P:Apworks.Storage.RdbmsStorage.Committed">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work was successfully committed.
            </summary>
        </member>
        <member name="T:Apworks.Storage.StorageException">
            <summary>
            Represents the errors occur when performing storage operations in Apworks.
            </summary>
        </member>
        <member name="M:Apworks.Storage.StorageException.#ctor">
            <summary>
            Initializes a new instance of the <c>StorageException</c> class.
            </summary>
        </member>
        <member name="M:Apworks.Storage.StorageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>StorageException</c> class with the specified
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apworks.Storage.StorageException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>StorageException</c> class with the specified
            error message and the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:Apworks.Storage.StorageException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <c>StorageException</c> class with the specified
            string formatter and the arguments that are used for formatting the message which
            describes the error.
            </summary>
            <param name="format">The string formatter which is used for formatting the error message.</param>
            <param name="args">The arguments that are used by the formatter to build the error message.</param>
        </member>
        <member name="T:Apworks.Storage.StorageMappingSchema">
            <remarks/>
        </member>
        <member name="P:Apworks.Storage.StorageMappingSchema.DataTypes">
            <remarks/>
        </member>
        <member name="T:Apworks.Storage.DataTypes">
            <remarks/>
        </member>
        <member name="P:Apworks.Storage.DataTypes.DataType">
            <remarks/>
        </member>
        <member name="T:Apworks.Storage.DataType">
            <remarks/>
        </member>
        <member name="P:Apworks.Storage.DataType.Properties">
            <remarks/>
        </member>
        <member name="P:Apworks.Storage.DataType.FullName">
            <remarks/>
        </member>
        <member name="P:Apworks.Storage.DataType.MapTo">
            <remarks/>
        </member>
        <member name="T:Apworks.Storage.Properties">
            <remarks/>
        </member>
        <member name="P:Apworks.Storage.Properties.Property">
            <remarks/>
        </member>
        <member name="T:Apworks.Storage.Property">
            <remarks/>
        </member>
        <member name="P:Apworks.Storage.Property.Name">
            <remarks/>
        </member>
        <member name="P:Apworks.Storage.Property.MapTo">
            <remarks/>
        </member>
        <member name="P:Apworks.Storage.Property.Identity">
            <remarks/>
        </member>
        <member name="P:Apworks.Storage.Property.IdentitySpecified">
            <remarks/>
        </member>
        <member name="P:Apworks.Storage.Property.AutoGenerate">
            <remarks/>
        </member>
        <member name="P:Apworks.Storage.Property.AutoGenerateSpecified">
            <remarks/>
        </member>
        <member name="T:Apworks.Storage.XmlStorageMappingResolver">
            <summary>
            Represents the XML storage mapping resolver.
            </summary>
        </member>
        <member name="M:Apworks.Storage.XmlStorageMappingResolver.#ctor(System.String)">
            <summary>
            Initializes a new instance of <c>XmlStorageMappingResolver</c> class.
            </summary>
            <param name="fileName">The file name of the external XML mapping file.</param>
        </member>
        <member name="M:Apworks.Storage.XmlStorageMappingResolver.ResolveTableName``1">
            <summary>
            Resolves the table name by using the given type.
            </summary>
            <typeparam name="T">The type of the object to be resolved.</typeparam>
            <returns>The table name.</returns>
        </member>
        <member name="M:Apworks.Storage.XmlStorageMappingResolver.ResolveFieldName``1(System.String)">
            <summary>
            Resolves the field name by using the given type and property name.
            </summary>
            <typeparam name="T">The type of the object to be resolved.</typeparam>
            <param name="propertyName">The property name.</param>
            <returns>The field name.</returns>
        </member>
        <member name="M:Apworks.Storage.XmlStorageMappingResolver.IsAutoIdentityField``1(System.String)">
            <summary>
            Checks if the given property is mapped to an auto-generated identity field.
            </summary>
            <typeparam name="T">The type of the object to be resolved.</typeparam>
            <param name="propertyName">The property name.</param>
            <returns>True if the field is mapped to an auto-generated identity, otherwise false.</returns>
        </member>
        <member name="T:Apworks.Transactions.DistributedTransactionCoordinator">
            <summary>
            Represents the transaction coordinator that utilizes Microsoft Distributed
            Transaction Coordinator to control the transaction.
            </summary>
        </member>
        <member name="T:Apworks.Transactions.TransactionCoordinator">
            <summary>
            Represents the base class for transaction coordinators.
            </summary>
        </member>
        <member name="T:Apworks.Transactions.ITransactionCoordinator">
            <summary>
            Represents that the implemented classes are transaction coordinators.
            </summary>
        </member>
        <member name="M:Apworks.Transactions.TransactionCoordinator.#ctor(Apworks.IUnitOfWork[])">
            <summary>
            Initializes a new instance of <c>TransactionCoordinator</c> class.
            </summary>
            <param name="unitOfWorks">The <see cref="T:Apworks.IUnitOfWork"/> instances to be managed by current
            transaction coordinator.</param>
        </member>
        <member name="M:Apworks.Transactions.TransactionCoordinator.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">A <see cref="T:System.Boolean"/> value which indicates whether
            the object should be disposed explicitly.</param>
        </member>
        <member name="M:Apworks.Transactions.TransactionCoordinator.Commit">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:Apworks.Transactions.TransactionCoordinator.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
        </member>
        <member name="P:Apworks.Transactions.TransactionCoordinator.DistributedTransactionSupported">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work could support Microsoft Distributed
            Transaction Coordinator (MS-DTC).
            </summary>
        </member>
        <member name="P:Apworks.Transactions.TransactionCoordinator.Committed">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates
            whether the Unit of Work was successfully committed.
            </summary>
        </member>
        <member name="M:Apworks.Transactions.DistributedTransactionCoordinator.#ctor(Apworks.IUnitOfWork[])">
            <summary>
            Initializes a new instance of <c>DistributedTransactionCoordinator</c> class.
            </summary>
            <param name="unitOfWorks">The <see cref="T:Apworks.IUnitOfWork"/> instances to be managed by current
            transaction coordinator.</param>
        </member>
        <member name="M:Apworks.Transactions.DistributedTransactionCoordinator.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">A <see cref="T:System.Boolean"/> value which indicates whether
            the object should be disposed explicitly.</param>
        </member>
        <member name="M:Apworks.Transactions.DistributedTransactionCoordinator.Commit">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="T:Apworks.Transactions.SuppressedTransactionCoordinator">
            <summary>
            Represents the transaction coordinator that does nothing else
            but simply commits the transactions for each managed <see cref="T:Apworks.IUnitOfWork"/> instances.
            </summary>
        </member>
        <member name="M:Apworks.Transactions.SuppressedTransactionCoordinator.#ctor(Apworks.IUnitOfWork[])">
            <summary>
            Initializes a new instance of <c>SuppressedTransactionCoordinator</c> class.
            </summary>
            <param name="unitOfWorks">The <see cref="T:Apworks.IUnitOfWork"/> instances to be managed by current
            transaction coordinator.</param>
        </member>
        <member name="T:Apworks.Transactions.TransactionCoordinatorFactory">
            <summary>
            Represents the factory type which creates an instance of <see cref="T:Apworks.Transactions.ITransactionCoordinator"/>
            based on the given unit of works.
            </summary>
        </member>
        <member name="M:Apworks.Transactions.TransactionCoordinatorFactory.Create(Apworks.IUnitOfWork[])">
            <summary>
            Creates an instance of <see cref="T:Apworks.Transactions.ITransactionCoordinator"/> based on the given unit of works.
            </summary>
            <param name="args">The unit of works.</param>
            <returns>An instance of <see cref="T:Apworks.Transactions.ITransactionCoordinator"/> type.</returns>
        </member>
        <member name="T:Apworks.Utils">
            <summary>
            Represents the utility class used by Apworks.
            </summary>
        </member>
        <member name="M:Apworks.Utils.GetSignature(System.Type)">
            <summary>
            Gets the signature string.
            </summary>
            <param name="type">The type.</param>
            <returns>The signature string.</returns>
        </member>
        <member name="M:Apworks.Utils.GetSignature(System.Reflection.MethodInfo)">
            <summary>
            Gets the signature string.
            </summary>
            <param name="method">The method.</param>
            <returns>The signature string.</returns>
        </member>
        <member name="M:Apworks.Utils.Deserialize(Apworks.Serialization.IObjectSerializer,System.Type,System.Byte[])">
            <summary>
            Deserializes an object from the given byte stream.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="type">The type of the object to be deserialized.</param>
            <param name="stream">The byte stream that contains the data of the object.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Apworks.Utils.GetHashCode(System.Int32[])">
            <summary>
            Gets the hash code for an object based on the given array of hash
            codes from each property of the object.
            </summary>
            <param name="hashCodesForProperties">The array of the hash codes
            that are from each property of the object.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Apworks.Utils.GetUniqueIdentifier(System.Int32)">
            <summary>
            Generates a unique identifier represented by a <see cref="T:System.String"/> value
            with the specified length.
            </summary>
            <param name="length">The length of the identifier to be generated.</param>
            <returns>The unique identifier represented by a <see cref="T:System.String"/> value.</returns>
        </member>
    </members>
</doc>
